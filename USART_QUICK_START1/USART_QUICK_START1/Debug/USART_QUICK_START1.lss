
USART_QUICK_START1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029c8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000029c8  000029c8  000129c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000014  20000000  000029d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000002a4  20000018  000029e8  00020014  2**3
                  ALLOC
  4 .stack        00002004  200002bc  00002c8c  00020014  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002ecff  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000382d  00000000  00000000  0004ed94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000829e  00000000  00000000  000525c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000590  00000000  00000000  0005a85f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b68  00000000  00000000  0005adef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001b2f2  00000000  00000000  0005b957  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000ea3f  00000000  00000000  00076c49  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008aa58  00000000  00000000  00085688  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000eb8  00000000  00000000  001100e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200022c0 	.word	0x200022c0
       4:	00002209 	.word	0x00002209
       8:	00002205 	.word	0x00002205
       c:	00002205 	.word	0x00002205
	...
      2c:	00002205 	.word	0x00002205
	...
      38:	00002205 	.word	0x00002205
      3c:	00002205 	.word	0x00002205
      40:	00002205 	.word	0x00002205
      44:	00002205 	.word	0x00002205
      48:	00002205 	.word	0x00002205
      4c:	00002205 	.word	0x00002205
      50:	00002205 	.word	0x00002205
      54:	00002205 	.word	0x00002205
      58:	00002205 	.word	0x00002205
      5c:	00002205 	.word	0x00002205
      60:	00002205 	.word	0x00002205
      64:	00000375 	.word	0x00000375
      68:	00000385 	.word	0x00000385
      6c:	00000395 	.word	0x00000395
      70:	000003a5 	.word	0x000003a5
      74:	000003b5 	.word	0x000003b5
      78:	000003c5 	.word	0x000003c5
      7c:	00002205 	.word	0x00002205
      80:	00002205 	.word	0x00002205
      84:	00002205 	.word	0x00002205
      88:	000005ed 	.word	0x000005ed
      8c:	000005fd 	.word	0x000005fd
      90:	0000060d 	.word	0x0000060d
	...
      9c:	00002205 	.word	0x00002205
      a0:	00002205 	.word	0x00002205
      a4:	00002205 	.word	0x00002205
      a8:	00002205 	.word	0x00002205
      ac:	00002205 	.word	0x00002205
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000018 	.word	0x20000018
      d4:	00000000 	.word	0x00000000
      d8:	000029d0 	.word	0x000029d0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000001c 	.word	0x2000001c
     108:	000029d0 	.word	0x000029d0
     10c:	000029d0 	.word	0x000029d0
     110:	00000000 	.word	0x00000000

00000114 <set_register_to>:

	adc_mode = MODE_CONT| INCLK_MCLK2TRI | DAT_STA_DIS; //Set to normal settings
	set_register_to(0, 0b001, adc_mode, 3);
}

void set_register_to(int ADC_index, uint64_t reg_adress, uint64_t value, uint64_t bytes_in_register) {
     114:	b530      	push	{r4, r5, lr}
     116:	b083      	sub	sp, #12
     118:	0004      	movs	r4, r0
	reg_adress = (reg_adress << 3);
	send_data(reg_adress,ADC_index, 1);
     11a:	0f50      	lsrs	r0, r2, #29
     11c:	00d9      	lsls	r1, r3, #3
     11e:	4301      	orrs	r1, r0
     120:	00d0      	lsls	r0, r2, #3
     122:	2201      	movs	r2, #1
     124:	2300      	movs	r3, #0
     126:	9200      	str	r2, [sp, #0]
     128:	9301      	str	r3, [sp, #4]
     12a:	0022      	movs	r2, r4
     12c:	4d05      	ldr	r5, [pc, #20]	; (144 <set_register_to+0x30>)
     12e:	47a8      	blx	r5
	send_data(value, ADC_index, bytes_in_register);
     130:	9a08      	ldr	r2, [sp, #32]
     132:	9b09      	ldr	r3, [sp, #36]	; 0x24
     134:	9200      	str	r2, [sp, #0]
     136:	9301      	str	r3, [sp, #4]
     138:	0022      	movs	r2, r4
     13a:	9806      	ldr	r0, [sp, #24]
     13c:	9907      	ldr	r1, [sp, #28]
     13e:	47a8      	blx	r5
}
     140:	b003      	add	sp, #12
     142:	bd30      	pop	{r4, r5, pc}
     144:	00000a01 	.word	0x00000a01

00000148 <configure_AD7192>:
#include "SPI_setup.h"


uint64_t ADC_wheight[2] = {1, 1};

void configure_AD7192() {
     148:	b5d0      	push	{r4, r6, r7, lr}
     14a:	b084      	sub	sp, #16

	//Configurate ADC1
	send_data(0xffffffffff, 1, 5);
     14c:	2205      	movs	r2, #5
     14e:	2300      	movs	r3, #0
     150:	9200      	str	r2, [sp, #0]
     152:	9301      	str	r3, [sp, #4]
     154:	3a04      	subs	r2, #4
     156:	2001      	movs	r0, #1
     158:	4240      	negs	r0, r0
     15a:	21ff      	movs	r1, #255	; 0xff
     15c:	4b31      	ldr	r3, [pc, #196]	; (224 <configure_AD7192+0xdc>)
     15e:	4798      	blx	r3
	uint32_t adc_config = ACX_EN | 	AIN1_AIN2/*| AIN3_AIN4*/ | BUF_EN | GAIN_128 | REFDET_EN | CHOP_EN; //configure input
	set_register_to(1, 0b010, adc_config, 3);
     160:	2603      	movs	r6, #3
     162:	2700      	movs	r7, #0
     164:	9602      	str	r6, [sp, #8]
     166:	9703      	str	r7, [sp, #12]
     168:	4a2f      	ldr	r2, [pc, #188]	; (228 <configure_AD7192+0xe0>)
     16a:	2300      	movs	r3, #0
     16c:	9200      	str	r2, [sp, #0]
     16e:	9301      	str	r3, [sp, #4]
     170:	2202      	movs	r2, #2
     172:	2300      	movs	r3, #0
     174:	2001      	movs	r0, #1
     176:	4c2d      	ldr	r4, [pc, #180]	; (22c <configure_AD7192+0xe4>)
     178:	47a0      	blx	r4

	uint32_t adc_mode = MODE_SYSZCL| INCLK_MCLK2TRI; //Zero scale calibration
	set_register_to(1, 0b001, adc_mode, 3);
     17a:	9602      	str	r6, [sp, #8]
     17c:	9703      	str	r7, [sp, #12]
     17e:	22c8      	movs	r2, #200	; 0xc8
     180:	0412      	lsls	r2, r2, #16
     182:	2300      	movs	r3, #0
     184:	9200      	str	r2, [sp, #0]
     186:	9301      	str	r3, [sp, #4]
     188:	2201      	movs	r2, #1
     18a:	2300      	movs	r3, #0
     18c:	2001      	movs	r0, #1
     18e:	47a0      	blx	r4

	while((PORT->Group[0].IN.reg & SPI1_MISO_PIN)) {}
     190:	4927      	ldr	r1, [pc, #156]	; (230 <configure_AD7192+0xe8>)
     192:	2280      	movs	r2, #128	; 0x80
     194:	02d2      	lsls	r2, r2, #11
     196:	6a0b      	ldr	r3, [r1, #32]
     198:	4213      	tst	r3, r2
     19a:	d1fc      	bne.n	196 <configure_AD7192+0x4e>

	adc_mode = MODE_CONT| INCLK_MCLK2TRI | DAT_STA_DIS;
	set_register_to(1, 0b001, adc_mode, 3);
     19c:	2603      	movs	r6, #3
     19e:	2700      	movs	r7, #0
     1a0:	9602      	str	r6, [sp, #8]
     1a2:	9703      	str	r7, [sp, #12]
     1a4:	2280      	movs	r2, #128	; 0x80
     1a6:	0312      	lsls	r2, r2, #12
     1a8:	2300      	movs	r3, #0
     1aa:	9200      	str	r2, [sp, #0]
     1ac:	9301      	str	r3, [sp, #4]
     1ae:	2201      	movs	r2, #1
     1b0:	2300      	movs	r3, #0
     1b2:	2001      	movs	r0, #1
     1b4:	4c1d      	ldr	r4, [pc, #116]	; (22c <configure_AD7192+0xe4>)
     1b6:	47a0      	blx	r4

	//Configurate ADC0
	send_data(0xffffffffff, 0, 5);
     1b8:	2205      	movs	r2, #5
     1ba:	2300      	movs	r3, #0
     1bc:	9200      	str	r2, [sp, #0]
     1be:	9301      	str	r3, [sp, #4]
     1c0:	2200      	movs	r2, #0
     1c2:	2001      	movs	r0, #1
     1c4:	4240      	negs	r0, r0
     1c6:	21ff      	movs	r1, #255	; 0xff
     1c8:	4b16      	ldr	r3, [pc, #88]	; (224 <configure_AD7192+0xdc>)
     1ca:	4798      	blx	r3
	adc_config = ACX_EN | 	AIN1_AIN2 /*| AIN3_AIN4*/ |BUF_EN | GAIN_128 | REFDET_EN | CHOP_EN; //configure input
	set_register_to(0, 0b010, adc_config, 3);
     1cc:	9602      	str	r6, [sp, #8]
     1ce:	9703      	str	r7, [sp, #12]
     1d0:	4a15      	ldr	r2, [pc, #84]	; (228 <configure_AD7192+0xe0>)
     1d2:	2300      	movs	r3, #0
     1d4:	9200      	str	r2, [sp, #0]
     1d6:	9301      	str	r3, [sp, #4]
     1d8:	2202      	movs	r2, #2
     1da:	2300      	movs	r3, #0
     1dc:	2000      	movs	r0, #0
     1de:	47a0      	blx	r4
	
	adc_mode = MODE_SYSZCL| INCLK_MCLK2TRI; //Zero scale calibration
	set_register_to(0, 0b001, adc_mode, 3);
     1e0:	9602      	str	r6, [sp, #8]
     1e2:	9703      	str	r7, [sp, #12]
     1e4:	22c8      	movs	r2, #200	; 0xc8
     1e6:	0412      	lsls	r2, r2, #16
     1e8:	2300      	movs	r3, #0
     1ea:	9200      	str	r2, [sp, #0]
     1ec:	9301      	str	r3, [sp, #4]
     1ee:	2201      	movs	r2, #1
     1f0:	2300      	movs	r3, #0
     1f2:	2000      	movs	r0, #0
     1f4:	47a0      	blx	r4

	while((PORT->Group[0].IN.reg & SPI1_MISO_PIN)) {}
     1f6:	490e      	ldr	r1, [pc, #56]	; (230 <configure_AD7192+0xe8>)
     1f8:	2280      	movs	r2, #128	; 0x80
     1fa:	02d2      	lsls	r2, r2, #11
     1fc:	6a0b      	ldr	r3, [r1, #32]
     1fe:	4213      	tst	r3, r2
     200:	d1fc      	bne.n	1fc <configure_AD7192+0xb4>

	adc_mode = MODE_CONT| INCLK_MCLK2TRI | DAT_STA_DIS; //Set to normal settings
	set_register_to(0, 0b001, adc_mode, 3);
     202:	2203      	movs	r2, #3
     204:	2300      	movs	r3, #0
     206:	9202      	str	r2, [sp, #8]
     208:	9303      	str	r3, [sp, #12]
     20a:	2280      	movs	r2, #128	; 0x80
     20c:	0312      	lsls	r2, r2, #12
     20e:	2300      	movs	r3, #0
     210:	9200      	str	r2, [sp, #0]
     212:	9301      	str	r3, [sp, #4]
     214:	2201      	movs	r2, #1
     216:	2300      	movs	r3, #0
     218:	2000      	movs	r0, #0
     21a:	4904      	ldr	r1, [pc, #16]	; (22c <configure_AD7192+0xe4>)
     21c:	4788      	blx	r1
}
     21e:	b004      	add	sp, #16
     220:	bdd0      	pop	{r4, r6, r7, pc}
     222:	46c0      	nop			; (mov r8, r8)
     224:	00000a01 	.word	0x00000a01
     228:	00c00157 	.word	0x00c00157
     22c:	00000115 	.word	0x00000115
     230:	41004400 	.word	0x41004400

00000234 <get_register_data_at>:
	reg_adress = (reg_adress << 3);
	send_data(reg_adress,ADC_index, 1);
	send_data(value, ADC_index, bytes_in_register);
}

void get_register_data_at(int ADC_index, uint64_t reg_adress, uint64_t * data, uint64_t bytes_in_register){
     234:	b530      	push	{r4, r5, lr}
     236:	b083      	sub	sp, #12
     238:	0005      	movs	r5, r0
     23a:	9c06      	ldr	r4, [sp, #24]
	*data = 0;
     23c:	2000      	movs	r0, #0
     23e:	2100      	movs	r1, #0
     240:	6020      	str	r0, [r4, #0]
     242:	6061      	str	r1, [r4, #4]
	reg_adress = (reg_adress << 3) | (1 << 6);
     244:	0f50      	lsrs	r0, r2, #29
     246:	00d9      	lsls	r1, r3, #3
     248:	4301      	orrs	r1, r0
     24a:	00d2      	lsls	r2, r2, #3
	send_data(reg_adress, ADC_index, 1);
     24c:	2040      	movs	r0, #64	; 0x40
     24e:	4310      	orrs	r0, r2
     250:	2201      	movs	r2, #1
     252:	2300      	movs	r3, #0
     254:	9200      	str	r2, [sp, #0]
     256:	9301      	str	r3, [sp, #4]
     258:	002a      	movs	r2, r5
     25a:	4b05      	ldr	r3, [pc, #20]	; (270 <get_register_data_at+0x3c>)
     25c:	4798      	blx	r3
	read_data(data,ADC_index, bytes_in_register);
     25e:	9a08      	ldr	r2, [sp, #32]
     260:	9b09      	ldr	r3, [sp, #36]	; 0x24
     262:	0029      	movs	r1, r5
     264:	0020      	movs	r0, r4
     266:	4c03      	ldr	r4, [pc, #12]	; (274 <get_register_data_at+0x40>)
     268:	47a0      	blx	r4
}
     26a:	b003      	add	sp, #12
     26c:	bd30      	pop	{r4, r5, pc}
     26e:	46c0      	nop			; (mov r8, r8)
     270:	00000a01 	.word	0x00000a01
     274:	00000b81 	.word	0x00000b81

00000278 <moving_average>:
		weight += (DATA_COLLECTED-i);
		*data += col_data[i]*(DATA_COLLECTED-i);
	}
	*data = (*data)/weight;
}
int64_t moving_average(uint64_t data) {
     278:	b570      	push	{r4, r5, r6, lr}
     27a:	4a0b      	ldr	r2, [pc, #44]	; (2a8 <moving_average+0x30>)
     27c:	0014      	movs	r4, r2
     27e:	3c70      	subs	r4, #112	; 0x70
     280:	0013      	movs	r3, r2
	for (uint16_t i = DATA_COLLECTED-1; i > 0; i--)
	{
		col_data[i] = col_data[i-1];
     282:	6e9d      	ldr	r5, [r3, #104]	; 0x68
     284:	6ede      	ldr	r6, [r3, #108]	; 0x6c
     286:	671d      	str	r5, [r3, #112]	; 0x70
     288:	675e      	str	r6, [r3, #116]	; 0x74
     28a:	3b08      	subs	r3, #8
		*data += col_data[i]*(DATA_COLLECTED-i);
	}
	*data = (*data)/weight;
}
int64_t moving_average(uint64_t data) {
	for (uint16_t i = DATA_COLLECTED-1; i > 0; i--)
     28c:	42a3      	cmp	r3, r4
     28e:	d1f8      	bne.n	282 <moving_average+0xa>
	{
		col_data[i] = col_data[i-1];
	}
	col_data[0] = data;
     290:	4b05      	ldr	r3, [pc, #20]	; (2a8 <moving_average+0x30>)
     292:	6018      	str	r0, [r3, #0]
     294:	6059      	str	r1, [r3, #4]
     296:	3370      	adds	r3, #112	; 0x70
	int64_t weight = 0;
	for (uint16_t i= 1; i < DATA_COLLECTED; i++)
	{
		//weight += (DATA_COLLECTED-i);
		data += col_data[i];
     298:	6894      	ldr	r4, [r2, #8]
     29a:	68d5      	ldr	r5, [r2, #12]
     29c:	1900      	adds	r0, r0, r4
     29e:	4169      	adcs	r1, r5
     2a0:	3208      	adds	r2, #8
	{
		col_data[i] = col_data[i-1];
	}
	col_data[0] = data;
	int64_t weight = 0;
	for (uint16_t i= 1; i < DATA_COLLECTED; i++)
     2a2:	429a      	cmp	r2, r3
     2a4:	d1f8      	bne.n	298 <moving_average+0x20>
	{
		//weight += (DATA_COLLECTED-i);
		data += col_data[i];
	}
	return data;
}
     2a6:	bd70      	pop	{r4, r5, r6, pc}
     2a8:	200000c0 	.word	0x200000c0

000002ac <get_data_from_landingsensor>:
void stop_continous_read() {
	send_data(0x01011000, 1, 1);
	send_data(0x01011000, 0, 1);
}

uint64_t get_data_from_landingsensor(int ADC_index) {
     2ac:	b530      	push	{r4, r5, lr}
     2ae:	b087      	sub	sp, #28
     2b0:	0004      	movs	r4, r0
	uint64_t temp_data = 0;
     2b2:	2200      	movs	r2, #0
     2b4:	2300      	movs	r3, #0
     2b6:	9204      	str	r2, [sp, #16]
     2b8:	9305      	str	r3, [sp, #20]
	get_register_data_at(ADC_index, 3, &temp_data, 3);
     2ba:	2203      	movs	r2, #3
     2bc:	2300      	movs	r3, #0
     2be:	9202      	str	r2, [sp, #8]
     2c0:	9303      	str	r3, [sp, #12]
     2c2:	ab04      	add	r3, sp, #16
     2c4:	9300      	str	r3, [sp, #0]
     2c6:	2203      	movs	r2, #3
     2c8:	2300      	movs	r3, #0
     2ca:	490c      	ldr	r1, [pc, #48]	; (2fc <get_data_from_landingsensor+0x50>)
     2cc:	4788      	blx	r1
	temp_data *= ADC_wheight[ADC_index];
     2ce:	00e3      	lsls	r3, r4, #3
     2d0:	490b      	ldr	r1, [pc, #44]	; (300 <get_data_from_landingsensor+0x54>)
     2d2:	18c9      	adds	r1, r1, r3
     2d4:	9a04      	ldr	r2, [sp, #16]
     2d6:	9b05      	ldr	r3, [sp, #20]
     2d8:	6808      	ldr	r0, [r1, #0]
     2da:	6849      	ldr	r1, [r1, #4]
     2dc:	4d09      	ldr	r5, [pc, #36]	; (304 <get_data_from_landingsensor+0x58>)
     2de:	47a8      	blx	r5
	if(ADC_index) {
     2e0:	2c00      	cmp	r4, #0
     2e2:	d102      	bne.n	2ea <get_data_from_landingsensor+0x3e>
}

uint64_t get_data_from_landingsensor(int ADC_index) {
	uint64_t temp_data = 0;
	get_register_data_at(ADC_index, 3, &temp_data, 3);
	temp_data *= ADC_wheight[ADC_index];
     2e4:	9004      	str	r0, [sp, #16]
     2e6:	9105      	str	r1, [sp, #20]
     2e8:	e004      	b.n	2f4 <get_data_from_landingsensor+0x48>
	if(ADC_index) {
		temp_data *= -1;
     2ea:	2300      	movs	r3, #0
     2ec:	4242      	negs	r2, r0
     2ee:	418b      	sbcs	r3, r1
     2f0:	9204      	str	r2, [sp, #16]
     2f2:	9305      	str	r3, [sp, #20]
	}
	return temp_data;
}
     2f4:	9804      	ldr	r0, [sp, #16]
     2f6:	9905      	ldr	r1, [sp, #20]
     2f8:	b007      	add	sp, #28
     2fa:	bd30      	pop	{r4, r5, pc}
     2fc:	00000235 	.word	0x00000235
     300:	20000000 	.word	0x20000000
     304:	0000260d 	.word	0x0000260d

00000308 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     308:	4770      	bx	lr
     30a:	46c0      	nop			; (mov r8, r8)

0000030c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     30c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     30e:	4b0a      	ldr	r3, [pc, #40]	; (338 <_sercom_set_handler+0x2c>)
     310:	781b      	ldrb	r3, [r3, #0]
     312:	2b00      	cmp	r3, #0
     314:	d10c      	bne.n	330 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     316:	4f09      	ldr	r7, [pc, #36]	; (33c <_sercom_set_handler+0x30>)
     318:	4e09      	ldr	r6, [pc, #36]	; (340 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     31a:	4d0a      	ldr	r5, [pc, #40]	; (344 <_sercom_set_handler+0x38>)
     31c:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     31e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     320:	195a      	adds	r2, r3, r5
     322:	6014      	str	r4, [r2, #0]
     324:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     326:	2b18      	cmp	r3, #24
     328:	d1f9      	bne.n	31e <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     32a:	2201      	movs	r2, #1
     32c:	4b02      	ldr	r3, [pc, #8]	; (338 <_sercom_set_handler+0x2c>)
     32e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     330:	0080      	lsls	r0, r0, #2
     332:	4b02      	ldr	r3, [pc, #8]	; (33c <_sercom_set_handler+0x30>)
     334:	50c1      	str	r1, [r0, r3]
}
     336:	bdf0      	pop	{r4, r5, r6, r7, pc}
     338:	20000034 	.word	0x20000034
     33c:	20000038 	.word	0x20000038
     340:	00000309 	.word	0x00000309
     344:	20000278 	.word	0x20000278

00000348 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     348:	b510      	push	{r4, lr}
     34a:	b082      	sub	sp, #8
     34c:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     34e:	2206      	movs	r2, #6
     350:	4905      	ldr	r1, [pc, #20]	; (368 <_sercom_get_interrupt_vector+0x20>)
     352:	4668      	mov	r0, sp
     354:	4b05      	ldr	r3, [pc, #20]	; (36c <_sercom_get_interrupt_vector+0x24>)
     356:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     358:	0020      	movs	r0, r4
     35a:	4b05      	ldr	r3, [pc, #20]	; (370 <_sercom_get_interrupt_vector+0x28>)
     35c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     35e:	466b      	mov	r3, sp
     360:	5618      	ldrsb	r0, [r3, r0]
}
     362:	b002      	add	sp, #8
     364:	bd10      	pop	{r4, pc}
     366:	46c0      	nop			; (mov r8, r8)
     368:	0000291c 	.word	0x0000291c
     36c:	000028f9 	.word	0x000028f9
     370:	000013d9 	.word	0x000013d9

00000374 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     374:	b510      	push	{r4, lr}
     376:	4b02      	ldr	r3, [pc, #8]	; (380 <SERCOM0_Handler+0xc>)
     378:	681b      	ldr	r3, [r3, #0]
     37a:	2000      	movs	r0, #0
     37c:	4798      	blx	r3
     37e:	bd10      	pop	{r4, pc}
     380:	20000038 	.word	0x20000038

00000384 <SERCOM1_Handler>:
     384:	b510      	push	{r4, lr}
     386:	4b02      	ldr	r3, [pc, #8]	; (390 <SERCOM1_Handler+0xc>)
     388:	685b      	ldr	r3, [r3, #4]
     38a:	2001      	movs	r0, #1
     38c:	4798      	blx	r3
     38e:	bd10      	pop	{r4, pc}
     390:	20000038 	.word	0x20000038

00000394 <SERCOM2_Handler>:
     394:	b510      	push	{r4, lr}
     396:	4b02      	ldr	r3, [pc, #8]	; (3a0 <SERCOM2_Handler+0xc>)
     398:	689b      	ldr	r3, [r3, #8]
     39a:	2002      	movs	r0, #2
     39c:	4798      	blx	r3
     39e:	bd10      	pop	{r4, pc}
     3a0:	20000038 	.word	0x20000038

000003a4 <SERCOM3_Handler>:
     3a4:	b510      	push	{r4, lr}
     3a6:	4b02      	ldr	r3, [pc, #8]	; (3b0 <SERCOM3_Handler+0xc>)
     3a8:	68db      	ldr	r3, [r3, #12]
     3aa:	2003      	movs	r0, #3
     3ac:	4798      	blx	r3
     3ae:	bd10      	pop	{r4, pc}
     3b0:	20000038 	.word	0x20000038

000003b4 <SERCOM4_Handler>:
     3b4:	b510      	push	{r4, lr}
     3b6:	4b02      	ldr	r3, [pc, #8]	; (3c0 <SERCOM4_Handler+0xc>)
     3b8:	691b      	ldr	r3, [r3, #16]
     3ba:	2004      	movs	r0, #4
     3bc:	4798      	blx	r3
     3be:	bd10      	pop	{r4, pc}
     3c0:	20000038 	.word	0x20000038

000003c4 <SERCOM5_Handler>:
     3c4:	b510      	push	{r4, lr}
     3c6:	4b02      	ldr	r3, [pc, #8]	; (3d0 <SERCOM5_Handler+0xc>)
     3c8:	695b      	ldr	r3, [r3, #20]
     3ca:	2005      	movs	r0, #5
     3cc:	4798      	blx	r3
     3ce:	bd10      	pop	{r4, pc}
     3d0:	20000038 	.word	0x20000038

000003d4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     3d6:	0080      	lsls	r0, r0, #2
     3d8:	4b60      	ldr	r3, [pc, #384]	; (55c <_usart_interrupt_handler+0x188>)
     3da:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     3dc:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     3de:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     3e0:	2b00      	cmp	r3, #0
     3e2:	d1fc      	bne.n	3de <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     3e4:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     3e6:	7da6      	ldrb	r6, [r4, #22]
     3e8:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     3ea:	2330      	movs	r3, #48	; 0x30
     3ec:	5ceb      	ldrb	r3, [r5, r3]
     3ee:	2231      	movs	r2, #49	; 0x31
     3f0:	5caf      	ldrb	r7, [r5, r2]
     3f2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     3f4:	07f3      	lsls	r3, r6, #31
     3f6:	d522      	bpl.n	43e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     3f8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     3fa:	b29b      	uxth	r3, r3
     3fc:	2b00      	cmp	r3, #0
     3fe:	d01c      	beq.n	43a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     400:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     402:	7813      	ldrb	r3, [r2, #0]
     404:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     406:	1c51      	adds	r1, r2, #1
     408:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     40a:	7969      	ldrb	r1, [r5, #5]
     40c:	2901      	cmp	r1, #1
     40e:	d001      	beq.n	414 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     410:	b29b      	uxth	r3, r3
     412:	e004      	b.n	41e <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     414:	7851      	ldrb	r1, [r2, #1]
     416:	0209      	lsls	r1, r1, #8
     418:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     41a:	3202      	adds	r2, #2
     41c:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     41e:	05db      	lsls	r3, r3, #23
     420:	0ddb      	lsrs	r3, r3, #23
     422:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     424:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     426:	3b01      	subs	r3, #1
     428:	b29b      	uxth	r3, r3
     42a:	85eb      	strh	r3, [r5, #46]	; 0x2e
     42c:	2b00      	cmp	r3, #0
     42e:	d106      	bne.n	43e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     430:	3301      	adds	r3, #1
     432:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     434:	3301      	adds	r3, #1
     436:	75a3      	strb	r3, [r4, #22]
     438:	e001      	b.n	43e <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     43a:	2301      	movs	r3, #1
     43c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     43e:	07b3      	lsls	r3, r6, #30
     440:	d509      	bpl.n	456 <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     442:	2302      	movs	r3, #2
     444:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     446:	2200      	movs	r2, #0
     448:	3331      	adds	r3, #49	; 0x31
     44a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     44c:	07fb      	lsls	r3, r7, #31
     44e:	d502      	bpl.n	456 <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     450:	0028      	movs	r0, r5
     452:	68eb      	ldr	r3, [r5, #12]
     454:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     456:	0773      	lsls	r3, r6, #29
     458:	d560      	bpl.n	51c <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
     45a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     45c:	b29b      	uxth	r3, r3
     45e:	2b00      	cmp	r3, #0
     460:	d05a      	beq.n	518 <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     462:	8b63      	ldrh	r3, [r4, #26]
     464:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     466:	071a      	lsls	r2, r3, #28
     468:	d402      	bmi.n	470 <_usart_interrupt_handler+0x9c>
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     46a:	223f      	movs	r2, #63	; 0x3f
     46c:	4013      	ands	r3, r2
     46e:	e001      	b.n	474 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
     470:	2237      	movs	r2, #55	; 0x37
     472:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     474:	2b00      	cmp	r3, #0
     476:	d02d      	beq.n	4d4 <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     478:	079a      	lsls	r2, r3, #30
     47a:	d505      	bpl.n	488 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     47c:	221a      	movs	r2, #26
     47e:	2332      	movs	r3, #50	; 0x32
     480:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     482:	3b30      	subs	r3, #48	; 0x30
     484:	8363      	strh	r3, [r4, #26]
     486:	e01f      	b.n	4c8 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     488:	075a      	lsls	r2, r3, #29
     48a:	d505      	bpl.n	498 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     48c:	221e      	movs	r2, #30
     48e:	2332      	movs	r3, #50	; 0x32
     490:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     492:	3b2e      	subs	r3, #46	; 0x2e
     494:	8363      	strh	r3, [r4, #26]
     496:	e017      	b.n	4c8 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     498:	07da      	lsls	r2, r3, #31
     49a:	d505      	bpl.n	4a8 <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     49c:	2213      	movs	r2, #19
     49e:	2332      	movs	r3, #50	; 0x32
     4a0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     4a2:	3b31      	subs	r3, #49	; 0x31
     4a4:	8363      	strh	r3, [r4, #26]
     4a6:	e00f      	b.n	4c8 <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     4a8:	06da      	lsls	r2, r3, #27
     4aa:	d505      	bpl.n	4b8 <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     4ac:	2242      	movs	r2, #66	; 0x42
     4ae:	2332      	movs	r3, #50	; 0x32
     4b0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     4b2:	3b22      	subs	r3, #34	; 0x22
     4b4:	8363      	strh	r3, [r4, #26]
     4b6:	e007      	b.n	4c8 <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     4b8:	2220      	movs	r2, #32
     4ba:	421a      	tst	r2, r3
     4bc:	d004      	beq.n	4c8 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     4be:	3221      	adds	r2, #33	; 0x21
     4c0:	2332      	movs	r3, #50	; 0x32
     4c2:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     4c4:	3b12      	subs	r3, #18
     4c6:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     4c8:	077b      	lsls	r3, r7, #29
     4ca:	d527      	bpl.n	51c <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     4cc:	0028      	movs	r0, r5
     4ce:	696b      	ldr	r3, [r5, #20]
     4d0:	4798      	blx	r3
     4d2:	e023      	b.n	51c <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     4d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     4d6:	05db      	lsls	r3, r3, #23
     4d8:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     4da:	b2da      	uxtb	r2, r3
     4dc:	6a69      	ldr	r1, [r5, #36]	; 0x24
     4de:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     4e0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     4e2:	1c51      	adds	r1, r2, #1
     4e4:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     4e6:	7969      	ldrb	r1, [r5, #5]
     4e8:	2901      	cmp	r1, #1
     4ea:	d104      	bne.n	4f6 <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
     4ec:	0a1b      	lsrs	r3, r3, #8
     4ee:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
     4f0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     4f2:	3301      	adds	r3, #1
     4f4:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     4f6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     4f8:	3b01      	subs	r3, #1
     4fa:	b29b      	uxth	r3, r3
     4fc:	85ab      	strh	r3, [r5, #44]	; 0x2c
     4fe:	2b00      	cmp	r3, #0
     500:	d10c      	bne.n	51c <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     502:	3304      	adds	r3, #4
     504:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     506:	2200      	movs	r2, #0
     508:	332e      	adds	r3, #46	; 0x2e
     50a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     50c:	07bb      	lsls	r3, r7, #30
     50e:	d505      	bpl.n	51c <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     510:	0028      	movs	r0, r5
     512:	692b      	ldr	r3, [r5, #16]
     514:	4798      	blx	r3
     516:	e001      	b.n	51c <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     518:	2304      	movs	r3, #4
     51a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     51c:	06f3      	lsls	r3, r6, #27
     51e:	d507      	bpl.n	530 <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     520:	2310      	movs	r3, #16
     522:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     524:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     526:	06fb      	lsls	r3, r7, #27
     528:	d502      	bpl.n	530 <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     52a:	0028      	movs	r0, r5
     52c:	69eb      	ldr	r3, [r5, #28]
     52e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     530:	06b3      	lsls	r3, r6, #26
     532:	d507      	bpl.n	544 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     534:	2320      	movs	r3, #32
     536:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     538:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     53a:	073b      	lsls	r3, r7, #28
     53c:	d502      	bpl.n	544 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     53e:	0028      	movs	r0, r5
     540:	69ab      	ldr	r3, [r5, #24]
     542:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     544:	0733      	lsls	r3, r6, #28
     546:	d507      	bpl.n	558 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     548:	2308      	movs	r3, #8
     54a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     54c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     54e:	06bb      	lsls	r3, r7, #26
     550:	d502      	bpl.n	558 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     552:	6a2b      	ldr	r3, [r5, #32]
     554:	0028      	movs	r0, r5
     556:	4798      	blx	r3
		}
	}
#endif
}
     558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     55a:	46c0      	nop			; (mov r8, r8)
     55c:	20000278 	.word	0x20000278

00000560 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     560:	1c93      	adds	r3, r2, #2
     562:	009b      	lsls	r3, r3, #2
     564:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     566:	2a02      	cmp	r2, #2
     568:	d104      	bne.n	574 <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     56a:	7e02      	ldrb	r2, [r0, #24]
     56c:	2310      	movs	r3, #16
     56e:	4313      	orrs	r3, r2
     570:	7603      	strb	r3, [r0, #24]
     572:	e00b      	b.n	58c <tc_register_callback+0x2c>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     574:	2a03      	cmp	r2, #3
     576:	d104      	bne.n	582 <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     578:	7e02      	ldrb	r2, [r0, #24]
     57a:	2320      	movs	r3, #32
     57c:	4313      	orrs	r3, r2
     57e:	7603      	strb	r3, [r0, #24]
     580:	e004      	b.n	58c <tc_register_callback+0x2c>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
     582:	2301      	movs	r3, #1
     584:	4093      	lsls	r3, r2
     586:	7e02      	ldrb	r2, [r0, #24]
     588:	4313      	orrs	r3, r2
     58a:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
     58c:	2000      	movs	r0, #0
     58e:	4770      	bx	lr

00000590 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     590:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     592:	0080      	lsls	r0, r0, #2
     594:	4b14      	ldr	r3, [pc, #80]	; (5e8 <_tc_interrupt_handler+0x58>)
     596:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     598:	682b      	ldr	r3, [r5, #0]
     59a:	7b9c      	ldrb	r4, [r3, #14]
     59c:	7e2b      	ldrb	r3, [r5, #24]
     59e:	401c      	ands	r4, r3
     5a0:	7e6b      	ldrb	r3, [r5, #25]
     5a2:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     5a4:	07e3      	lsls	r3, r4, #31
     5a6:	d505      	bpl.n	5b4 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     5a8:	0028      	movs	r0, r5
     5aa:	68ab      	ldr	r3, [r5, #8]
     5ac:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     5ae:	2301      	movs	r3, #1
     5b0:	682a      	ldr	r2, [r5, #0]
     5b2:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     5b4:	07a3      	lsls	r3, r4, #30
     5b6:	d505      	bpl.n	5c4 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     5b8:	0028      	movs	r0, r5
     5ba:	68eb      	ldr	r3, [r5, #12]
     5bc:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     5be:	2302      	movs	r3, #2
     5c0:	682a      	ldr	r2, [r5, #0]
     5c2:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     5c4:	06e3      	lsls	r3, r4, #27
     5c6:	d505      	bpl.n	5d4 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     5c8:	0028      	movs	r0, r5
     5ca:	692b      	ldr	r3, [r5, #16]
     5cc:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     5ce:	2310      	movs	r3, #16
     5d0:	682a      	ldr	r2, [r5, #0]
     5d2:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     5d4:	06a3      	lsls	r3, r4, #26
     5d6:	d505      	bpl.n	5e4 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     5d8:	0028      	movs	r0, r5
     5da:	696b      	ldr	r3, [r5, #20]
     5dc:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     5de:	682b      	ldr	r3, [r5, #0]
     5e0:	2220      	movs	r2, #32
     5e2:	739a      	strb	r2, [r3, #14]
	}
}
     5e4:	bd70      	pop	{r4, r5, r6, pc}
     5e6:	46c0      	nop			; (mov r8, r8)
     5e8:	20000290 	.word	0x20000290

000005ec <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     5ec:	b510      	push	{r4, lr}
     5ee:	2000      	movs	r0, #0
     5f0:	4b01      	ldr	r3, [pc, #4]	; (5f8 <TC3_Handler+0xc>)
     5f2:	4798      	blx	r3
     5f4:	bd10      	pop	{r4, pc}
     5f6:	46c0      	nop			; (mov r8, r8)
     5f8:	00000591 	.word	0x00000591

000005fc <TC4_Handler>:
     5fc:	b510      	push	{r4, lr}
     5fe:	2001      	movs	r0, #1
     600:	4b01      	ldr	r3, [pc, #4]	; (608 <TC4_Handler+0xc>)
     602:	4798      	blx	r3
     604:	bd10      	pop	{r4, pc}
     606:	46c0      	nop			; (mov r8, r8)
     608:	00000591 	.word	0x00000591

0000060c <TC5_Handler>:
     60c:	b510      	push	{r4, lr}
     60e:	2002      	movs	r0, #2
     610:	4b01      	ldr	r3, [pc, #4]	; (618 <TC5_Handler+0xc>)
     612:	4798      	blx	r3
     614:	bd10      	pop	{r4, pc}
     616:	46c0      	nop			; (mov r8, r8)
     618:	00000591 	.word	0x00000591

0000061c <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     61c:	b530      	push	{r4, r5, lr}
     61e:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     620:	aa01      	add	r2, sp, #4
     622:	4b0b      	ldr	r3, [pc, #44]	; (650 <_tc_get_inst_index+0x34>)
     624:	cb32      	ldmia	r3!, {r1, r4, r5}
     626:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     628:	9b01      	ldr	r3, [sp, #4]
     62a:	4298      	cmp	r0, r3
     62c:	d00a      	beq.n	644 <_tc_get_inst_index+0x28>
     62e:	9b02      	ldr	r3, [sp, #8]
     630:	4298      	cmp	r0, r3
     632:	d005      	beq.n	640 <_tc_get_inst_index+0x24>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     634:	2300      	movs	r3, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     636:	9a03      	ldr	r2, [sp, #12]
     638:	4282      	cmp	r2, r0
     63a:	d105      	bne.n	648 <_tc_get_inst_index+0x2c>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     63c:	3302      	adds	r3, #2
     63e:	e002      	b.n	646 <_tc_get_inst_index+0x2a>
     640:	2301      	movs	r3, #1
     642:	e000      	b.n	646 <_tc_get_inst_index+0x2a>
     644:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
			return i;
     646:	b2db      	uxtb	r3, r3
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
     648:	0018      	movs	r0, r3
     64a:	b005      	add	sp, #20
     64c:	bd30      	pop	{r4, r5, pc}
     64e:	46c0      	nop			; (mov r8, r8)
     650:	00002924 	.word	0x00002924

00000654 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     654:	b5f0      	push	{r4, r5, r6, r7, lr}
     656:	464f      	mov	r7, r9
     658:	4646      	mov	r6, r8
     65a:	b4c0      	push	{r6, r7}
     65c:	b087      	sub	sp, #28
     65e:	0004      	movs	r4, r0
     660:	000e      	movs	r6, r1
     662:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     664:	0008      	movs	r0, r1
     666:	4b92      	ldr	r3, [pc, #584]	; (8b0 <tc_init+0x25c>)
     668:	4798      	blx	r3
     66a:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     66c:	4d91      	ldr	r5, [pc, #580]	; (8b4 <tc_init+0x260>)
     66e:	0029      	movs	r1, r5
     670:	310c      	adds	r1, #12
     672:	2203      	movs	r2, #3
     674:	a805      	add	r0, sp, #20
     676:	4f90      	ldr	r7, [pc, #576]	; (8b8 <tc_init+0x264>)
     678:	47b8      	blx	r7
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     67a:	0029      	movs	r1, r5
     67c:	3110      	adds	r1, #16
     67e:	2206      	movs	r2, #6
     680:	a803      	add	r0, sp, #12
     682:	47b8      	blx	r7
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     684:	2300      	movs	r3, #0
     686:	60a3      	str	r3, [r4, #8]
     688:	60e3      	str	r3, [r4, #12]
     68a:	6123      	str	r3, [r4, #16]
     68c:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     68e:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     690:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     692:	464b      	mov	r3, r9
     694:	009a      	lsls	r2, r3, #2
     696:	4b89      	ldr	r3, [pc, #548]	; (8bc <tc_init+0x268>)
     698:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     69a:	6026      	str	r6, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     69c:	4643      	mov	r3, r8
     69e:	789b      	ldrb	r3, [r3, #2]
     6a0:	2b08      	cmp	r3, #8
     6a2:	d104      	bne.n	6ae <tc_init+0x5a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     6a4:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     6a6:	464a      	mov	r2, r9
     6a8:	07d2      	lsls	r2, r2, #31
     6aa:	d400      	bmi.n	6ae <tc_init+0x5a>
     6ac:	e0fb      	b.n	8a6 <tc_init+0x252>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     6ae:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     6b0:	8833      	ldrh	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     6b2:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     6b4:	07db      	lsls	r3, r3, #31
     6b6:	d500      	bpl.n	6ba <tc_init+0x66>
     6b8:	e0f5      	b.n	8a6 <tc_init+0x252>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     6ba:	7bf3      	ldrb	r3, [r6, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
     6bc:	3017      	adds	r0, #23
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     6be:	06db      	lsls	r3, r3, #27
     6c0:	d500      	bpl.n	6c4 <tc_init+0x70>
     6c2:	e0f0      	b.n	8a6 <tc_init+0x252>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     6c4:	8833      	ldrh	r3, [r6, #0]
     6c6:	079b      	lsls	r3, r3, #30
     6c8:	d500      	bpl.n	6cc <tc_init+0x78>
     6ca:	e0ec      	b.n	8a6 <tc_init+0x252>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
     6cc:	4643      	mov	r3, r8
     6ce:	7c1b      	ldrb	r3, [r3, #16]
     6d0:	2b00      	cmp	r3, #0
     6d2:	d00c      	beq.n	6ee <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     6d4:	a902      	add	r1, sp, #8
     6d6:	2301      	movs	r3, #1
     6d8:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     6da:	2200      	movs	r2, #0
     6dc:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     6de:	4642      	mov	r2, r8
     6e0:	7e12      	ldrb	r2, [r2, #24]
     6e2:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     6e4:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     6e6:	4643      	mov	r3, r8
     6e8:	7d18      	ldrb	r0, [r3, #20]
     6ea:	4b75      	ldr	r3, [pc, #468]	; (8c0 <tc_init+0x26c>)
     6ec:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
     6ee:	4643      	mov	r3, r8
     6f0:	7f1b      	ldrb	r3, [r3, #28]
     6f2:	2b00      	cmp	r3, #0
     6f4:	d00d      	beq.n	712 <tc_init+0xbe>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     6f6:	a902      	add	r1, sp, #8
     6f8:	2301      	movs	r3, #1
     6fa:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     6fc:	2200      	movs	r2, #0
     6fe:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     700:	4642      	mov	r2, r8
     702:	6a52      	ldr	r2, [r2, #36]	; 0x24
     704:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     706:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     708:	4643      	mov	r3, r8
     70a:	6a1b      	ldr	r3, [r3, #32]
     70c:	b2d8      	uxtb	r0, r3
     70e:	4b6c      	ldr	r3, [pc, #432]	; (8c0 <tc_init+0x26c>)
     710:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     712:	496c      	ldr	r1, [pc, #432]	; (8c4 <tc_init+0x270>)
     714:	6a0b      	ldr	r3, [r1, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
     716:	464a      	mov	r2, r9
     718:	0052      	lsls	r2, r2, #1
     71a:	a803      	add	r0, sp, #12
     71c:	5a12      	ldrh	r2, [r2, r0]
     71e:	4313      	orrs	r3, r2
     720:	620b      	str	r3, [r1, #32]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     722:	4643      	mov	r3, r8
     724:	789b      	ldrb	r3, [r3, #2]
     726:	2b08      	cmp	r3, #8
     728:	d106      	bne.n	738 <tc_init+0xe4>
     72a:	6a0b      	ldr	r3, [r1, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
     72c:	464a      	mov	r2, r9
     72e:	3201      	adds	r2, #1
     730:	0052      	lsls	r2, r2, #1
     732:	5a12      	ldrh	r2, [r2, r0]
     734:	4313      	orrs	r3, r2
     736:	620b      	str	r3, [r1, #32]
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
     738:	a901      	add	r1, sp, #4
     73a:	4643      	mov	r3, r8
     73c:	781b      	ldrb	r3, [r3, #0]
     73e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     740:	ab05      	add	r3, sp, #20
     742:	464a      	mov	r2, r9
     744:	5c9d      	ldrb	r5, [r3, r2]
     746:	0028      	movs	r0, r5
     748:	4b5f      	ldr	r3, [pc, #380]	; (8c8 <tc_init+0x274>)
     74a:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     74c:	0028      	movs	r0, r5
     74e:	4b5f      	ldr	r3, [pc, #380]	; (8cc <tc_init+0x278>)
     750:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
     752:	4643      	mov	r3, r8
     754:	7898      	ldrb	r0, [r3, #2]
     756:	799b      	ldrb	r3, [r3, #6]
     758:	0002      	movs	r2, r0
     75a:	431a      	orrs	r2, r3
     75c:	4643      	mov	r3, r8
     75e:	8918      	ldrh	r0, [r3, #8]
     760:	889b      	ldrh	r3, [r3, #4]
     762:	4303      	orrs	r3, r0
     764:	431a      	orrs	r2, r3
     766:	0010      	movs	r0, r2
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
     768:	4643      	mov	r3, r8
     76a:	785b      	ldrb	r3, [r3, #1]
     76c:	2b00      	cmp	r3, #0
     76e:	d002      	beq.n	776 <tc_init+0x122>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     770:	2380      	movs	r3, #128	; 0x80
     772:	011b      	lsls	r3, r3, #4
     774:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     776:	6821      	ldr	r1, [r4, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     778:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     77a:	7bcb      	ldrb	r3, [r1, #15]
     77c:	4393      	bics	r3, r2
     77e:	d1fc      	bne.n	77a <tc_init+0x126>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     780:	8030      	strh	r0, [r6, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
     782:	4643      	mov	r3, r8
     784:	7b58      	ldrb	r0, [r3, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     786:	1e43      	subs	r3, r0, #1
     788:	4198      	sbcs	r0, r3
     78a:	0080      	lsls	r0, r0, #2
	}

	if (config->count_direction) {
     78c:	4643      	mov	r3, r8
     78e:	7b9b      	ldrb	r3, [r3, #14]
     790:	2b00      	cmp	r3, #0
     792:	d001      	beq.n	798 <tc_init+0x144>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     794:	2301      	movs	r3, #1
     796:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     798:	6821      	ldr	r1, [r4, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
     79a:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     79c:	7bcb      	ldrb	r3, [r1, #15]
     79e:	4393      	bics	r3, r2
     7a0:	d1fc      	bne.n	79c <tc_init+0x148>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     7a2:	33ff      	adds	r3, #255	; 0xff
     7a4:	7133      	strb	r3, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
     7a6:	2800      	cmp	r0, #0
     7a8:	d005      	beq.n	7b6 <tc_init+0x162>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     7aa:	6821      	ldr	r1, [r4, #0]
		while (tc_is_syncing(module_inst)) {
     7ac:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     7ae:	7bcb      	ldrb	r3, [r1, #15]
     7b0:	4393      	bics	r3, r2
     7b2:	d1fc      	bne.n	7ae <tc_init+0x15a>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     7b4:	7170      	strb	r0, [r6, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
     7b6:	4643      	mov	r3, r8
     7b8:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
     7ba:	7adb      	ldrb	r3, [r3, #11]
     7bc:	2b00      	cmp	r3, #0
     7be:	d001      	beq.n	7c4 <tc_init+0x170>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     7c0:	2310      	movs	r3, #16
     7c2:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
     7c4:	4643      	mov	r3, r8
     7c6:	7b1b      	ldrb	r3, [r3, #12]
     7c8:	2b00      	cmp	r3, #0
     7ca:	d001      	beq.n	7d0 <tc_init+0x17c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     7cc:	2320      	movs	r3, #32
     7ce:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     7d0:	6821      	ldr	r1, [r4, #0]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     7d2:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     7d4:	7bcb      	ldrb	r3, [r1, #15]
     7d6:	4393      	bics	r3, r2
     7d8:	d1fc      	bne.n	7d4 <tc_init+0x180>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     7da:	71b0      	strb	r0, [r6, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     7dc:	6822      	ldr	r2, [r4, #0]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     7de:	217f      	movs	r1, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     7e0:	7bd3      	ldrb	r3, [r2, #15]
     7e2:	438b      	bics	r3, r1
     7e4:	d1fc      	bne.n	7e0 <tc_init+0x18c>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
     7e6:	7923      	ldrb	r3, [r4, #4]
     7e8:	2b04      	cmp	r3, #4
     7ea:	d005      	beq.n	7f8 <tc_init+0x1a4>
     7ec:	2b08      	cmp	r3, #8
     7ee:	d041      	beq.n	874 <tc_init+0x220>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
     7f0:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
     7f2:	2b00      	cmp	r3, #0
     7f4:	d157      	bne.n	8a6 <tc_init+0x252>
     7f6:	e024      	b.n	842 <tc_init+0x1ee>
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
     7f8:	217f      	movs	r1, #127	; 0x7f
     7fa:	7bd3      	ldrb	r3, [r2, #15]
     7fc:	438b      	bics	r3, r1
     7fe:	d1fc      	bne.n	7fa <tc_init+0x1a6>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
     800:	3328      	adds	r3, #40	; 0x28
     802:	4642      	mov	r2, r8
     804:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
     806:	7433      	strb	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     808:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
     80a:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     80c:	7bcb      	ldrb	r3, [r1, #15]
     80e:	4393      	bics	r3, r2
     810:	d1fc      	bne.n	80c <tc_init+0x1b8>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
     812:	3329      	adds	r3, #41	; 0x29
     814:	4642      	mov	r2, r8
     816:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
     818:	7533      	strb	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     81a:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
     81c:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     81e:	7bcb      	ldrb	r3, [r1, #15]
     820:	4393      	bics	r3, r2
     822:	d1fc      	bne.n	81e <tc_init+0x1ca>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
     824:	332a      	adds	r3, #42	; 0x2a
     826:	4642      	mov	r2, r8
     828:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
     82a:	7633      	strb	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     82c:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     82e:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     830:	7bcb      	ldrb	r3, [r1, #15]
     832:	4393      	bics	r3, r2
     834:	d1fc      	bne.n	830 <tc_init+0x1dc>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
     836:	332b      	adds	r3, #43	; 0x2b
     838:	4642      	mov	r2, r8
     83a:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
     83c:	7673      	strb	r3, [r6, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
     83e:	2000      	movs	r0, #0
     840:	e031      	b.n	8a6 <tc_init+0x252>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
     842:	217f      	movs	r1, #127	; 0x7f
     844:	7bd3      	ldrb	r3, [r2, #15]
     846:	438b      	bics	r3, r1
     848:	d1fc      	bne.n	844 <tc_init+0x1f0>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
     84a:	4643      	mov	r3, r8
     84c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
     84e:	8233      	strh	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     850:	6821      	ldr	r1, [r4, #0]

			while (tc_is_syncing(module_inst)) {
     852:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     854:	7bcb      	ldrb	r3, [r1, #15]
     856:	4393      	bics	r3, r2
     858:	d1fc      	bne.n	854 <tc_init+0x200>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
     85a:	4643      	mov	r3, r8
     85c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
     85e:	8333      	strh	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     860:	6821      	ldr	r1, [r4, #0]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     862:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     864:	7bcb      	ldrb	r3, [r1, #15]
     866:	4393      	bics	r3, r2
     868:	d1fc      	bne.n	864 <tc_init+0x210>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
     86a:	4643      	mov	r3, r8
     86c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
     86e:	8373      	strh	r3, [r6, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
     870:	2000      	movs	r0, #0
     872:	e018      	b.n	8a6 <tc_init+0x252>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
     874:	217f      	movs	r1, #127	; 0x7f
     876:	7bd3      	ldrb	r3, [r2, #15]
     878:	438b      	bics	r3, r1
     87a:	d1fc      	bne.n	876 <tc_init+0x222>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
     87c:	4643      	mov	r3, r8
     87e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     880:	6133      	str	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     882:	6821      	ldr	r1, [r4, #0]

			while (tc_is_syncing(module_inst)) {
     884:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     886:	7bcb      	ldrb	r3, [r1, #15]
     888:	4393      	bics	r3, r2
     88a:	d1fc      	bne.n	886 <tc_init+0x232>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
     88c:	4643      	mov	r3, r8
     88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     890:	61b3      	str	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     892:	6821      	ldr	r1, [r4, #0]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     894:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     896:	7bcb      	ldrb	r3, [r1, #15]
     898:	4393      	bics	r3, r2
     89a:	d1fc      	bne.n	896 <tc_init+0x242>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
     89c:	4643      	mov	r3, r8
     89e:	6b1b      	ldr	r3, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
     8a0:	61f3      	str	r3, [r6, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
     8a2:	2000      	movs	r0, #0
     8a4:	e7ff      	b.n	8a6 <tc_init+0x252>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     8a6:	b007      	add	sp, #28
     8a8:	bc0c      	pop	{r2, r3}
     8aa:	4690      	mov	r8, r2
     8ac:	4699      	mov	r9, r3
     8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8b0:	0000061d 	.word	0x0000061d
     8b4:	00002924 	.word	0x00002924
     8b8:	000028f9 	.word	0x000028f9
     8bc:	20000290 	.word	0x20000290
     8c0:	000021a5 	.word	0x000021a5
     8c4:	40000400 	.word	0x40000400
     8c8:	000020ad 	.word	0x000020ad
     8cc:	00002021 	.word	0x00002021

000008d0 <configure_spi_master>:
#include "SPI_setup.h"

void configure_spi_master(void)
{
     8d0:	b510      	push	{r4, lr}
     8d2:	b08e      	sub	sp, #56	; 0x38
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     8d4:	2401      	movs	r4, #1
     8d6:	466b      	mov	r3, sp
     8d8:	701c      	strb	r4, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     8da:	2300      	movs	r3, #0
     8dc:	9301      	str	r3, [sp, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     8de:	466a      	mov	r2, sp
     8e0:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
     8e2:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
     8e4:	7494      	strb	r4, [r2, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     8e6:	74d4      	strb	r4, [r2, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     8e8:	7513      	strb	r3, [r2, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     8ea:	220c      	movs	r2, #12
     8ec:	2100      	movs	r1, #0
     8ee:	a806      	add	r0, sp, #24
     8f0:	4b33      	ldr	r3, [pc, #204]	; (9c0 <configure_spi_master+0xf0>)
     8f2:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
     8f4:	4b33      	ldr	r3, [pc, #204]	; (9c4 <configure_spi_master+0xf4>)
     8f6:	9306      	str	r3, [sp, #24]
	struct spi_config config_spi_master;

	spi_get_config_defaults(&config_spi_master);
	config_spi_master.mux_setting = SPI1_MUX_SETTING;
     8f8:	2380      	movs	r3, #128	; 0x80
     8fa:	039b      	lsls	r3, r3, #14
     8fc:	9303      	str	r3, [sp, #12]
	config_spi_master.pinmux_pad0 = SPI1_PINMUX_PAD0;
     8fe:	4b32      	ldr	r3, [pc, #200]	; (9c8 <configure_spi_master+0xf8>)
     900:	930a      	str	r3, [sp, #40]	; 0x28
	config_spi_master.pinmux_pad1 = SPI1_PINMUX_PAD1;
     902:	4b32      	ldr	r3, [pc, #200]	; (9cc <configure_spi_master+0xfc>)
     904:	930b      	str	r3, [sp, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SPI1_PINMUX_PAD2;
     906:	4b32      	ldr	r3, [pc, #200]	; (9d0 <configure_spi_master+0x100>)
     908:	930c      	str	r3, [sp, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_UNUSED;
     90a:	2301      	movs	r3, #1
     90c:	425b      	negs	r3, r3
     90e:	930d      	str	r3, [sp, #52]	; 0x34
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_3;
     910:	23c0      	movs	r3, #192	; 0xc0
     912:	059b      	lsls	r3, r3, #22
     914:	9302      	str	r3, [sp, #8]
	config_spi_master.generator_source = GCLK_GENERATOR_1;
     916:	2324      	movs	r3, #36	; 0x24
     918:	466a      	mov	r2, sp
     91a:	54d4      	strb	r4, [r2, r3]
	config_spi_master.data_order = SPI_DATA_ORDER_MSB;
	spi_init(&spi1_master_instance, SPI1_MODULE, &config_spi_master);
     91c:	4c2d      	ldr	r4, [pc, #180]	; (9d4 <configure_spi_master+0x104>)
     91e:	492e      	ldr	r1, [pc, #184]	; (9d8 <configure_spi_master+0x108>)
     920:	0020      	movs	r0, r4
     922:	4b2e      	ldr	r3, [pc, #184]	; (9dc <configure_spi_master+0x10c>)
     924:	4798      	blx	r3
	spi_set_baudrate(&spi1_master_instance, SPI_BAUDRATE);
     926:	492e      	ldr	r1, [pc, #184]	; (9e0 <configure_spi_master+0x110>)
     928:	0020      	movs	r0, r4
     92a:	4b2e      	ldr	r3, [pc, #184]	; (9e4 <configure_spi_master+0x114>)
     92c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     92e:	6822      	ldr	r2, [r4, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     930:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     932:	2b00      	cmp	r3, #0
     934:	d1fc      	bne.n	930 <configure_spi_master+0x60>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     936:	6811      	ldr	r1, [r2, #0]
     938:	3302      	adds	r3, #2
     93a:	430b      	orrs	r3, r1
     93c:	6013      	str	r3, [r2, #0]
	//SERCOM1->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;

	spi_enable(&spi1_master_instance);

	PORT->Group[0].DIRSET.reg = SLAVE1_SELECT_PIN;
     93e:	4b2a      	ldr	r3, [pc, #168]	; (9e8 <configure_spi_master+0x118>)
     940:	2280      	movs	r2, #128	; 0x80
     942:	0312      	lsls	r2, r2, #12
     944:	609a      	str	r2, [r3, #8]
	PORT->Group[0].OUTSET.reg = SLAVE1_SELECT_PIN;
     946:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     948:	2401      	movs	r4, #1
     94a:	466b      	mov	r3, sp
     94c:	701c      	strb	r4, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     94e:	2300      	movs	r3, #0
     950:	9301      	str	r3, [sp, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     952:	466a      	mov	r2, sp
     954:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
     956:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
     958:	7494      	strb	r4, [r2, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     95a:	74d4      	strb	r4, [r2, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     95c:	7513      	strb	r3, [r2, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     95e:	220c      	movs	r2, #12
     960:	2100      	movs	r1, #0
     962:	a806      	add	r0, sp, #24
     964:	4b16      	ldr	r3, [pc, #88]	; (9c0 <configure_spi_master+0xf0>)
     966:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
     968:	4b16      	ldr	r3, [pc, #88]	; (9c4 <configure_spi_master+0xf4>)
     96a:	9306      	str	r3, [sp, #24]


	spi_get_config_defaults(&config_spi_master);
	config_spi_master.mux_setting = SPI0_MUX_SETTING;
     96c:	2380      	movs	r3, #128	; 0x80
     96e:	039b      	lsls	r3, r3, #14
     970:	9303      	str	r3, [sp, #12]
	config_spi_master.pinmux_pad0 = SPI0_PINMUX_PAD0;
     972:	4b1e      	ldr	r3, [pc, #120]	; (9ec <configure_spi_master+0x11c>)
     974:	930a      	str	r3, [sp, #40]	; 0x28
	config_spi_master.pinmux_pad1 = SPI0_PINMUX_PAD1;
     976:	4b1e      	ldr	r3, [pc, #120]	; (9f0 <configure_spi_master+0x120>)
     978:	930b      	str	r3, [sp, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SPI0_PINMUX_PAD2;
     97a:	4b1e      	ldr	r3, [pc, #120]	; (9f4 <configure_spi_master+0x124>)
     97c:	930c      	str	r3, [sp, #48]	; 0x30
	config_spi_master.pinmux_pad3 = PINMUX_UNUSED;
     97e:	2301      	movs	r3, #1
     980:	425b      	negs	r3, r3
     982:	930d      	str	r3, [sp, #52]	; 0x34
	config_spi_master.transfer_mode = SPI_TRANSFER_MODE_3;
     984:	23c0      	movs	r3, #192	; 0xc0
     986:	059b      	lsls	r3, r3, #22
     988:	9302      	str	r3, [sp, #8]
	config_spi_master.generator_source = GCLK_GENERATOR_1;
     98a:	2324      	movs	r3, #36	; 0x24
     98c:	466a      	mov	r2, sp
     98e:	54d4      	strb	r4, [r2, r3]
	config_spi_master.data_order = SPI_DATA_ORDER_MSB;
	spi_init(&spi0_master_instance, SPI0_MODULE, &config_spi_master);
     990:	4c19      	ldr	r4, [pc, #100]	; (9f8 <configure_spi_master+0x128>)
     992:	491a      	ldr	r1, [pc, #104]	; (9fc <configure_spi_master+0x12c>)
     994:	0020      	movs	r0, r4
     996:	4b11      	ldr	r3, [pc, #68]	; (9dc <configure_spi_master+0x10c>)
     998:	4798      	blx	r3
	spi_set_baudrate(&spi0_master_instance, SPI_BAUDRATE);
     99a:	4911      	ldr	r1, [pc, #68]	; (9e0 <configure_spi_master+0x110>)
     99c:	0020      	movs	r0, r4
     99e:	4b11      	ldr	r3, [pc, #68]	; (9e4 <configure_spi_master+0x114>)
     9a0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     9a2:	6822      	ldr	r2, [r4, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     9a4:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     9a6:	2b00      	cmp	r3, #0
     9a8:	d1fc      	bne.n	9a4 <configure_spi_master+0xd4>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     9aa:	6811      	ldr	r1, [r2, #0]
     9ac:	3302      	adds	r3, #2
     9ae:	430b      	orrs	r3, r1
     9b0:	6013      	str	r3, [r2, #0]
	//SERCOM0->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;

	spi_enable(&spi0_master_instance);

	PORT->Group[0].DIRSET.reg = SLAVE0_SELECT_PIN;
     9b2:	4b0d      	ldr	r3, [pc, #52]	; (9e8 <configure_spi_master+0x118>)
     9b4:	2280      	movs	r2, #128	; 0x80
     9b6:	0112      	lsls	r2, r2, #4
     9b8:	609a      	str	r2, [r3, #8]
	PORT->Group[0].OUTSET.reg = SLAVE0_SELECT_PIN;
     9ba:	619a      	str	r2, [r3, #24]

	//NVIC_EnableIRQ(SERCOM0_IRQn);
	//NVIC_EnableIRQ(SERCOM1_IRQn);
}
     9bc:	b00e      	add	sp, #56	; 0x38
     9be:	bd10      	pop	{r4, pc}
     9c0:	0000290b 	.word	0x0000290b
     9c4:	000186a0 	.word	0x000186a0
     9c8:	00100002 	.word	0x00100002
     9cc:	00110002 	.word	0x00110002
     9d0:	00120002 	.word	0x00120002
     9d4:	20000138 	.word	0x20000138
     9d8:	42000c00 	.word	0x42000c00
     9dc:	00001499 	.word	0x00001499
     9e0:	000493e0 	.word	0x000493e0
     9e4:	00001415 	.word	0x00001415
     9e8:	41004400 	.word	0x41004400
     9ec:	00080002 	.word	0x00080002
     9f0:	00090002 	.word	0x00090002
     9f4:	000a0002 	.word	0x000a0002
     9f8:	200001f4 	.word	0x200001f4
     9fc:	42000800 	.word	0x42000800

00000a00 <send_data>:

void send_data(int64_t data, int ADC_index, uint64_t bytes){
     a00:	b5f0      	push	{r4, r5, r6, r7, lr}
     a02:	465f      	mov	r7, fp
     a04:	4656      	mov	r6, sl
     a06:	464d      	mov	r5, r9
     a08:	4644      	mov	r4, r8
     a0a:	b4f0      	push	{r4, r5, r6, r7}
     a0c:	b083      	sub	sp, #12
     a0e:	9001      	str	r0, [sp, #4]
     a10:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	if(ADC_index) {
     a12:	2a00      	cmp	r2, #0
     a14:	d053      	beq.n	abe <send_data+0xbe>
		PORT->Group[0].OUTCLR.reg = SLAVE1_SELECT_PIN;
     a16:	2280      	movs	r2, #128	; 0x80
     a18:	0312      	lsls	r2, r2, #12
     a1a:	4b56      	ldr	r3, [pc, #344]	; (b74 <send_data+0x174>)
     a1c:	615a      	str	r2, [r3, #20]
		//SERCOM1->SPI.INTENCLR.reg = SERCOM_SPI_INTENCLR_TXC;
		for(int i = bytes; i > 0; i--) {
     a1e:	1e37      	subs	r7, r6, #0
     a20:	dd42      	ble.n	aa8 <send_data+0xa8>
     a22:	3e01      	subs	r6, #1
     a24:	00f6      	lsls	r6, r6, #3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a26:	4b54      	ldr	r3, [pc, #336]	; (b78 <send_data+0x178>)
     a28:	469c      	mov	ip, r3
			while(spi_is_ready_to_write(&spi1_master_instance) != true) {}
     a2a:	2501      	movs	r5, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     a2c:	2320      	movs	r3, #32
     a2e:	469a      	mov	sl, r3
			spi_write(&spi1_master_instance, data>>(i-1)*8);
			while (spi_is_ready_to_read(&spi1_master_instance) != true) {}
     a30:	2404      	movs	r4, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     a32:	46e0      	mov	r8, ip
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     a34:	2300      	movs	r3, #0
     a36:	4699      	mov	r9, r3
     a38:	e033      	b.n	aa2 <send_data+0xa2>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     a3a:	7e1a      	ldrb	r2, [r3, #24]
void send_data(int64_t data, int ADC_index, uint64_t bytes){
	if(ADC_index) {
		PORT->Group[0].OUTCLR.reg = SLAVE1_SELECT_PIN;
		//SERCOM1->SPI.INTENCLR.reg = SERCOM_SPI_INTENCLR_TXC;
		for(int i = bytes; i > 0; i--) {
			while(spi_is_ready_to_write(&spi1_master_instance) != true) {}
     a3c:	422a      	tst	r2, r5
     a3e:	d0fc      	beq.n	a3a <send_data+0x3a>
			spi_write(&spi1_master_instance, data>>(i-1)*8);
     a40:	3f01      	subs	r7, #1
     a42:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     a44:	422a      	tst	r2, r5
     a46:	d011      	beq.n	a6c <send_data+0x6c>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     a48:	2220      	movs	r2, #32
     a4a:	4252      	negs	r2, r2
     a4c:	18b2      	adds	r2, r6, r2
     a4e:	d403      	bmi.n	a58 <send_data+0x58>
     a50:	0008      	movs	r0, r1
     a52:	4110      	asrs	r0, r2
     a54:	0002      	movs	r2, r0
     a56:	e006      	b.n	a66 <send_data+0x66>
     a58:	4652      	mov	r2, sl
     a5a:	1b92      	subs	r2, r2, r6
     a5c:	0008      	movs	r0, r1
     a5e:	4090      	lsls	r0, r2
     a60:	9a01      	ldr	r2, [sp, #4]
     a62:	40f2      	lsrs	r2, r6
     a64:	4302      	orrs	r2, r0
     a66:	05d2      	lsls	r2, r2, #23
     a68:	0dd2      	lsrs	r2, r2, #23
     a6a:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     a6c:	7e1a      	ldrb	r2, [r3, #24]
			while (spi_is_ready_to_read(&spi1_master_instance) != true) {}
     a6e:	4222      	tst	r2, r4
     a70:	d0fc      	beq.n	a6c <send_data+0x6c>
     a72:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     a74:	4222      	tst	r2, r4
     a76:	d011      	beq.n	a9c <send_data+0x9c>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     a78:	8b5a      	ldrh	r2, [r3, #26]
     a7a:	4222      	tst	r2, r4
     a7c:	d000      	beq.n	a80 <send_data+0x80>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     a7e:	835c      	strh	r4, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     a80:	4642      	mov	r2, r8
     a82:	7992      	ldrb	r2, [r2, #6]
     a84:	2a01      	cmp	r2, #1
     a86:	d105      	bne.n	a94 <send_data+0x94>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     a8a:	05db      	lsls	r3, r3, #23
     a8c:	0ddb      	lsrs	r3, r3, #23
     a8e:	464a      	mov	r2, r9
     a90:	8013      	strh	r3, [r2, #0]
     a92:	e003      	b.n	a9c <send_data+0x9c>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     a96:	b2db      	uxtb	r3, r3
     a98:	464a      	mov	r2, r9
     a9a:	8013      	strh	r3, [r2, #0]
     a9c:	3e08      	subs	r6, #8

void send_data(int64_t data, int ADC_index, uint64_t bytes){
	if(ADC_index) {
		PORT->Group[0].OUTCLR.reg = SLAVE1_SELECT_PIN;
		//SERCOM1->SPI.INTENCLR.reg = SERCOM_SPI_INTENCLR_TXC;
		for(int i = bytes; i > 0; i--) {
     a9e:	2f00      	cmp	r7, #0
     aa0:	d002      	beq.n	aa8 <send_data+0xa8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     aa2:	4663      	mov	r3, ip
     aa4:	681b      	ldr	r3, [r3, #0]
     aa6:	e7c8      	b.n	a3a <send_data+0x3a>
     aa8:	4b33      	ldr	r3, [pc, #204]	; (b78 <send_data+0x178>)
     aaa:	6819      	ldr	r1, [r3, #0]
			while(spi_is_ready_to_write(&spi1_master_instance) != true) {}
			spi_write(&spi1_master_instance, data>>(i-1)*8);
			while (spi_is_ready_to_read(&spi1_master_instance) != true) {}
			spi_read(&spi1_master_instance, NULL);
		}
		while(spi_is_ready_to_write(&spi1_master_instance) != true) {}
     aac:	2201      	movs	r2, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     aae:	7e0b      	ldrb	r3, [r1, #24]
     ab0:	4213      	tst	r3, r2
     ab2:	d0fc      	beq.n	aae <send_data+0xae>
		PORT->Group[0].OUTSET.reg = SLAVE1_SELECT_PIN;
     ab4:	2280      	movs	r2, #128	; 0x80
     ab6:	0312      	lsls	r2, r2, #12
     ab8:	4b2e      	ldr	r3, [pc, #184]	; (b74 <send_data+0x174>)
     aba:	619a      	str	r2, [r3, #24]
     abc:	e052      	b.n	b64 <send_data+0x164>
		//SERCOM1->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;

	}
	else {
		PORT->Group[0].OUTCLR.reg = SLAVE0_SELECT_PIN;
     abe:	2280      	movs	r2, #128	; 0x80
     ac0:	0112      	lsls	r2, r2, #4
     ac2:	4b2c      	ldr	r3, [pc, #176]	; (b74 <send_data+0x174>)
     ac4:	615a      	str	r2, [r3, #20]
		//SERCOM0->SPI.INTENCLR.reg = SERCOM_SPI_INTENCLR_TXC;
		for(int i = bytes; i > 0; i--) {
     ac6:	1e37      	subs	r7, r6, #0
     ac8:	dd42      	ble.n	b50 <send_data+0x150>
     aca:	3e01      	subs	r6, #1
     acc:	00f6      	lsls	r6, r6, #3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     ace:	4b2b      	ldr	r3, [pc, #172]	; (b7c <send_data+0x17c>)
     ad0:	469c      	mov	ip, r3
			while(spi_is_ready_to_write(&spi0_master_instance) != true) {}
     ad2:	2501      	movs	r5, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     ad4:	2320      	movs	r3, #32
     ad6:	469a      	mov	sl, r3
			spi_write(&spi0_master_instance, data>>(i-1)*8);
			while (spi_is_ready_to_read(&spi0_master_instance) != true) {}
     ad8:	2404      	movs	r4, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     ada:	46e0      	mov	r8, ip
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     adc:	2300      	movs	r3, #0
     ade:	4699      	mov	r9, r3
     ae0:	e033      	b.n	b4a <send_data+0x14a>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     ae2:	7e1a      	ldrb	r2, [r3, #24]
	}
	else {
		PORT->Group[0].OUTCLR.reg = SLAVE0_SELECT_PIN;
		//SERCOM0->SPI.INTENCLR.reg = SERCOM_SPI_INTENCLR_TXC;
		for(int i = bytes; i > 0; i--) {
			while(spi_is_ready_to_write(&spi0_master_instance) != true) {}
     ae4:	422a      	tst	r2, r5
     ae6:	d0fc      	beq.n	ae2 <send_data+0xe2>
			spi_write(&spi0_master_instance, data>>(i-1)*8);
     ae8:	3f01      	subs	r7, #1
     aea:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     aec:	422a      	tst	r2, r5
     aee:	d011      	beq.n	b14 <send_data+0x114>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     af0:	2220      	movs	r2, #32
     af2:	4252      	negs	r2, r2
     af4:	18b2      	adds	r2, r6, r2
     af6:	d403      	bmi.n	b00 <send_data+0x100>
     af8:	0008      	movs	r0, r1
     afa:	4110      	asrs	r0, r2
     afc:	0002      	movs	r2, r0
     afe:	e006      	b.n	b0e <send_data+0x10e>
     b00:	4652      	mov	r2, sl
     b02:	1b92      	subs	r2, r2, r6
     b04:	0008      	movs	r0, r1
     b06:	4090      	lsls	r0, r2
     b08:	9a01      	ldr	r2, [sp, #4]
     b0a:	40f2      	lsrs	r2, r6
     b0c:	4302      	orrs	r2, r0
     b0e:	05d2      	lsls	r2, r2, #23
     b10:	0dd2      	lsrs	r2, r2, #23
     b12:	629a      	str	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     b14:	7e1a      	ldrb	r2, [r3, #24]
			while (spi_is_ready_to_read(&spi0_master_instance) != true) {}
     b16:	4222      	tst	r2, r4
     b18:	d0fc      	beq.n	b14 <send_data+0x114>
     b1a:	7e1a      	ldrb	r2, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     b1c:	4222      	tst	r2, r4
     b1e:	d011      	beq.n	b44 <send_data+0x144>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     b20:	8b5a      	ldrh	r2, [r3, #26]
     b22:	4222      	tst	r2, r4
     b24:	d000      	beq.n	b28 <send_data+0x128>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     b26:	835c      	strh	r4, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     b28:	4642      	mov	r2, r8
     b2a:	7992      	ldrb	r2, [r2, #6]
     b2c:	2a01      	cmp	r2, #1
     b2e:	d105      	bne.n	b3c <send_data+0x13c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     b32:	05db      	lsls	r3, r3, #23
     b34:	0ddb      	lsrs	r3, r3, #23
     b36:	464a      	mov	r2, r9
     b38:	8013      	strh	r3, [r2, #0]
     b3a:	e003      	b.n	b44 <send_data+0x144>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     b3e:	b2db      	uxtb	r3, r3
     b40:	464a      	mov	r2, r9
     b42:	8013      	strh	r3, [r2, #0]
     b44:	3e08      	subs	r6, #8

	}
	else {
		PORT->Group[0].OUTCLR.reg = SLAVE0_SELECT_PIN;
		//SERCOM0->SPI.INTENCLR.reg = SERCOM_SPI_INTENCLR_TXC;
		for(int i = bytes; i > 0; i--) {
     b46:	2f00      	cmp	r7, #0
     b48:	d002      	beq.n	b50 <send_data+0x150>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     b4a:	4663      	mov	r3, ip
     b4c:	681b      	ldr	r3, [r3, #0]
     b4e:	e7c8      	b.n	ae2 <send_data+0xe2>
     b50:	4b0a      	ldr	r3, [pc, #40]	; (b7c <send_data+0x17c>)
     b52:	6819      	ldr	r1, [r3, #0]
			while(spi_is_ready_to_write(&spi0_master_instance) != true) {}
			spi_write(&spi0_master_instance, data>>(i-1)*8);
			while (spi_is_ready_to_read(&spi0_master_instance) != true) {}
			spi_read(&spi0_master_instance, NULL);
		}
		while(spi_is_ready_to_write(&spi0_master_instance) != true) {}
     b54:	2201      	movs	r2, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     b56:	7e0b      	ldrb	r3, [r1, #24]
     b58:	4213      	tst	r3, r2
     b5a:	d0fc      	beq.n	b56 <send_data+0x156>
		PORT->Group[0].OUTSET.reg = SLAVE0_SELECT_PIN;
     b5c:	2280      	movs	r2, #128	; 0x80
     b5e:	0112      	lsls	r2, r2, #4
     b60:	4b04      	ldr	r3, [pc, #16]	; (b74 <send_data+0x174>)
     b62:	619a      	str	r2, [r3, #24]
		//SERCOM0->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	}
}
     b64:	b003      	add	sp, #12
     b66:	bc3c      	pop	{r2, r3, r4, r5}
     b68:	4690      	mov	r8, r2
     b6a:	4699      	mov	r9, r3
     b6c:	46a2      	mov	sl, r4
     b6e:	46ab      	mov	fp, r5
     b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b72:	46c0      	nop			; (mov r8, r8)
     b74:	41004400 	.word	0x41004400
     b78:	20000138 	.word	0x20000138
     b7c:	200001f4 	.word	0x200001f4

00000b80 <read_data>:

void read_data(int64_t * data, int ADC_index, uint64_t bytes){
     b80:	b5f0      	push	{r4, r5, r6, r7, lr}
     b82:	465f      	mov	r7, fp
     b84:	4656      	mov	r6, sl
     b86:	464d      	mov	r5, r9
     b88:	4644      	mov	r4, r8
     b8a:	b4f0      	push	{r4, r5, r6, r7}
     b8c:	b085      	sub	sp, #20
     b8e:	0006      	movs	r6, r0
	uint64_t i;
	uint64_t shiftedData;
	if(ADC_index) {
     b90:	2900      	cmp	r1, #0
     b92:	d070      	beq.n	c76 <read_data+0xf6>
		while((PORT->Group[0].IN.reg & SPI1_MISO_PIN)==1 || (PORT->Group[0].OUT.reg & SLAVE1_SELECT_PIN)==0) {}
     b94:	497c      	ldr	r1, [pc, #496]	; (d88 <read_data+0x208>)
     b96:	2480      	movs	r4, #128	; 0x80
     b98:	0324      	lsls	r4, r4, #12
     b9a:	6a08      	ldr	r0, [r1, #32]
     b9c:	6908      	ldr	r0, [r1, #16]
     b9e:	4220      	tst	r0, r4
     ba0:	d0fb      	beq.n	b9a <read_data+0x1a>
		PORT->Group[0].OUTCLR.reg = SLAVE1_SELECT_PIN;
     ba2:	2080      	movs	r0, #128	; 0x80
     ba4:	0300      	lsls	r0, r0, #12
     ba6:	4978      	ldr	r1, [pc, #480]	; (d88 <read_data+0x208>)
     ba8:	6148      	str	r0, [r1, #20]
		while((PORT->Group[0].IN.reg & SPI1_MISO_PIN)) {}
     baa:	000c      	movs	r4, r1
     bac:	2080      	movs	r0, #128	; 0x80
     bae:	02c0      	lsls	r0, r0, #11
     bb0:	6a21      	ldr	r1, [r4, #32]
     bb2:	4201      	tst	r1, r0
     bb4:	d1fc      	bne.n	bb0 <read_data+0x30>
		//SERCOM1->SPI.INTENCLR.reg = SERCOM_SPI_INTENCLR_TXC;
		for(i = bytes; i > 0; i--) {
     bb6:	0011      	movs	r1, r2
     bb8:	4319      	orrs	r1, r3
     bba:	d051      	beq.n	c60 <read_data+0xe0>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     bbc:	4973      	ldr	r1, [pc, #460]	; (d8c <read_data+0x20c>)
     bbe:	468a      	mov	sl, r1
			shiftedData = 0;
			while(!spi_is_ready_to_write(&spi1_master_instance));
     bc0:	2701      	movs	r7, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     bc2:	2100      	movs	r1, #0
     bc4:	4688      	mov	r8, r1
			spi_write(&spi1_master_instance, 0b00000000);
			while(!spi_is_ready_to_read(&spi1_master_instance));
     bc6:	3104      	adds	r1, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     bc8:	46d4      	mov	ip, sl
			spi_read(&spi1_master_instance, &shiftedData);
			*data |= shiftedData << (i-1)*8;
     bca:	2020      	movs	r0, #32
     bcc:	4683      	mov	fp, r0
		while((PORT->Group[0].IN.reg & SPI1_MISO_PIN)==1 || (PORT->Group[0].OUT.reg & SLAVE1_SELECT_PIN)==0) {}
		PORT->Group[0].OUTCLR.reg = SLAVE1_SELECT_PIN;
		while((PORT->Group[0].IN.reg & SPI1_MISO_PIN)) {}
		//SERCOM1->SPI.INTENCLR.reg = SERCOM_SPI_INTENCLR_TXC;
		for(i = bytes; i > 0; i--) {
			shiftedData = 0;
     bce:	2400      	movs	r4, #0
     bd0:	2500      	movs	r5, #0
     bd2:	9402      	str	r4, [sp, #8]
     bd4:	9503      	str	r5, [sp, #12]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     bd6:	4650      	mov	r0, sl
     bd8:	6800      	ldr	r0, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     bda:	7e04      	ldrb	r4, [r0, #24]
			while(!spi_is_ready_to_write(&spi1_master_instance));
     bdc:	423c      	tst	r4, r7
     bde:	d0fc      	beq.n	bda <read_data+0x5a>
     be0:	7e04      	ldrb	r4, [r0, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     be2:	423c      	tst	r4, r7
     be4:	d001      	beq.n	bea <read_data+0x6a>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     be6:	4644      	mov	r4, r8
     be8:	6284      	str	r4, [r0, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     bea:	7e04      	ldrb	r4, [r0, #24]
			spi_write(&spi1_master_instance, 0b00000000);
			while(!spi_is_ready_to_read(&spi1_master_instance));
     bec:	420c      	tst	r4, r1
     bee:	d0fc      	beq.n	bea <read_data+0x6a>
     bf0:	7e04      	ldrb	r4, [r0, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     bf2:	420c      	tst	r4, r1
     bf4:	d011      	beq.n	c1a <read_data+0x9a>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     bf6:	8b44      	ldrh	r4, [r0, #26]
     bf8:	420c      	tst	r4, r1
     bfa:	d000      	beq.n	bfe <read_data+0x7e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     bfc:	8341      	strh	r1, [r0, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     bfe:	4664      	mov	r4, ip
     c00:	79a4      	ldrb	r4, [r4, #6]
     c02:	2c01      	cmp	r4, #1
     c04:	d105      	bne.n	c12 <read_data+0x92>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     c06:	6a80      	ldr	r0, [r0, #40]	; 0x28
     c08:	05c0      	lsls	r0, r0, #23
     c0a:	0dc0      	lsrs	r0, r0, #23
     c0c:	ac02      	add	r4, sp, #8
     c0e:	8020      	strh	r0, [r4, #0]
     c10:	e003      	b.n	c1a <read_data+0x9a>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     c12:	6a80      	ldr	r0, [r0, #40]	; 0x28
     c14:	b2c0      	uxtb	r0, r0
     c16:	ac02      	add	r4, sp, #8
     c18:	8020      	strh	r0, [r4, #0]
			spi_read(&spi1_master_instance, &shiftedData);
			*data |= shiftedData << (i-1)*8;
     c1a:	485d      	ldr	r0, [pc, #372]	; (d90 <read_data+0x210>)
     c1c:	1810      	adds	r0, r2, r0
     c1e:	00c0      	lsls	r0, r0, #3
     c20:	2420      	movs	r4, #32
     c22:	4264      	negs	r4, r4
     c24:	1904      	adds	r4, r0, r4
     c26:	d403      	bmi.n	c30 <read_data+0xb0>
     c28:	9d02      	ldr	r5, [sp, #8]
     c2a:	40a5      	lsls	r5, r4
     c2c:	002c      	movs	r4, r5
     c2e:	e006      	b.n	c3e <read_data+0xbe>
     c30:	465c      	mov	r4, fp
     c32:	1a24      	subs	r4, r4, r0
     c34:	9d02      	ldr	r5, [sp, #8]
     c36:	40e5      	lsrs	r5, r4
     c38:	9c03      	ldr	r4, [sp, #12]
     c3a:	4084      	lsls	r4, r0
     c3c:	432c      	orrs	r4, r5
     c3e:	9d02      	ldr	r5, [sp, #8]
     c40:	4085      	lsls	r5, r0
     c42:	0028      	movs	r0, r5
     c44:	6835      	ldr	r5, [r6, #0]
     c46:	4328      	orrs	r0, r5
     c48:	6030      	str	r0, [r6, #0]
     c4a:	6870      	ldr	r0, [r6, #4]
     c4c:	4304      	orrs	r4, r0
     c4e:	6074      	str	r4, [r6, #4]
	if(ADC_index) {
		while((PORT->Group[0].IN.reg & SPI1_MISO_PIN)==1 || (PORT->Group[0].OUT.reg & SLAVE1_SELECT_PIN)==0) {}
		PORT->Group[0].OUTCLR.reg = SLAVE1_SELECT_PIN;
		while((PORT->Group[0].IN.reg & SPI1_MISO_PIN)) {}
		//SERCOM1->SPI.INTENCLR.reg = SERCOM_SPI_INTENCLR_TXC;
		for(i = bytes; i > 0; i--) {
     c50:	2401      	movs	r4, #1
     c52:	4264      	negs	r4, r4
     c54:	17e5      	asrs	r5, r4, #31
     c56:	1912      	adds	r2, r2, r4
     c58:	416b      	adcs	r3, r5
     c5a:	0010      	movs	r0, r2
     c5c:	4318      	orrs	r0, r3
     c5e:	d1b6      	bne.n	bce <read_data+0x4e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     c60:	4b4c      	ldr	r3, [pc, #304]	; (d94 <read_data+0x214>)
     c62:	6819      	ldr	r1, [r3, #0]
			spi_write(&spi1_master_instance, 0b00000000);
			while(!spi_is_ready_to_read(&spi1_master_instance));
			spi_read(&spi1_master_instance, &shiftedData);
			*data |= shiftedData << (i-1)*8;
		}
		while(spi_is_ready_to_write(&spi0_master_instance) != true) {}
     c64:	2201      	movs	r2, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     c66:	7e0b      	ldrb	r3, [r1, #24]
     c68:	4213      	tst	r3, r2
     c6a:	d0fc      	beq.n	c66 <read_data+0xe6>
		PORT->Group[0].OUTSET.reg = SLAVE1_SELECT_PIN;
     c6c:	2280      	movs	r2, #128	; 0x80
     c6e:	0312      	lsls	r2, r2, #12
     c70:	4b45      	ldr	r3, [pc, #276]	; (d88 <read_data+0x208>)
     c72:	619a      	str	r2, [r3, #24]
     c74:	e081      	b.n	d7a <read_data+0x1fa>
		//SERCOM1->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
	} else {
		while((PORT->Group[0].IN.reg & SPI0_MISO_PIN)==1 || (PORT->Group[0].OUT.reg & SLAVE0_SELECT_PIN)==0) {}
     c76:	4944      	ldr	r1, [pc, #272]	; (d88 <read_data+0x208>)
     c78:	2480      	movs	r4, #128	; 0x80
     c7a:	0124      	lsls	r4, r4, #4
     c7c:	6a08      	ldr	r0, [r1, #32]
     c7e:	6908      	ldr	r0, [r1, #16]
     c80:	4220      	tst	r0, r4
     c82:	d0fb      	beq.n	c7c <read_data+0xfc>
		PORT->Group[0].OUTCLR.reg = SLAVE0_SELECT_PIN;
     c84:	2080      	movs	r0, #128	; 0x80
     c86:	0100      	lsls	r0, r0, #4
     c88:	493f      	ldr	r1, [pc, #252]	; (d88 <read_data+0x208>)
     c8a:	6148      	str	r0, [r1, #20]
		while((PORT->Group[0].IN.reg & SPI0_MISO_PIN)) {}
     c8c:	000c      	movs	r4, r1
     c8e:	2080      	movs	r0, #128	; 0x80
     c90:	00c0      	lsls	r0, r0, #3
     c92:	6a21      	ldr	r1, [r4, #32]
     c94:	4201      	tst	r1, r0
     c96:	d1fc      	bne.n	c92 <read_data+0x112>
		//SERCOM0->SPI.INTENCLR.reg = SERCOM_SPI_INTENCLR_TXC;
		for(i = bytes; i > 0; i--) {
     c98:	0011      	movs	r1, r2
     c9a:	4319      	orrs	r1, r3
     c9c:	d063      	beq.n	d66 <read_data+0x1e6>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     c9e:	4d3d      	ldr	r5, [pc, #244]	; (d94 <read_data+0x214>)
			shiftedData = 0;
			while(!spi_is_ready_to_write(&spi0_master_instance));
     ca0:	2401      	movs	r4, #1
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     ca2:	2100      	movs	r1, #0
     ca4:	468b      	mov	fp, r1
			spi_write(&spi0_master_instance, 0b00000000);
			while(!spi_is_ready_to_read(&spi0_master_instance));
     ca6:	2004      	movs	r0, #4
	} else {
		while((PORT->Group[0].IN.reg & SPI0_MISO_PIN)==1 || (PORT->Group[0].OUT.reg & SLAVE0_SELECT_PIN)==0) {}
		PORT->Group[0].OUTCLR.reg = SLAVE0_SELECT_PIN;
		while((PORT->Group[0].IN.reg & SPI0_MISO_PIN)) {}
		//SERCOM0->SPI.INTENCLR.reg = SERCOM_SPI_INTENCLR_TXC;
		for(i = bytes; i > 0; i--) {
     ca8:	46b0      	mov	r8, r6
     caa:	9200      	str	r2, [sp, #0]
     cac:	9301      	str	r3, [sp, #4]
			shiftedData = 0;
     cae:	2200      	movs	r2, #0
     cb0:	2300      	movs	r3, #0
     cb2:	9202      	str	r2, [sp, #8]
     cb4:	9303      	str	r3, [sp, #12]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     cb6:	6829      	ldr	r1, [r5, #0]
     cb8:	4646      	mov	r6, r8
     cba:	9a00      	ldr	r2, [sp, #0]
     cbc:	9b01      	ldr	r3, [sp, #4]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     cbe:	7e0f      	ldrb	r7, [r1, #24]
			while(!spi_is_ready_to_write(&spi0_master_instance));
     cc0:	4227      	tst	r7, r4
     cc2:	d0fc      	beq.n	cbe <read_data+0x13e>
     cc4:	46b0      	mov	r8, r6
     cc6:	9200      	str	r2, [sp, #0]
     cc8:	9301      	str	r3, [sp, #4]
     cca:	7e0f      	ldrb	r7, [r1, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     ccc:	4227      	tst	r7, r4
     cce:	d001      	beq.n	cd4 <read_data+0x154>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     cd0:	465b      	mov	r3, fp
     cd2:	628b      	str	r3, [r1, #40]	; 0x28
     cd4:	4646      	mov	r6, r8
     cd6:	9a00      	ldr	r2, [sp, #0]
     cd8:	9b01      	ldr	r3, [sp, #4]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     cda:	7e0f      	ldrb	r7, [r1, #24]
			spi_write(&spi0_master_instance, 0b00000000);
			while(!spi_is_ready_to_read(&spi0_master_instance));
     cdc:	4207      	tst	r7, r0
     cde:	d0fc      	beq.n	cda <read_data+0x15a>
     ce0:	46b0      	mov	r8, r6
     ce2:	9200      	str	r2, [sp, #0]
     ce4:	9301      	str	r3, [sp, #4]
     ce6:	7e0f      	ldrb	r7, [r1, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     ce8:	4207      	tst	r7, r0
     cea:	d011      	beq.n	d10 <read_data+0x190>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     cec:	8b4f      	ldrh	r7, [r1, #26]
     cee:	4207      	tst	r7, r0
     cf0:	d000      	beq.n	cf4 <read_data+0x174>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     cf2:	8348      	strh	r0, [r1, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     cf4:	4b27      	ldr	r3, [pc, #156]	; (d94 <read_data+0x214>)
     cf6:	799f      	ldrb	r7, [r3, #6]
     cf8:	2f01      	cmp	r7, #1
     cfa:	d105      	bne.n	d08 <read_data+0x188>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     cfc:	6a89      	ldr	r1, [r1, #40]	; 0x28
     cfe:	05c9      	lsls	r1, r1, #23
     d00:	0dc9      	lsrs	r1, r1, #23
     d02:	ab02      	add	r3, sp, #8
     d04:	8019      	strh	r1, [r3, #0]
     d06:	e003      	b.n	d10 <read_data+0x190>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     d08:	6a89      	ldr	r1, [r1, #40]	; 0x28
     d0a:	b2c9      	uxtb	r1, r1
     d0c:	ab02      	add	r3, sp, #8
     d0e:	8019      	strh	r1, [r3, #0]
			spi_read(&spi0_master_instance, &shiftedData);
			*data |= shiftedData << (i-1)*8;
     d10:	4b1f      	ldr	r3, [pc, #124]	; (d90 <read_data+0x210>)
     d12:	9a00      	ldr	r2, [sp, #0]
     d14:	18d1      	adds	r1, r2, r3
     d16:	00c9      	lsls	r1, r1, #3
     d18:	2320      	movs	r3, #32
     d1a:	425b      	negs	r3, r3
     d1c:	18cf      	adds	r7, r1, r3
     d1e:	d403      	bmi.n	d28 <read_data+0x1a8>
     d20:	9b02      	ldr	r3, [sp, #8]
     d22:	40bb      	lsls	r3, r7
     d24:	001f      	movs	r7, r3
     d26:	e006      	b.n	d36 <read_data+0x1b6>
     d28:	2320      	movs	r3, #32
     d2a:	1a5f      	subs	r7, r3, r1
     d2c:	9b02      	ldr	r3, [sp, #8]
     d2e:	40fb      	lsrs	r3, r7
     d30:	9f03      	ldr	r7, [sp, #12]
     d32:	408f      	lsls	r7, r1
     d34:	431f      	orrs	r7, r3
     d36:	9b02      	ldr	r3, [sp, #8]
     d38:	408b      	lsls	r3, r1
     d3a:	0019      	movs	r1, r3
     d3c:	4643      	mov	r3, r8
     d3e:	681b      	ldr	r3, [r3, #0]
     d40:	4319      	orrs	r1, r3
     d42:	4643      	mov	r3, r8
     d44:	6019      	str	r1, [r3, #0]
     d46:	685b      	ldr	r3, [r3, #4]
     d48:	431f      	orrs	r7, r3
     d4a:	4643      	mov	r3, r8
     d4c:	605f      	str	r7, [r3, #4]
	} else {
		while((PORT->Group[0].IN.reg & SPI0_MISO_PIN)==1 || (PORT->Group[0].OUT.reg & SLAVE0_SELECT_PIN)==0) {}
		PORT->Group[0].OUTCLR.reg = SLAVE0_SELECT_PIN;
		while((PORT->Group[0].IN.reg & SPI0_MISO_PIN)) {}
		//SERCOM0->SPI.INTENCLR.reg = SERCOM_SPI_INTENCLR_TXC;
		for(i = bytes; i > 0; i--) {
     d4e:	2201      	movs	r2, #1
     d50:	4252      	negs	r2, r2
     d52:	17d3      	asrs	r3, r2, #31
     d54:	9e00      	ldr	r6, [sp, #0]
     d56:	9f01      	ldr	r7, [sp, #4]
     d58:	18b6      	adds	r6, r6, r2
     d5a:	415f      	adcs	r7, r3
     d5c:	9600      	str	r6, [sp, #0]
     d5e:	9701      	str	r7, [sp, #4]
     d60:	0031      	movs	r1, r6
     d62:	4339      	orrs	r1, r7
     d64:	d1a3      	bne.n	cae <read_data+0x12e>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     d66:	4b0b      	ldr	r3, [pc, #44]	; (d94 <read_data+0x214>)
     d68:	6819      	ldr	r1, [r3, #0]
			while(!spi_is_ready_to_read(&spi0_master_instance));
			spi_read(&spi0_master_instance, &shiftedData);
			*data |= shiftedData << (i-1)*8;
		}
		//SERCOM0->SPI.INTENSET.reg = SERCOM_SPI_INTENSET_TXC;
		while(spi_is_ready_to_write(&spi0_master_instance) != true) {}
     d6a:	2201      	movs	r2, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     d6c:	7e0b      	ldrb	r3, [r1, #24]
     d6e:	4213      	tst	r3, r2
     d70:	d0fc      	beq.n	d6c <read_data+0x1ec>
		PORT->Group[0].OUTSET.reg = SLAVE0_SELECT_PIN;
     d72:	2280      	movs	r2, #128	; 0x80
     d74:	0112      	lsls	r2, r2, #4
     d76:	4b04      	ldr	r3, [pc, #16]	; (d88 <read_data+0x208>)
     d78:	619a      	str	r2, [r3, #24]
	}
}
     d7a:	b005      	add	sp, #20
     d7c:	bc3c      	pop	{r2, r3, r4, r5}
     d7e:	4690      	mov	r8, r2
     d80:	4699      	mov	r9, r3
     d82:	46a2      	mov	sl, r4
     d84:	46ab      	mov	fp, r5
     d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d88:	41004400 	.word	0x41004400
     d8c:	20000138 	.word	0x20000138
     d90:	1fffffff 	.word	0x1fffffff
     d94:	200001f4 	.word	0x200001f4

00000d98 <tc_callback_to_send_data>:

 char tc_data = 'e';

 void tc_callback_to_send_data(
 struct tc_module *const module_inst)
 {
     d98:	b510      	push	{r4, lr}
	 print(&tc_data, 1);
     d9a:	2101      	movs	r1, #1
     d9c:	4801      	ldr	r0, [pc, #4]	; (da4 <tc_callback_to_send_data+0xc>)
     d9e:	4b02      	ldr	r3, [pc, #8]	; (da8 <tc_callback_to_send_data+0x10>)
     da0:	4798      	blx	r3
 }
     da2:	bd10      	pop	{r4, pc}
     da4:	20000010 	.word	0x20000010
     da8:	00000f31 	.word	0x00000f31

00000dac <configure_tc>:

 void configure_tc(void)
 {
     dac:	b510      	push	{r4, lr}
     dae:	b08e      	sub	sp, #56	; 0x38

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     db0:	aa01      	add	r2, sp, #4
     db2:	2300      	movs	r3, #0
     db4:	2100      	movs	r1, #0
     db6:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     db8:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     dba:	2000      	movs	r0, #0
     dbc:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     dbe:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     dc0:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     dc2:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     dc4:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     dc6:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     dc8:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     dca:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     dcc:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     dce:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     dd0:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     dd2:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     dd4:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     dd6:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     dd8:	8593      	strh	r3, [r2, #44]	; 0x2c
	 struct tc_config config_tc;
	 tc_get_config_defaults(&config_tc);
	 config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
     dda:	3304      	adds	r3, #4
     ddc:	7093      	strb	r3, [r2, #2]
	 config_tc.clock_source = GCLK_GENERATOR_2;
     dde:	3b02      	subs	r3, #2
     de0:	7013      	strb	r3, [r2, #0]
	 config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV16;
     de2:	2380      	movs	r3, #128	; 0x80
     de4:	00db      	lsls	r3, r3, #3
     de6:	8093      	strh	r3, [r2, #4]
	 config_tc.counter_8_bit.period = 50;
     de8:	2132      	movs	r1, #50	; 0x32
     dea:	2329      	movs	r3, #41	; 0x29
     dec:	54d1      	strb	r1, [r2, r3]
	 tc_init(&tc_instance, CONF_TC_MODULE, &config_tc);
     dee:	4c08      	ldr	r4, [pc, #32]	; (e10 <configure_tc+0x64>)
     df0:	4908      	ldr	r1, [pc, #32]	; (e14 <configure_tc+0x68>)
     df2:	0020      	movs	r0, r4
     df4:	4b08      	ldr	r3, [pc, #32]	; (e18 <configure_tc+0x6c>)
     df6:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     df8:	6822      	ldr	r2, [r4, #0]

	while (tc_is_syncing(module_inst)) {
     dfa:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     dfc:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     dfe:	438b      	bics	r3, r1
     e00:	d1fc      	bne.n	dfc <configure_tc+0x50>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     e02:	8811      	ldrh	r1, [r2, #0]
     e04:	3302      	adds	r3, #2
     e06:	430b      	orrs	r3, r1
     e08:	8013      	strh	r3, [r2, #0]
	 tc_enable(&tc_instance);
 }
     e0a:	b00e      	add	sp, #56	; 0x38
     e0c:	bd10      	pop	{r4, pc}
     e0e:	46c0      	nop			; (mov r8, r8)
     e10:	2000029c 	.word	0x2000029c
     e14:	42002c00 	.word	0x42002c00
     e18:	00000655 	.word	0x00000655

00000e1c <configure_tc_callbacks>:

 void configure_tc_callbacks(void)
 {
     e1c:	b510      	push	{r4, lr}
	 tc_register_callback(&tc_instance, tc_callback_to_send_data,
     e1e:	4c0c      	ldr	r4, [pc, #48]	; (e50 <configure_tc_callbacks+0x34>)
     e20:	2200      	movs	r2, #0
     e22:	490c      	ldr	r1, [pc, #48]	; (e54 <configure_tc_callbacks+0x38>)
     e24:	0020      	movs	r0, r4
     e26:	4b0c      	ldr	r3, [pc, #48]	; (e58 <configure_tc_callbacks+0x3c>)
     e28:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     e2a:	6820      	ldr	r0, [r4, #0]
     e2c:	4b0b      	ldr	r3, [pc, #44]	; (e5c <configure_tc_callbacks+0x40>)
     e2e:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     e30:	4b0b      	ldr	r3, [pc, #44]	; (e60 <configure_tc_callbacks+0x44>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     e32:	5c1b      	ldrb	r3, [r3, r0]
     e34:	221f      	movs	r2, #31
     e36:	4013      	ands	r3, r2
     e38:	3a1e      	subs	r2, #30
     e3a:	0011      	movs	r1, r2
     e3c:	4099      	lsls	r1, r3
     e3e:	4b09      	ldr	r3, [pc, #36]	; (e64 <configure_tc_callbacks+0x48>)
     e40:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     e42:	7e61      	ldrb	r1, [r4, #25]
     e44:	2301      	movs	r3, #1
     e46:	430b      	orrs	r3, r1
     e48:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     e4a:	6823      	ldr	r3, [r4, #0]
     e4c:	735a      	strb	r2, [r3, #13]
	 TC_CALLBACK_OVERFLOW);
	 tc_enable_callback(&tc_instance, TC_CALLBACK_OVERFLOW);
 }
     e4e:	bd10      	pop	{r4, pc}
     e50:	2000029c 	.word	0x2000029c
     e54:	00000d99 	.word	0x00000d99
     e58:	00000561 	.word	0x00000561
     e5c:	0000061d 	.word	0x0000061d
     e60:	0000293c 	.word	0x0000293c
     e64:	e000e100 	.word	0xe000e100

00000e68 <tc_set_data_to_send>:

 void tc_set_data_to_send(char tc_data_p) {
	tc_data = tc_data_p;
     e68:	4b01      	ldr	r3, [pc, #4]	; (e70 <tc_set_data_to_send+0x8>)
     e6a:	7018      	strb	r0, [r3, #0]
     e6c:	4770      	bx	lr
     e6e:	46c0      	nop			; (mov r8, r8)
     e70:	20000010 	.word	0x20000010

00000e74 <configure_usart>:
void usart_write_callback(struct usart_module *const usart_module)
{
	port_pin_toggle_output_level(LED_0_PIN);
}

void configure_usart(void) {
     e74:	b530      	push	{r4, r5, lr}
     e76:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     e78:	2380      	movs	r3, #128	; 0x80
     e7a:	05db      	lsls	r3, r3, #23
     e7c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     e7e:	2300      	movs	r3, #0
     e80:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     e82:	22ff      	movs	r2, #255	; 0xff
     e84:	4669      	mov	r1, sp
     e86:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     e88:	2200      	movs	r2, #0
     e8a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     e8c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
     e8e:	2196      	movs	r1, #150	; 0x96
     e90:	0189      	lsls	r1, r1, #6
     e92:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
     e94:	2101      	movs	r1, #1
     e96:	2024      	movs	r0, #36	; 0x24
     e98:	466c      	mov	r4, sp
     e9a:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     e9c:	3001      	adds	r0, #1
     e9e:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     ea0:	3125      	adds	r1, #37	; 0x25
     ea2:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     ea4:	3101      	adds	r1, #1
     ea6:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     ea8:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     eaa:	3105      	adds	r1, #5
     eac:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     eae:	3101      	adds	r1, #1
     eb0:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     eb2:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     eb4:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     eb6:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     eb8:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     eba:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     ebc:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     ebe:	2313      	movs	r3, #19
     ec0:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     ec2:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;

	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600; //115200;
	config_usart.mux_setting = MY_SERCOM_MUX_SETTING;
     ec4:	2380      	movs	r3, #128	; 0x80
     ec6:	035b      	lsls	r3, r3, #13
     ec8:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = MY_SERCOM_PINMUX_PAD0;
     eca:	4b12      	ldr	r3, [pc, #72]	; (f14 <configure_usart+0xa0>)
     ecc:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = MY_SERCOM_PINMUX_PAD1;
     ece:	4b12      	ldr	r3, [pc, #72]	; (f18 <configure_usart+0xa4>)
     ed0:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = MY_SERCOM_PINMUX_PAD2;
     ed2:	2301      	movs	r3, #1
     ed4:	425b      	negs	r3, r3
     ed6:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = MY_SERCOM_PINMUX_PAD3;
     ed8:	930f      	str	r3, [sp, #60]	; 0x3c

	while (usart_init(&usart_instance,
     eda:	4d10      	ldr	r5, [pc, #64]	; (f1c <configure_usart+0xa8>)
     edc:	4c10      	ldr	r4, [pc, #64]	; (f20 <configure_usart+0xac>)
     ede:	466a      	mov	r2, sp
     ee0:	4910      	ldr	r1, [pc, #64]	; (f24 <configure_usart+0xb0>)
     ee2:	0028      	movs	r0, r5
     ee4:	47a0      	blx	r4
     ee6:	2800      	cmp	r0, #0
     ee8:	d1f9      	bne.n	ede <configure_usart+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     eea:	4d0c      	ldr	r5, [pc, #48]	; (f1c <configure_usart+0xa8>)
     eec:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     eee:	0020      	movs	r0, r4
     ef0:	4b0d      	ldr	r3, [pc, #52]	; (f28 <configure_usart+0xb4>)
     ef2:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     ef4:	231f      	movs	r3, #31
     ef6:	4018      	ands	r0, r3
     ef8:	3b1e      	subs	r3, #30
     efa:	4083      	lsls	r3, r0
     efc:	4a0b      	ldr	r2, [pc, #44]	; (f2c <configure_usart+0xb8>)
     efe:	6013      	str	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     f00:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     f02:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     f04:	2b00      	cmp	r3, #0
     f06:	d1fc      	bne.n	f02 <configure_usart+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     f08:	6822      	ldr	r2, [r4, #0]
     f0a:	3302      	adds	r3, #2
     f0c:	4313      	orrs	r3, r2
     f0e:	6023      	str	r3, [r4, #0]
	MY_MODULE, &config_usart) != STATUS_OK) {
	}
	usart_enable(&usart_instance);
	
}
     f10:	b011      	add	sp, #68	; 0x44
     f12:	bd30      	pop	{r4, r5, pc}
     f14:	00220003 	.word	0x00220003
     f18:	00230003 	.word	0x00230003
     f1c:	20000088 	.word	0x20000088
     f20:	000017b9 	.word	0x000017b9
     f24:	42001c00 	.word	0x42001c00
     f28:	00000349 	.word	0x00000349
     f2c:	e000e100 	.word	0xe000e100

00000f30 <print>:
	usart_enable_callback(&usart_instance,
	USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}

void print(uint8_t * string, uint16_t size) {
     f30:	b510      	push	{r4, lr}
     f32:	000a      	movs	r2, r1
	usart_write_buffer_wait(&usart_instance, string, size);
     f34:	0001      	movs	r1, r0
     f36:	4802      	ldr	r0, [pc, #8]	; (f40 <print+0x10>)
     f38:	4b02      	ldr	r3, [pc, #8]	; (f44 <print+0x14>)
     f3a:	4798      	blx	r3
}
     f3c:	bd10      	pop	{r4, pc}
     f3e:	46c0      	nop			; (mov r8, r8)
     f40:	20000088 	.word	0x20000088
     f44:	00001b8d 	.word	0x00001b8d

00000f48 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     f48:	4b0c      	ldr	r3, [pc, #48]	; (f7c <cpu_irq_enter_critical+0x34>)
     f4a:	681b      	ldr	r3, [r3, #0]
     f4c:	2b00      	cmp	r3, #0
     f4e:	d110      	bne.n	f72 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     f50:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     f54:	2b00      	cmp	r3, #0
     f56:	d109      	bne.n	f6c <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     f58:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     f5a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     f5e:	2200      	movs	r2, #0
     f60:	4b07      	ldr	r3, [pc, #28]	; (f80 <cpu_irq_enter_critical+0x38>)
     f62:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     f64:	3201      	adds	r2, #1
     f66:	4b07      	ldr	r3, [pc, #28]	; (f84 <cpu_irq_enter_critical+0x3c>)
     f68:	701a      	strb	r2, [r3, #0]
     f6a:	e002      	b.n	f72 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     f6c:	2200      	movs	r2, #0
     f6e:	4b05      	ldr	r3, [pc, #20]	; (f84 <cpu_irq_enter_critical+0x3c>)
     f70:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     f72:	4a02      	ldr	r2, [pc, #8]	; (f7c <cpu_irq_enter_critical+0x34>)
     f74:	6813      	ldr	r3, [r2, #0]
     f76:	3301      	adds	r3, #1
     f78:	6013      	str	r3, [r2, #0]
}
     f7a:	4770      	bx	lr
     f7c:	20000050 	.word	0x20000050
     f80:	20000011 	.word	0x20000011
     f84:	20000054 	.word	0x20000054

00000f88 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     f88:	4b08      	ldr	r3, [pc, #32]	; (fac <cpu_irq_leave_critical+0x24>)
     f8a:	681a      	ldr	r2, [r3, #0]
     f8c:	3a01      	subs	r2, #1
     f8e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     f90:	681b      	ldr	r3, [r3, #0]
     f92:	2b00      	cmp	r3, #0
     f94:	d109      	bne.n	faa <cpu_irq_leave_critical+0x22>
     f96:	4b06      	ldr	r3, [pc, #24]	; (fb0 <cpu_irq_leave_critical+0x28>)
     f98:	781b      	ldrb	r3, [r3, #0]
     f9a:	2b00      	cmp	r3, #0
     f9c:	d005      	beq.n	faa <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     f9e:	2201      	movs	r2, #1
     fa0:	4b04      	ldr	r3, [pc, #16]	; (fb4 <cpu_irq_leave_critical+0x2c>)
     fa2:	701a      	strb	r2, [r3, #0]
     fa4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     fa8:	b662      	cpsie	i
	}
}
     faa:	4770      	bx	lr
     fac:	20000050 	.word	0x20000050
     fb0:	20000054 	.word	0x20000054
     fb4:	20000011 	.word	0x20000011

00000fb8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
     fba:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     fbc:	ac01      	add	r4, sp, #4
     fbe:	2501      	movs	r5, #1
     fc0:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     fc2:	2700      	movs	r7, #0
     fc4:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     fc6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     fc8:	0021      	movs	r1, r4
     fca:	2016      	movs	r0, #22
     fcc:	4e06      	ldr	r6, [pc, #24]	; (fe8 <system_board_init+0x30>)
     fce:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     fd0:	2280      	movs	r2, #128	; 0x80
     fd2:	03d2      	lsls	r2, r2, #15
     fd4:	4b05      	ldr	r3, [pc, #20]	; (fec <system_board_init+0x34>)
     fd6:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     fd8:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     fda:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     fdc:	0021      	movs	r1, r4
     fde:	200f      	movs	r0, #15
     fe0:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     fe2:	b003      	add	sp, #12
     fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fe6:	46c0      	nop			; (mov r8, r8)
     fe8:	00000ff1 	.word	0x00000ff1
     fec:	41004400 	.word	0x41004400

00000ff0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     ff0:	b500      	push	{lr}
     ff2:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     ff4:	ab01      	add	r3, sp, #4
     ff6:	2280      	movs	r2, #128	; 0x80
     ff8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     ffa:	780a      	ldrb	r2, [r1, #0]
     ffc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     ffe:	784a      	ldrb	r2, [r1, #1]
    1000:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1002:	788a      	ldrb	r2, [r1, #2]
    1004:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1006:	0019      	movs	r1, r3
    1008:	4b01      	ldr	r3, [pc, #4]	; (1010 <port_pin_set_config+0x20>)
    100a:	4798      	blx	r3
}
    100c:	b003      	add	sp, #12
    100e:	bd00      	pop	{pc}
    1010:	000021a5 	.word	0x000021a5

00001014 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1014:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1016:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1018:	2340      	movs	r3, #64	; 0x40
    101a:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    101c:	4281      	cmp	r1, r0
    101e:	d201      	bcs.n	1024 <_sercom_get_sync_baud_val+0x10>
    1020:	e00a      	b.n	1038 <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
    1022:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
    1024:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1026:	1c63      	adds	r3, r4, #1
    1028:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    102a:	4288      	cmp	r0, r1
    102c:	d9f9      	bls.n	1022 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    102e:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    1030:	2cff      	cmp	r4, #255	; 0xff
    1032:	d801      	bhi.n	1038 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
    1034:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1036:	2300      	movs	r3, #0
	}
}
    1038:	0018      	movs	r0, r3
    103a:	bd10      	pop	{r4, pc}

0000103c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    103c:	b5f0      	push	{r4, r5, r6, r7, lr}
    103e:	465f      	mov	r7, fp
    1040:	4656      	mov	r6, sl
    1042:	464d      	mov	r5, r9
    1044:	4644      	mov	r4, r8
    1046:	b4f0      	push	{r4, r5, r6, r7}
    1048:	b089      	sub	sp, #36	; 0x24
    104a:	000c      	movs	r4, r1
    104c:	9205      	str	r2, [sp, #20]
    104e:	aa12      	add	r2, sp, #72	; 0x48
    1050:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1052:	0002      	movs	r2, r0
    1054:	434a      	muls	r2, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1056:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1058:	42a2      	cmp	r2, r4
    105a:	d900      	bls.n	105e <_sercom_get_async_baud_val+0x22>
    105c:	e0c6      	b.n	11ec <_sercom_get_async_baud_val+0x1b0>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    105e:	2b00      	cmp	r3, #0
    1060:	d151      	bne.n	1106 <_sercom_get_async_baud_val+0xca>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1062:	0002      	movs	r2, r0
    1064:	0008      	movs	r0, r1
    1066:	2100      	movs	r1, #0
    1068:	4d64      	ldr	r5, [pc, #400]	; (11fc <_sercom_get_async_baud_val+0x1c0>)
    106a:	47a8      	blx	r5
    106c:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    106e:	0026      	movs	r6, r4
    1070:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1072:	2300      	movs	r3, #0
    1074:	2400      	movs	r4, #0
    1076:	9300      	str	r3, [sp, #0]
    1078:	9401      	str	r4, [sp, #4]
    107a:	2200      	movs	r2, #0
    107c:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    107e:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1080:	2120      	movs	r1, #32
    1082:	468c      	mov	ip, r1
    1084:	391f      	subs	r1, #31
    1086:	9602      	str	r6, [sp, #8]
    1088:	9703      	str	r7, [sp, #12]
    108a:	2420      	movs	r4, #32
    108c:	4264      	negs	r4, r4
    108e:	1904      	adds	r4, r0, r4
    1090:	d403      	bmi.n	109a <_sercom_get_async_baud_val+0x5e>
    1092:	000d      	movs	r5, r1
    1094:	40a5      	lsls	r5, r4
    1096:	46a8      	mov	r8, r5
    1098:	e004      	b.n	10a4 <_sercom_get_async_baud_val+0x68>
    109a:	4664      	mov	r4, ip
    109c:	1a24      	subs	r4, r4, r0
    109e:	000d      	movs	r5, r1
    10a0:	40e5      	lsrs	r5, r4
    10a2:	46a8      	mov	r8, r5
    10a4:	000c      	movs	r4, r1
    10a6:	4084      	lsls	r4, r0
    10a8:	46a1      	mov	r9, r4

		r = r << 1;
    10aa:	0014      	movs	r4, r2
    10ac:	001d      	movs	r5, r3
    10ae:	18a4      	adds	r4, r4, r2
    10b0:	415d      	adcs	r5, r3
    10b2:	0022      	movs	r2, r4
    10b4:	002b      	movs	r3, r5

		if (n & bit_shift) {
    10b6:	4646      	mov	r6, r8
    10b8:	465f      	mov	r7, fp
    10ba:	423e      	tst	r6, r7
    10bc:	d003      	beq.n	10c6 <_sercom_get_async_baud_val+0x8a>
			r |= 0x01;
    10be:	000e      	movs	r6, r1
    10c0:	4326      	orrs	r6, r4
    10c2:	0032      	movs	r2, r6
    10c4:	002b      	movs	r3, r5
		}

		if (r >= d) {
    10c6:	9c02      	ldr	r4, [sp, #8]
    10c8:	9d03      	ldr	r5, [sp, #12]
    10ca:	429d      	cmp	r5, r3
    10cc:	d80f      	bhi.n	10ee <_sercom_get_async_baud_val+0xb2>
    10ce:	d101      	bne.n	10d4 <_sercom_get_async_baud_val+0x98>
    10d0:	4294      	cmp	r4, r2
    10d2:	d80c      	bhi.n	10ee <_sercom_get_async_baud_val+0xb2>
			r = r - d;
    10d4:	9c02      	ldr	r4, [sp, #8]
    10d6:	9d03      	ldr	r5, [sp, #12]
    10d8:	1b12      	subs	r2, r2, r4
    10da:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    10dc:	464d      	mov	r5, r9
    10de:	9e00      	ldr	r6, [sp, #0]
    10e0:	9f01      	ldr	r7, [sp, #4]
    10e2:	4335      	orrs	r5, r6
    10e4:	003c      	movs	r4, r7
    10e6:	4646      	mov	r6, r8
    10e8:	4334      	orrs	r4, r6
    10ea:	9500      	str	r5, [sp, #0]
    10ec:	9401      	str	r4, [sp, #4]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    10ee:	3801      	subs	r0, #1
    10f0:	d2cb      	bcs.n	108a <_sercom_get_async_baud_val+0x4e>
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
    10f2:	2200      	movs	r2, #0
    10f4:	2301      	movs	r3, #1
    10f6:	9800      	ldr	r0, [sp, #0]
    10f8:	9901      	ldr	r1, [sp, #4]
    10fa:	1a12      	subs	r2, r2, r0
    10fc:	418b      	sbcs	r3, r1
    10fe:	0c12      	lsrs	r2, r2, #16
    1100:	041b      	lsls	r3, r3, #16
    1102:	431a      	orrs	r2, r3
    1104:	e06f      	b.n	11e6 <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
    1106:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1108:	2b01      	cmp	r3, #1
    110a:	d16c      	bne.n	11e6 <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    110c:	0f63      	lsrs	r3, r4, #29
    110e:	9304      	str	r3, [sp, #16]
    1110:	00e3      	lsls	r3, r4, #3
    1112:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
    1114:	000a      	movs	r2, r1
    1116:	2300      	movs	r3, #0
    1118:	2100      	movs	r1, #0
    111a:	4c38      	ldr	r4, [pc, #224]	; (11fc <_sercom_get_async_baud_val+0x1c0>)
    111c:	47a0      	blx	r4
    111e:	0004      	movs	r4, r0
    1120:	000d      	movs	r5, r1
    1122:	2300      	movs	r3, #0
    1124:	469c      	mov	ip, r3
    1126:	9306      	str	r3, [sp, #24]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    1128:	3320      	adds	r3, #32
    112a:	469b      	mov	fp, r3
    112c:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
    112e:	4663      	mov	r3, ip
    1130:	9307      	str	r3, [sp, #28]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1132:	2300      	movs	r3, #0
    1134:	9302      	str	r3, [sp, #8]
    1136:	2200      	movs	r2, #0
    1138:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    113a:	213f      	movs	r1, #63	; 0x3f
    113c:	9400      	str	r4, [sp, #0]
    113e:	9501      	str	r5, [sp, #4]
    1140:	000f      	movs	r7, r1
		bit_shift = (uint64_t)1 << i;
    1142:	2120      	movs	r1, #32
    1144:	4249      	negs	r1, r1
    1146:	1879      	adds	r1, r7, r1
    1148:	d403      	bmi.n	1152 <_sercom_get_async_baud_val+0x116>
    114a:	0030      	movs	r0, r6
    114c:	4088      	lsls	r0, r1
    114e:	4684      	mov	ip, r0
    1150:	e004      	b.n	115c <_sercom_get_async_baud_val+0x120>
    1152:	4659      	mov	r1, fp
    1154:	1bc9      	subs	r1, r1, r7
    1156:	0030      	movs	r0, r6
    1158:	40c8      	lsrs	r0, r1
    115a:	4684      	mov	ip, r0
    115c:	0031      	movs	r1, r6
    115e:	40b9      	lsls	r1, r7
    1160:	4689      	mov	r9, r1

		r = r << 1;
    1162:	0010      	movs	r0, r2
    1164:	0019      	movs	r1, r3
    1166:	1880      	adds	r0, r0, r2
    1168:	4159      	adcs	r1, r3
    116a:	0002      	movs	r2, r0
    116c:	000b      	movs	r3, r1

		if (n & bit_shift) {
    116e:	4644      	mov	r4, r8
    1170:	464d      	mov	r5, r9
    1172:	402c      	ands	r4, r5
    1174:	46a2      	mov	sl, r4
    1176:	4664      	mov	r4, ip
    1178:	9d04      	ldr	r5, [sp, #16]
    117a:	402c      	ands	r4, r5
    117c:	46a4      	mov	ip, r4
    117e:	4654      	mov	r4, sl
    1180:	4665      	mov	r5, ip
    1182:	432c      	orrs	r4, r5
    1184:	d003      	beq.n	118e <_sercom_get_async_baud_val+0x152>
			r |= 0x01;
    1186:	0034      	movs	r4, r6
    1188:	4304      	orrs	r4, r0
    118a:	0022      	movs	r2, r4
    118c:	000b      	movs	r3, r1
		}

		if (r >= d) {
    118e:	9800      	ldr	r0, [sp, #0]
    1190:	9901      	ldr	r1, [sp, #4]
    1192:	4299      	cmp	r1, r3
    1194:	d80a      	bhi.n	11ac <_sercom_get_async_baud_val+0x170>
    1196:	d101      	bne.n	119c <_sercom_get_async_baud_val+0x160>
    1198:	4290      	cmp	r0, r2
    119a:	d807      	bhi.n	11ac <_sercom_get_async_baud_val+0x170>
			r = r - d;
    119c:	9800      	ldr	r0, [sp, #0]
    119e:	9901      	ldr	r1, [sp, #4]
    11a0:	1a12      	subs	r2, r2, r0
    11a2:	418b      	sbcs	r3, r1
			q |= bit_shift;
    11a4:	9902      	ldr	r1, [sp, #8]
    11a6:	4648      	mov	r0, r9
    11a8:	4301      	orrs	r1, r0
    11aa:	9102      	str	r1, [sp, #8]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    11ac:	3f01      	subs	r7, #1
    11ae:	d2c8      	bcs.n	1142 <_sercom_get_async_baud_val+0x106>
    11b0:	9c00      	ldr	r4, [sp, #0]
    11b2:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
    11b4:	9902      	ldr	r1, [sp, #8]
    11b6:	9a07      	ldr	r2, [sp, #28]
    11b8:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
    11ba:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    11bc:	4910      	ldr	r1, [pc, #64]	; (1200 <_sercom_get_async_baud_val+0x1c4>)
    11be:	428b      	cmp	r3, r1
    11c0:	d90b      	bls.n	11da <_sercom_get_async_baud_val+0x19e>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    11c2:	9b06      	ldr	r3, [sp, #24]
    11c4:	3301      	adds	r3, #1
    11c6:	b2db      	uxtb	r3, r3
    11c8:	0019      	movs	r1, r3
    11ca:	9306      	str	r3, [sp, #24]
    11cc:	0013      	movs	r3, r2
    11ce:	3301      	adds	r3, #1
    11d0:	9307      	str	r3, [sp, #28]
    11d2:	2908      	cmp	r1, #8
    11d4:	d1ad      	bne.n	1132 <_sercom_get_async_baud_val+0xf6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    11d6:	2540      	movs	r5, #64	; 0x40
    11d8:	e008      	b.n	11ec <_sercom_get_async_baud_val+0x1b0>
    11da:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    11dc:	9a06      	ldr	r2, [sp, #24]
    11de:	2a08      	cmp	r2, #8
    11e0:	d004      	beq.n	11ec <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
    11e2:	0352      	lsls	r2, r2, #13
    11e4:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
    11e6:	9b05      	ldr	r3, [sp, #20]
    11e8:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    11ea:	2500      	movs	r5, #0
}
    11ec:	0028      	movs	r0, r5
    11ee:	b009      	add	sp, #36	; 0x24
    11f0:	bc3c      	pop	{r2, r3, r4, r5}
    11f2:	4690      	mov	r8, r2
    11f4:	4699      	mov	r9, r3
    11f6:	46a2      	mov	sl, r4
    11f8:	46ab      	mov	fp, r5
    11fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11fc:	0000260d 	.word	0x0000260d
    1200:	00001fff 	.word	0x00001fff

00001204 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1204:	b510      	push	{r4, lr}
    1206:	b082      	sub	sp, #8
    1208:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    120a:	4b0e      	ldr	r3, [pc, #56]	; (1244 <sercom_set_gclk_generator+0x40>)
    120c:	781b      	ldrb	r3, [r3, #0]
    120e:	2b00      	cmp	r3, #0
    1210:	d001      	beq.n	1216 <sercom_set_gclk_generator+0x12>
    1212:	2900      	cmp	r1, #0
    1214:	d00d      	beq.n	1232 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    1216:	a901      	add	r1, sp, #4
    1218:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    121a:	2013      	movs	r0, #19
    121c:	4b0a      	ldr	r3, [pc, #40]	; (1248 <sercom_set_gclk_generator+0x44>)
    121e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1220:	2013      	movs	r0, #19
    1222:	4b0a      	ldr	r3, [pc, #40]	; (124c <sercom_set_gclk_generator+0x48>)
    1224:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    1226:	4b07      	ldr	r3, [pc, #28]	; (1244 <sercom_set_gclk_generator+0x40>)
    1228:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    122a:	2201      	movs	r2, #1
    122c:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    122e:	2000      	movs	r0, #0
    1230:	e006      	b.n	1240 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
    1232:	4b04      	ldr	r3, [pc, #16]	; (1244 <sercom_set_gclk_generator+0x40>)
    1234:	785b      	ldrb	r3, [r3, #1]
    1236:	4283      	cmp	r3, r0
    1238:	d001      	beq.n	123e <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    123a:	201d      	movs	r0, #29
    123c:	e000      	b.n	1240 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
    123e:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    1240:	b002      	add	sp, #8
    1242:	bd10      	pop	{r4, pc}
    1244:	20000058 	.word	0x20000058
    1248:	000020ad 	.word	0x000020ad
    124c:	00002021 	.word	0x00002021

00001250 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1250:	4b44      	ldr	r3, [pc, #272]	; (1364 <_sercom_get_default_pad+0x114>)
    1252:	4298      	cmp	r0, r3
    1254:	d033      	beq.n	12be <_sercom_get_default_pad+0x6e>
    1256:	d806      	bhi.n	1266 <_sercom_get_default_pad+0x16>
    1258:	4b43      	ldr	r3, [pc, #268]	; (1368 <_sercom_get_default_pad+0x118>)
    125a:	4298      	cmp	r0, r3
    125c:	d00d      	beq.n	127a <_sercom_get_default_pad+0x2a>
    125e:	4b43      	ldr	r3, [pc, #268]	; (136c <_sercom_get_default_pad+0x11c>)
    1260:	4298      	cmp	r0, r3
    1262:	d01b      	beq.n	129c <_sercom_get_default_pad+0x4c>
    1264:	e06f      	b.n	1346 <_sercom_get_default_pad+0xf6>
    1266:	4b42      	ldr	r3, [pc, #264]	; (1370 <_sercom_get_default_pad+0x120>)
    1268:	4298      	cmp	r0, r3
    126a:	d04a      	beq.n	1302 <_sercom_get_default_pad+0xb2>
    126c:	4b41      	ldr	r3, [pc, #260]	; (1374 <_sercom_get_default_pad+0x124>)
    126e:	4298      	cmp	r0, r3
    1270:	d058      	beq.n	1324 <_sercom_get_default_pad+0xd4>
    1272:	4b41      	ldr	r3, [pc, #260]	; (1378 <_sercom_get_default_pad+0x128>)
    1274:	4298      	cmp	r0, r3
    1276:	d166      	bne.n	1346 <_sercom_get_default_pad+0xf6>
    1278:	e032      	b.n	12e0 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    127a:	2901      	cmp	r1, #1
    127c:	d006      	beq.n	128c <_sercom_get_default_pad+0x3c>
    127e:	2900      	cmp	r1, #0
    1280:	d063      	beq.n	134a <_sercom_get_default_pad+0xfa>
    1282:	2902      	cmp	r1, #2
    1284:	d006      	beq.n	1294 <_sercom_get_default_pad+0x44>
    1286:	2903      	cmp	r1, #3
    1288:	d006      	beq.n	1298 <_sercom_get_default_pad+0x48>
    128a:	e001      	b.n	1290 <_sercom_get_default_pad+0x40>
    128c:	483b      	ldr	r0, [pc, #236]	; (137c <_sercom_get_default_pad+0x12c>)
    128e:	e067      	b.n	1360 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1290:	2000      	movs	r0, #0
    1292:	e065      	b.n	1360 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1294:	483a      	ldr	r0, [pc, #232]	; (1380 <_sercom_get_default_pad+0x130>)
    1296:	e063      	b.n	1360 <_sercom_get_default_pad+0x110>
    1298:	483a      	ldr	r0, [pc, #232]	; (1384 <_sercom_get_default_pad+0x134>)
    129a:	e061      	b.n	1360 <_sercom_get_default_pad+0x110>
    129c:	2901      	cmp	r1, #1
    129e:	d006      	beq.n	12ae <_sercom_get_default_pad+0x5e>
    12a0:	2900      	cmp	r1, #0
    12a2:	d054      	beq.n	134e <_sercom_get_default_pad+0xfe>
    12a4:	2902      	cmp	r1, #2
    12a6:	d006      	beq.n	12b6 <_sercom_get_default_pad+0x66>
    12a8:	2903      	cmp	r1, #3
    12aa:	d006      	beq.n	12ba <_sercom_get_default_pad+0x6a>
    12ac:	e001      	b.n	12b2 <_sercom_get_default_pad+0x62>
    12ae:	4836      	ldr	r0, [pc, #216]	; (1388 <_sercom_get_default_pad+0x138>)
    12b0:	e056      	b.n	1360 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    12b2:	2000      	movs	r0, #0
    12b4:	e054      	b.n	1360 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    12b6:	4835      	ldr	r0, [pc, #212]	; (138c <_sercom_get_default_pad+0x13c>)
    12b8:	e052      	b.n	1360 <_sercom_get_default_pad+0x110>
    12ba:	4835      	ldr	r0, [pc, #212]	; (1390 <_sercom_get_default_pad+0x140>)
    12bc:	e050      	b.n	1360 <_sercom_get_default_pad+0x110>
    12be:	2901      	cmp	r1, #1
    12c0:	d006      	beq.n	12d0 <_sercom_get_default_pad+0x80>
    12c2:	2900      	cmp	r1, #0
    12c4:	d045      	beq.n	1352 <_sercom_get_default_pad+0x102>
    12c6:	2902      	cmp	r1, #2
    12c8:	d006      	beq.n	12d8 <_sercom_get_default_pad+0x88>
    12ca:	2903      	cmp	r1, #3
    12cc:	d006      	beq.n	12dc <_sercom_get_default_pad+0x8c>
    12ce:	e001      	b.n	12d4 <_sercom_get_default_pad+0x84>
    12d0:	4830      	ldr	r0, [pc, #192]	; (1394 <_sercom_get_default_pad+0x144>)
    12d2:	e045      	b.n	1360 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    12d4:	2000      	movs	r0, #0
    12d6:	e043      	b.n	1360 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    12d8:	482f      	ldr	r0, [pc, #188]	; (1398 <_sercom_get_default_pad+0x148>)
    12da:	e041      	b.n	1360 <_sercom_get_default_pad+0x110>
    12dc:	482f      	ldr	r0, [pc, #188]	; (139c <_sercom_get_default_pad+0x14c>)
    12de:	e03f      	b.n	1360 <_sercom_get_default_pad+0x110>
    12e0:	2901      	cmp	r1, #1
    12e2:	d006      	beq.n	12f2 <_sercom_get_default_pad+0xa2>
    12e4:	2900      	cmp	r1, #0
    12e6:	d036      	beq.n	1356 <_sercom_get_default_pad+0x106>
    12e8:	2902      	cmp	r1, #2
    12ea:	d006      	beq.n	12fa <_sercom_get_default_pad+0xaa>
    12ec:	2903      	cmp	r1, #3
    12ee:	d006      	beq.n	12fe <_sercom_get_default_pad+0xae>
    12f0:	e001      	b.n	12f6 <_sercom_get_default_pad+0xa6>
    12f2:	482b      	ldr	r0, [pc, #172]	; (13a0 <_sercom_get_default_pad+0x150>)
    12f4:	e034      	b.n	1360 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    12f6:	2000      	movs	r0, #0
    12f8:	e032      	b.n	1360 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    12fa:	482a      	ldr	r0, [pc, #168]	; (13a4 <_sercom_get_default_pad+0x154>)
    12fc:	e030      	b.n	1360 <_sercom_get_default_pad+0x110>
    12fe:	482a      	ldr	r0, [pc, #168]	; (13a8 <_sercom_get_default_pad+0x158>)
    1300:	e02e      	b.n	1360 <_sercom_get_default_pad+0x110>
    1302:	2901      	cmp	r1, #1
    1304:	d006      	beq.n	1314 <_sercom_get_default_pad+0xc4>
    1306:	2900      	cmp	r1, #0
    1308:	d027      	beq.n	135a <_sercom_get_default_pad+0x10a>
    130a:	2902      	cmp	r1, #2
    130c:	d006      	beq.n	131c <_sercom_get_default_pad+0xcc>
    130e:	2903      	cmp	r1, #3
    1310:	d006      	beq.n	1320 <_sercom_get_default_pad+0xd0>
    1312:	e001      	b.n	1318 <_sercom_get_default_pad+0xc8>
    1314:	4825      	ldr	r0, [pc, #148]	; (13ac <_sercom_get_default_pad+0x15c>)
    1316:	e023      	b.n	1360 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1318:	2000      	movs	r0, #0
    131a:	e021      	b.n	1360 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    131c:	4824      	ldr	r0, [pc, #144]	; (13b0 <_sercom_get_default_pad+0x160>)
    131e:	e01f      	b.n	1360 <_sercom_get_default_pad+0x110>
    1320:	4824      	ldr	r0, [pc, #144]	; (13b4 <_sercom_get_default_pad+0x164>)
    1322:	e01d      	b.n	1360 <_sercom_get_default_pad+0x110>
    1324:	2901      	cmp	r1, #1
    1326:	d006      	beq.n	1336 <_sercom_get_default_pad+0xe6>
    1328:	2900      	cmp	r1, #0
    132a:	d018      	beq.n	135e <_sercom_get_default_pad+0x10e>
    132c:	2902      	cmp	r1, #2
    132e:	d006      	beq.n	133e <_sercom_get_default_pad+0xee>
    1330:	2903      	cmp	r1, #3
    1332:	d006      	beq.n	1342 <_sercom_get_default_pad+0xf2>
    1334:	e001      	b.n	133a <_sercom_get_default_pad+0xea>
    1336:	4820      	ldr	r0, [pc, #128]	; (13b8 <_sercom_get_default_pad+0x168>)
    1338:	e012      	b.n	1360 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    133a:	2000      	movs	r0, #0
    133c:	e010      	b.n	1360 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    133e:	481f      	ldr	r0, [pc, #124]	; (13bc <_sercom_get_default_pad+0x16c>)
    1340:	e00e      	b.n	1360 <_sercom_get_default_pad+0x110>
    1342:	481f      	ldr	r0, [pc, #124]	; (13c0 <_sercom_get_default_pad+0x170>)
    1344:	e00c      	b.n	1360 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1346:	2000      	movs	r0, #0
    1348:	e00a      	b.n	1360 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    134a:	481e      	ldr	r0, [pc, #120]	; (13c4 <_sercom_get_default_pad+0x174>)
    134c:	e008      	b.n	1360 <_sercom_get_default_pad+0x110>
    134e:	2003      	movs	r0, #3
    1350:	e006      	b.n	1360 <_sercom_get_default_pad+0x110>
    1352:	481d      	ldr	r0, [pc, #116]	; (13c8 <_sercom_get_default_pad+0x178>)
    1354:	e004      	b.n	1360 <_sercom_get_default_pad+0x110>
    1356:	481d      	ldr	r0, [pc, #116]	; (13cc <_sercom_get_default_pad+0x17c>)
    1358:	e002      	b.n	1360 <_sercom_get_default_pad+0x110>
    135a:	481d      	ldr	r0, [pc, #116]	; (13d0 <_sercom_get_default_pad+0x180>)
    135c:	e000      	b.n	1360 <_sercom_get_default_pad+0x110>
    135e:	481d      	ldr	r0, [pc, #116]	; (13d4 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
    1360:	4770      	bx	lr
    1362:	46c0      	nop			; (mov r8, r8)
    1364:	42001000 	.word	0x42001000
    1368:	42000800 	.word	0x42000800
    136c:	42000c00 	.word	0x42000c00
    1370:	42001800 	.word	0x42001800
    1374:	42001c00 	.word	0x42001c00
    1378:	42001400 	.word	0x42001400
    137c:	00050003 	.word	0x00050003
    1380:	00060003 	.word	0x00060003
    1384:	00070003 	.word	0x00070003
    1388:	00010003 	.word	0x00010003
    138c:	001e0003 	.word	0x001e0003
    1390:	001f0003 	.word	0x001f0003
    1394:	00090003 	.word	0x00090003
    1398:	000a0003 	.word	0x000a0003
    139c:	000b0003 	.word	0x000b0003
    13a0:	00110003 	.word	0x00110003
    13a4:	00120003 	.word	0x00120003
    13a8:	00130003 	.word	0x00130003
    13ac:	000d0003 	.word	0x000d0003
    13b0:	000e0003 	.word	0x000e0003
    13b4:	000f0003 	.word	0x000f0003
    13b8:	00170003 	.word	0x00170003
    13bc:	00180003 	.word	0x00180003
    13c0:	00190003 	.word	0x00190003
    13c4:	00040003 	.word	0x00040003
    13c8:	00080003 	.word	0x00080003
    13cc:	00100003 	.word	0x00100003
    13d0:	000c0003 	.word	0x000c0003
    13d4:	00160003 	.word	0x00160003

000013d8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    13d8:	b530      	push	{r4, r5, lr}
    13da:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    13dc:	4b0c      	ldr	r3, [pc, #48]	; (1410 <_sercom_get_sercom_inst_index+0x38>)
    13de:	466a      	mov	r2, sp
    13e0:	cb32      	ldmia	r3!, {r1, r4, r5}
    13e2:	c232      	stmia	r2!, {r1, r4, r5}
    13e4:	cb32      	ldmia	r3!, {r1, r4, r5}
    13e6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    13e8:	9b00      	ldr	r3, [sp, #0]
    13ea:	4283      	cmp	r3, r0
    13ec:	d006      	beq.n	13fc <_sercom_get_sercom_inst_index+0x24>
    13ee:	2301      	movs	r3, #1
    13f0:	009a      	lsls	r2, r3, #2
    13f2:	4669      	mov	r1, sp
    13f4:	5852      	ldr	r2, [r2, r1]
    13f6:	4282      	cmp	r2, r0
    13f8:	d103      	bne.n	1402 <_sercom_get_sercom_inst_index+0x2a>
    13fa:	e000      	b.n	13fe <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    13fc:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    13fe:	b2d8      	uxtb	r0, r3
    1400:	e003      	b.n	140a <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1402:	3301      	adds	r3, #1
    1404:	2b06      	cmp	r3, #6
    1406:	d1f3      	bne.n	13f0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1408:	2000      	movs	r0, #0
}
    140a:	b007      	add	sp, #28
    140c:	bd30      	pop	{r4, r5, pc}
    140e:	46c0      	nop			; (mov r8, r8)
    1410:	00002940 	.word	0x00002940

00001414 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    1414:	b570      	push	{r4, r5, r6, lr}
    1416:	b082      	sub	sp, #8
    1418:	0006      	movs	r6, r0
    141a:	000d      	movs	r5, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    141c:	2200      	movs	r2, #0
    141e:	466b      	mov	r3, sp
    1420:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    1422:	6804      	ldr	r4, [r0, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    1424:	69e3      	ldr	r3, [r4, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    1426:	2b00      	cmp	r3, #0
    1428:	d1fc      	bne.n	1424 <spi_set_baudrate+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    142a:	338f      	adds	r3, #143	; 0x8f
    142c:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    142e:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1430:	6823      	ldr	r3, [r4, #0]
    1432:	2202      	movs	r2, #2
    1434:	4393      	bics	r3, r2
    1436:	6023      	str	r3, [r4, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1438:	6830      	ldr	r0, [r6, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    143a:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    143c:	2b00      	cmp	r3, #0
    143e:	d1fc      	bne.n	143a <spi_set_baudrate+0x26>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1440:	4b12      	ldr	r3, [pc, #72]	; (148c <spi_set_baudrate+0x78>)
    1442:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1444:	3014      	adds	r0, #20
    1446:	b2c0      	uxtb	r0, r0
    1448:	4b11      	ldr	r3, [pc, #68]	; (1490 <spi_set_baudrate+0x7c>)
    144a:	4798      	blx	r3
    144c:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    144e:	466b      	mov	r3, sp
    1450:	1d9a      	adds	r2, r3, #6
    1452:	0028      	movs	r0, r5
    1454:	4b0f      	ldr	r3, [pc, #60]	; (1494 <spi_set_baudrate+0x80>)
    1456:	4798      	blx	r3
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    1458:	2317      	movs	r3, #23

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    145a:	2800      	cmp	r0, #0
    145c:	d112      	bne.n	1484 <spi_set_baudrate+0x70>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
	}

	spi_module->BAUD.reg = (uint8_t)baud;
    145e:	466b      	mov	r3, sp
    1460:	3306      	adds	r3, #6
    1462:	781b      	ldrb	r3, [r3, #0]
    1464:	7323      	strb	r3, [r4, #12]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1466:	6833      	ldr	r3, [r6, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    1468:	69da      	ldr	r2, [r3, #28]

	while (spi_is_syncing(module)) {
    146a:	2a00      	cmp	r2, #0
    146c:	d1fc      	bne.n	1468 <spi_set_baudrate+0x54>
    146e:	69da      	ldr	r2, [r3, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    1470:	2a00      	cmp	r2, #0
    1472:	d1fc      	bne.n	146e <spi_set_baudrate+0x5a>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1474:	6819      	ldr	r1, [r3, #0]
    1476:	3202      	adds	r2, #2
    1478:	430a      	orrs	r2, r1
    147a:	601a      	str	r2, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    147c:	6832      	ldr	r2, [r6, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    147e:	69d3      	ldr	r3, [r2, #28]
	}

	/* Enable the module */
	spi_enable(module);

	while (spi_is_syncing(module)) {
    1480:	2b00      	cmp	r3, #0
    1482:	d1fc      	bne.n	147e <spi_set_baudrate+0x6a>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    1484:	0018      	movs	r0, r3
    1486:	b002      	add	sp, #8
    1488:	bd70      	pop	{r4, r5, r6, pc}
    148a:	46c0      	nop			; (mov r8, r8)
    148c:	000013d9 	.word	0x000013d9
    1490:	000020c9 	.word	0x000020c9
    1494:	00001015 	.word	0x00001015

00001498 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1498:	b5f0      	push	{r4, r5, r6, r7, lr}
    149a:	4657      	mov	r7, sl
    149c:	464e      	mov	r6, r9
    149e:	4645      	mov	r5, r8
    14a0:	b4e0      	push	{r5, r6, r7}
    14a2:	b088      	sub	sp, #32
    14a4:	4680      	mov	r8, r0
    14a6:	000e      	movs	r6, r1
    14a8:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    14aa:	0003      	movs	r3, r0
    14ac:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    14ae:	680b      	ldr	r3, [r1, #0]
    14b0:	079b      	lsls	r3, r3, #30
    14b2:	d400      	bmi.n	14b6 <spi_init+0x1e>
    14b4:	e0a6      	b.n	1604 <spi_init+0x16c>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    14b6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    14b8:	9303      	str	r3, [sp, #12]
    14ba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    14bc:	9304      	str	r3, [sp, #16]
    14be:	6b13      	ldr	r3, [r2, #48]	; 0x30
    14c0:	9305      	str	r3, [sp, #20]
    14c2:	6b53      	ldr	r3, [r2, #52]	; 0x34
    14c4:	9306      	str	r3, [sp, #24]
    14c6:	2700      	movs	r7, #0
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    14c8:	231f      	movs	r3, #31
    14ca:	4699      	mov	r9, r3
    14cc:	b2f9      	uxtb	r1, r7
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    14ce:	00bb      	lsls	r3, r7, #2
    14d0:	aa03      	add	r2, sp, #12
    14d2:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    14d4:	2800      	cmp	r0, #0
    14d6:	d102      	bne.n	14de <spi_init+0x46>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    14d8:	0030      	movs	r0, r6
    14da:	4bac      	ldr	r3, [pc, #688]	; (178c <spi_init+0x2f4>)
    14dc:	4798      	blx	r3
		}

		if (current_pinmux == PINMUX_UNUSED) {
    14de:	1c43      	adds	r3, r0, #1
    14e0:	d027      	beq.n	1532 <spi_init+0x9a>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    14e2:	0402      	lsls	r2, r0, #16
    14e4:	0c13      	lsrs	r3, r2, #16
    14e6:	469c      	mov	ip, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    14e8:	0c00      	lsrs	r0, r0, #16
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    14ea:	b2c1      	uxtb	r1, r0
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    14ec:	2500      	movs	r5, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    14ee:	0603      	lsls	r3, r0, #24
    14f0:	d403      	bmi.n	14fa <spi_init+0x62>
		return &(ports[port_index]->Group[group_index]);
    14f2:	094b      	lsrs	r3, r1, #5
    14f4:	01db      	lsls	r3, r3, #7
    14f6:	4aa6      	ldr	r2, [pc, #664]	; (1790 <spi_init+0x2f8>)
    14f8:	189d      	adds	r5, r3, r2
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);
    14fa:	464b      	mov	r3, r9
    14fc:	400b      	ands	r3, r1

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    14fe:	18e8      	adds	r0, r5, r3
    1500:	3040      	adds	r0, #64	; 0x40
    1502:	7800      	ldrb	r0, [r0, #0]
    1504:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    1506:	2080      	movs	r0, #128	; 0x80
		const uint8_t gpio_pin)
{
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_index = (gpio_pin % 32);

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    1508:	4652      	mov	r2, sl
    150a:	07d2      	lsls	r2, r2, #31
    150c:	d50a      	bpl.n	1524 <spi_init+0x8c>
		return SYSTEM_PINMUX_GPIO;
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    150e:	085b      	lsrs	r3, r3, #1
    1510:	18eb      	adds	r3, r5, r3
    1512:	3330      	adds	r3, #48	; 0x30
    1514:	7818      	ldrb	r0, [r3, #0]
    1516:	b2c0      	uxtb	r0, r0

	if (pin_index & 1) {
    1518:	07cb      	lsls	r3, r1, #31
    151a:	d501      	bpl.n	1520 <spi_init+0x88>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    151c:	0900      	lsrs	r0, r0, #4
    151e:	e001      	b.n	1524 <spi_init+0x8c>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    1520:	230f      	movs	r3, #15
    1522:	4018      	ands	r0, r3

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    1524:	4584      	cmp	ip, r0
    1526:	d004      	beq.n	1532 <spi_init+0x9a>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
    1528:	2300      	movs	r3, #0
    152a:	4642      	mov	r2, r8
    152c:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
    152e:	201c      	movs	r0, #28
    1530:	e126      	b.n	1780 <spi_init+0x2e8>
    1532:	3701      	adds	r7, #1
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1534:	2f04      	cmp	r7, #4
    1536:	d1c9      	bne.n	14cc <spi_init+0x34>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    1538:	2013      	movs	r0, #19
    153a:	4b96      	ldr	r3, [pc, #600]	; (1794 <spi_init+0x2fc>)
    153c:	4798      	blx	r3
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    153e:	7823      	ldrb	r3, [r4, #0]
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    1540:	2700      	movs	r7, #0
	uint32_t addr = 0;
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    1542:	2b01      	cmp	r3, #1
    1544:	d112      	bne.n	156c <spi_init+0xd4>
		enum status_code error_code = _sercom_get_sync_baud_val(
    1546:	aa02      	add	r2, sp, #8
    1548:	0001      	movs	r1, r0
    154a:	69a0      	ldr	r0, [r4, #24]
    154c:	4b92      	ldr	r3, [pc, #584]	; (1798 <spi_init+0x300>)
    154e:	4798      	blx	r3
    1550:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    1552:	2017      	movs	r0, #23
	if (config->mode == SPI_MODE_MASTER) {
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    1554:	2b00      	cmp	r3, #0
    1556:	d000      	beq.n	155a <spi_init+0xc2>
    1558:	e112      	b.n	1780 <spi_init+0x2e8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    155a:	7b33      	ldrb	r3, [r6, #12]
    155c:	b2db      	uxtb	r3, r3
    155e:	aa02      	add	r2, sp, #8
    1560:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    1562:	3005      	adds	r0, #5
		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    1564:	429a      	cmp	r2, r3
    1566:	d000      	beq.n	156a <spi_init+0xd2>
    1568:	e10a      	b.n	1780 <spi_init+0x2e8>
			return STATUS_ERR_DENIED;
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    156a:	370c      	adds	r7, #12
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    156c:	7825      	ldrb	r5, [r4, #0]
    156e:	2d00      	cmp	r5, #0
    1570:	d114      	bne.n	159c <spi_init+0x104>
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
    1572:	6832      	ldr	r2, [r6, #0]
    1574:	7fe3      	ldrb	r3, [r4, #31]
    1576:	041b      	lsls	r3, r3, #16
    1578:	7fa1      	ldrb	r1, [r4, #30]
    157a:	430b      	orrs	r3, r1
			return STATUS_ERR_DENIED;
    157c:	201c      	movs	r0, #28
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
    157e:	4293      	cmp	r3, r2
    1580:	d000      	beq.n	1584 <spi_init+0xec>
    1582:	e0fd      	b.n	1780 <spi_init+0x2e8>

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
    1584:	69a1      	ldr	r1, [r4, #24]

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
    1586:	8ba3      	ldrh	r3, [r4, #28]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
			return STATUS_ERR_DENIED;
		}

		if (config->mode_specific.slave.preload_enable) {
    1588:	2220      	movs	r2, #32
    158a:	5ca2      	ldrb	r2, [r4, r2]
    158c:	2a00      	cmp	r2, #0
    158e:	d001      	beq.n	1594 <spi_init+0xfc>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    1590:	2240      	movs	r2, #64	; 0x40
    1592:	4313      	orrs	r3, r2
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
    1594:	2208      	movs	r2, #8
    1596:	430a      	orrs	r2, r1
    1598:	4317      	orrs	r7, r2
    159a:	e000      	b.n	159e <spi_init+0x106>
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
    159c:	2300      	movs	r3, #0

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    159e:	6862      	ldr	r2, [r4, #4]
    15a0:	68a1      	ldr	r1, [r4, #8]
    15a2:	430a      	orrs	r2, r1
    15a4:	68e1      	ldr	r1, [r4, #12]
    15a6:	430a      	orrs	r2, r1
    15a8:	433a      	orrs	r2, r7

	/* Set SPI character size */
	ctrlb |= config->character_size;
    15aa:	7c21      	ldrb	r1, [r4, #16]
    15ac:	430b      	orrs	r3, r1

	if (config->run_in_standby) {
    15ae:	7c61      	ldrb	r1, [r4, #17]
    15b0:	2900      	cmp	r1, #0
    15b2:	d001      	beq.n	15b8 <spi_init+0x120>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    15b4:	2180      	movs	r1, #128	; 0x80
    15b6:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
    15b8:	7ca1      	ldrb	r1, [r4, #18]
    15ba:	2900      	cmp	r1, #0
    15bc:	d002      	beq.n	15c4 <spi_init+0x12c>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    15be:	2180      	movs	r1, #128	; 0x80
    15c0:	0289      	lsls	r1, r1, #10
    15c2:	430b      	orrs	r3, r1
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    15c4:	7ce1      	ldrb	r1, [r4, #19]
    15c6:	2900      	cmp	r1, #0
    15c8:	d002      	beq.n	15d0 <spi_init+0x138>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    15ca:	2180      	movs	r1, #128	; 0x80
    15cc:	0089      	lsls	r1, r1, #2
    15ce:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    15d0:	7d21      	ldrb	r1, [r4, #20]
    15d2:	2900      	cmp	r1, #0
    15d4:	d002      	beq.n	15dc <spi_init+0x144>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    15d6:	2180      	movs	r1, #128	; 0x80
    15d8:	0189      	lsls	r1, r1, #6
    15da:	430b      	orrs	r3, r1
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    15dc:	6830      	ldr	r0, [r6, #0]
    15de:	2102      	movs	r1, #2
    15e0:	430a      	orrs	r2, r1
    15e2:	4282      	cmp	r2, r0
    15e4:	d109      	bne.n	15fa <spi_init+0x162>
			spi_module->CTRLB.reg == ctrlb) {
    15e6:	6872      	ldr	r2, [r6, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    15e8:	429a      	cmp	r2, r3
    15ea:	d106      	bne.n	15fa <spi_init+0x162>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
    15ec:	4643      	mov	r3, r8
    15ee:	715d      	strb	r5, [r3, #5]
		module->character_size = config->character_size;
    15f0:	7c23      	ldrb	r3, [r4, #16]
    15f2:	4642      	mov	r2, r8
    15f4:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
    15f6:	2000      	movs	r0, #0
    15f8:	e0c2      	b.n	1780 <spi_init+0x2e8>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    15fa:	2300      	movs	r3, #0
    15fc:	4642      	mov	r2, r8
    15fe:	6013      	str	r3, [r2, #0]

	return STATUS_ERR_DENIED;
    1600:	201c      	movs	r0, #28
    1602:	e0bd      	b.n	1780 <spi_init+0x2e8>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1604:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1606:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1608:	07db      	lsls	r3, r3, #31
    160a:	d500      	bpl.n	160e <spi_init+0x176>
    160c:	e0b8      	b.n	1780 <spi_init+0x2e8>
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    160e:	0008      	movs	r0, r1
    1610:	4b62      	ldr	r3, [pc, #392]	; (179c <spi_init+0x304>)
    1612:	4798      	blx	r3
    1614:	4962      	ldr	r1, [pc, #392]	; (17a0 <spi_init+0x308>)
    1616:	6a0a      	ldr	r2, [r1, #32]
    1618:	1c85      	adds	r5, r0, #2
    161a:	2301      	movs	r3, #1
    161c:	40ab      	lsls	r3, r5
    161e:	4313      	orrs	r3, r2
    1620:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    1622:	a907      	add	r1, sp, #28
    1624:	2724      	movs	r7, #36	; 0x24
    1626:	5de3      	ldrb	r3, [r4, r7]
    1628:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    162a:	3014      	adds	r0, #20
    162c:	b2c5      	uxtb	r5, r0
    162e:	0028      	movs	r0, r5
    1630:	4b5c      	ldr	r3, [pc, #368]	; (17a4 <spi_init+0x30c>)
    1632:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1634:	0028      	movs	r0, r5
    1636:	4b5c      	ldr	r3, [pc, #368]	; (17a8 <spi_init+0x310>)
    1638:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    163a:	5de0      	ldrb	r0, [r4, r7]
    163c:	2100      	movs	r1, #0
    163e:	4b5b      	ldr	r3, [pc, #364]	; (17ac <spi_init+0x314>)
    1640:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    1642:	7823      	ldrb	r3, [r4, #0]
    1644:	2b01      	cmp	r3, #1
    1646:	d103      	bne.n	1650 <spi_init+0x1b8>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1648:	6832      	ldr	r2, [r6, #0]
    164a:	330b      	adds	r3, #11
    164c:	4313      	orrs	r3, r2
    164e:	6033      	str	r3, [r6, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    1650:	7823      	ldrb	r3, [r4, #0]
    1652:	2b00      	cmp	r3, #0
    1654:	d103      	bne.n	165e <spi_init+0x1c6>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    1656:	6832      	ldr	r2, [r6, #0]
    1658:	3308      	adds	r3, #8
    165a:	4313      	orrs	r3, r2
    165c:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    165e:	4643      	mov	r3, r8
    1660:	681e      	ldr	r6, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1662:	ab02      	add	r3, sp, #8
    1664:	2280      	movs	r2, #128	; 0x80
    1666:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1668:	2200      	movs	r2, #0
    166a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    166c:	2101      	movs	r1, #1
    166e:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    1670:	70da      	strb	r2, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    1672:	7823      	ldrb	r3, [r4, #0]
    1674:	2b00      	cmp	r3, #0
    1676:	d101      	bne.n	167c <spi_init+0x1e4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1678:	ab02      	add	r3, sp, #8
    167a:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    167c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    167e:	9303      	str	r3, [sp, #12]
    1680:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1682:	9304      	str	r3, [sp, #16]
    1684:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1686:	9305      	str	r3, [sp, #20]
    1688:	6b63      	ldr	r3, [r4, #52]	; 0x34
    168a:	9306      	str	r3, [sp, #24]
    168c:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    168e:	ad02      	add	r5, sp, #8
    1690:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1692:	00bb      	lsls	r3, r7, #2
    1694:	aa03      	add	r2, sp, #12
    1696:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    1698:	2800      	cmp	r0, #0
    169a:	d102      	bne.n	16a2 <spi_init+0x20a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    169c:	0030      	movs	r0, r6
    169e:	4b3b      	ldr	r3, [pc, #236]	; (178c <spi_init+0x2f4>)
    16a0:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    16a2:	1c43      	adds	r3, r0, #1
    16a4:	d005      	beq.n	16b2 <spi_init+0x21a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    16a6:	7028      	strb	r0, [r5, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    16a8:	0c00      	lsrs	r0, r0, #16
    16aa:	b2c0      	uxtb	r0, r0
    16ac:	0029      	movs	r1, r5
    16ae:	4b40      	ldr	r3, [pc, #256]	; (17b0 <spi_init+0x318>)
    16b0:	4798      	blx	r3
    16b2:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    16b4:	2f04      	cmp	r7, #4
    16b6:	d1eb      	bne.n	1690 <spi_init+0x1f8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    16b8:	7823      	ldrb	r3, [r4, #0]
    16ba:	4642      	mov	r2, r8
    16bc:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
    16be:	7c23      	ldrb	r3, [r4, #16]
    16c0:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
    16c2:	7ca3      	ldrb	r3, [r4, #18]
    16c4:	71d3      	strb	r3, [r2, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    16c6:	7d23      	ldrb	r3, [r4, #20]
    16c8:	7213      	strb	r3, [r2, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    16ca:	2200      	movs	r2, #0
    16cc:	466b      	mov	r3, sp
    16ce:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    16d0:	7823      	ldrb	r3, [r4, #0]
    16d2:	2b01      	cmp	r3, #1
    16d4:	d115      	bne.n	1702 <spi_init+0x26a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    16d6:	4643      	mov	r3, r8
    16d8:	6818      	ldr	r0, [r3, #0]
    16da:	4b30      	ldr	r3, [pc, #192]	; (179c <spi_init+0x304>)
    16dc:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    16de:	3014      	adds	r0, #20
    16e0:	b2c0      	uxtb	r0, r0
    16e2:	4b2c      	ldr	r3, [pc, #176]	; (1794 <spi_init+0x2fc>)
    16e4:	4798      	blx	r3
    16e6:	0001      	movs	r1, r0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    16e8:	466b      	mov	r3, sp
    16ea:	1d9a      	adds	r2, r3, #6
    16ec:	69a0      	ldr	r0, [r4, #24]
    16ee:	4b2a      	ldr	r3, [pc, #168]	; (1798 <spi_init+0x300>)
    16f0:	4798      	blx	r3
    16f2:	0003      	movs	r3, r0
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    16f4:	2017      	movs	r0, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    16f6:	2b00      	cmp	r3, #0
    16f8:	d142      	bne.n	1780 <spi_init+0x2e8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    16fa:	466b      	mov	r3, sp
    16fc:	3306      	adds	r3, #6
    16fe:	781b      	ldrb	r3, [r3, #0]
    1700:	7333      	strb	r3, [r6, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    1702:	7823      	ldrb	r3, [r4, #0]
    1704:	2b00      	cmp	r3, #0
    1706:	d10f      	bne.n	1728 <spi_init+0x290>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    1708:	69a7      	ldr	r7, [r4, #24]

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    170a:	8ba3      	ldrh	r3, [r4, #28]

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    170c:	6a70      	ldr	r0, [r6, #36]	; 0x24
    170e:	7fe1      	ldrb	r1, [r4, #31]
    1710:	0409      	lsls	r1, r1, #16
    1712:	7fa5      	ldrb	r5, [r4, #30]
    1714:	4329      	orrs	r1, r5
    1716:	4301      	orrs	r1, r0
    1718:	6271      	str	r1, [r6, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
    171a:	2220      	movs	r2, #32
    171c:	5ca2      	ldrb	r2, [r4, r2]
    171e:	2a00      	cmp	r2, #0
    1720:	d004      	beq.n	172c <spi_init+0x294>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    1722:	2140      	movs	r1, #64	; 0x40
    1724:	430b      	orrs	r3, r1
    1726:	e001      	b.n	172c <spi_init+0x294>
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    1728:	2300      	movs	r3, #0
#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    172a:	2700      	movs	r7, #0

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    172c:	6862      	ldr	r2, [r4, #4]
    172e:	68a1      	ldr	r1, [r4, #8]
    1730:	430a      	orrs	r2, r1
    1732:	68e1      	ldr	r1, [r4, #12]
    1734:	430a      	orrs	r2, r1
    1736:	433a      	orrs	r2, r7

	/* Set SPI character size */
	ctrlb |= config->character_size;
    1738:	7c21      	ldrb	r1, [r4, #16]
    173a:	430b      	orrs	r3, r1

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    173c:	7c61      	ldrb	r1, [r4, #17]
    173e:	2900      	cmp	r1, #0
    1740:	d103      	bne.n	174a <spi_init+0x2b2>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1742:	491c      	ldr	r1, [pc, #112]	; (17b4 <spi_init+0x31c>)
    1744:	7889      	ldrb	r1, [r1, #2]
    1746:	0789      	lsls	r1, r1, #30
    1748:	d501      	bpl.n	174e <spi_init+0x2b6>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    174a:	2180      	movs	r1, #128	; 0x80
    174c:	430a      	orrs	r2, r1
	}

	if (config->receiver_enable) {
    174e:	7ca1      	ldrb	r1, [r4, #18]
    1750:	2900      	cmp	r1, #0
    1752:	d002      	beq.n	175a <spi_init+0x2c2>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1754:	2180      	movs	r1, #128	; 0x80
    1756:	0289      	lsls	r1, r1, #10
    1758:	430b      	orrs	r3, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    175a:	7ce1      	ldrb	r1, [r4, #19]
    175c:	2900      	cmp	r1, #0
    175e:	d002      	beq.n	1766 <spi_init+0x2ce>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1760:	2180      	movs	r1, #128	; 0x80
    1762:	0089      	lsls	r1, r1, #2
    1764:	430b      	orrs	r3, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    1766:	7d21      	ldrb	r1, [r4, #20]
    1768:	2900      	cmp	r1, #0
    176a:	d002      	beq.n	1772 <spi_init+0x2da>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    176c:	2180      	movs	r1, #128	; 0x80
    176e:	0189      	lsls	r1, r1, #6
    1770:	430b      	orrs	r3, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    1772:	6831      	ldr	r1, [r6, #0]
    1774:	430a      	orrs	r2, r1
    1776:	6032      	str	r2, [r6, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    1778:	6872      	ldr	r2, [r6, #4]
    177a:	4313      	orrs	r3, r2
    177c:	6073      	str	r3, [r6, #4]

	return STATUS_OK;
    177e:	2000      	movs	r0, #0
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1780:	b008      	add	sp, #32
    1782:	bc1c      	pop	{r2, r3, r4}
    1784:	4690      	mov	r8, r2
    1786:	4699      	mov	r9, r3
    1788:	46a2      	mov	sl, r4
    178a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    178c:	00001251 	.word	0x00001251
    1790:	41004400 	.word	0x41004400
    1794:	000020c9 	.word	0x000020c9
    1798:	00001015 	.word	0x00001015
    179c:	000013d9 	.word	0x000013d9
    17a0:	40000400 	.word	0x40000400
    17a4:	000020ad 	.word	0x000020ad
    17a8:	00002021 	.word	0x00002021
    17ac:	00001205 	.word	0x00001205
    17b0:	000021a5 	.word	0x000021a5
    17b4:	41002000 	.word	0x41002000

000017b8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    17b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ba:	465f      	mov	r7, fp
    17bc:	4656      	mov	r6, sl
    17be:	464d      	mov	r5, r9
    17c0:	4644      	mov	r4, r8
    17c2:	b4f0      	push	{r4, r5, r6, r7}
    17c4:	b091      	sub	sp, #68	; 0x44
    17c6:	0005      	movs	r5, r0
    17c8:	000c      	movs	r4, r1
    17ca:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    17cc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    17ce:	0008      	movs	r0, r1
    17d0:	4bb9      	ldr	r3, [pc, #740]	; (1ab8 <usart_init+0x300>)
    17d2:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    17d4:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    17d6:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    17d8:	07d2      	lsls	r2, r2, #31
    17da:	d500      	bpl.n	17de <usart_init+0x26>
    17dc:	e164      	b.n	1aa8 <usart_init+0x2f0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    17de:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    17e0:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    17e2:	0792      	lsls	r2, r2, #30
    17e4:	d500      	bpl.n	17e8 <usart_init+0x30>
    17e6:	e15f      	b.n	1aa8 <usart_init+0x2f0>
    17e8:	49b4      	ldr	r1, [pc, #720]	; (1abc <usart_init+0x304>)
    17ea:	6a0a      	ldr	r2, [r1, #32]
    17ec:	1c87      	adds	r7, r0, #2
    17ee:	3b1b      	subs	r3, #27
    17f0:	40bb      	lsls	r3, r7
    17f2:	4313      	orrs	r3, r2
    17f4:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    17f6:	a90f      	add	r1, sp, #60	; 0x3c
    17f8:	272d      	movs	r7, #45	; 0x2d
    17fa:	5df3      	ldrb	r3, [r6, r7]
    17fc:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    17fe:	3014      	adds	r0, #20
    1800:	b2c3      	uxtb	r3, r0
    1802:	9302      	str	r3, [sp, #8]
    1804:	0018      	movs	r0, r3
    1806:	4bae      	ldr	r3, [pc, #696]	; (1ac0 <usart_init+0x308>)
    1808:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    180a:	9802      	ldr	r0, [sp, #8]
    180c:	4bad      	ldr	r3, [pc, #692]	; (1ac4 <usart_init+0x30c>)
    180e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1810:	5df0      	ldrb	r0, [r6, r7]
    1812:	2100      	movs	r1, #0
    1814:	4bac      	ldr	r3, [pc, #688]	; (1ac8 <usart_init+0x310>)
    1816:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    1818:	7af3      	ldrb	r3, [r6, #11]
    181a:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    181c:	2324      	movs	r3, #36	; 0x24
    181e:	5cf3      	ldrb	r3, [r6, r3]
    1820:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1822:	2325      	movs	r3, #37	; 0x25
    1824:	5cf3      	ldrb	r3, [r6, r3]
    1826:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    1828:	7ef3      	ldrb	r3, [r6, #27]
    182a:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    182c:	7f33      	ldrb	r3, [r6, #28]
    182e:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1830:	682b      	ldr	r3, [r5, #0]
    1832:	4699      	mov	r9, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1834:	0018      	movs	r0, r3
    1836:	4ba0      	ldr	r3, [pc, #640]	; (1ab8 <usart_init+0x300>)
    1838:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    183a:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    183c:	2200      	movs	r2, #0
    183e:	230e      	movs	r3, #14
    1840:	a906      	add	r1, sp, #24
    1842:	468c      	mov	ip, r1
    1844:	4463      	add	r3, ip
    1846:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    1848:	8a32      	ldrh	r2, [r6, #16]
    184a:	9202      	str	r2, [sp, #8]
    184c:	2380      	movs	r3, #128	; 0x80
    184e:	01db      	lsls	r3, r3, #7
    1850:	429a      	cmp	r2, r3
    1852:	d01a      	beq.n	188a <usart_init+0xd2>
    1854:	d804      	bhi.n	1860 <usart_init+0xa8>
    1856:	2380      	movs	r3, #128	; 0x80
    1858:	019b      	lsls	r3, r3, #6
    185a:	429a      	cmp	r2, r3
    185c:	d00b      	beq.n	1876 <usart_init+0xbe>
    185e:	e104      	b.n	1a6a <usart_init+0x2b2>
    1860:	23c0      	movs	r3, #192	; 0xc0
    1862:	01db      	lsls	r3, r3, #7
    1864:	9a02      	ldr	r2, [sp, #8]
    1866:	429a      	cmp	r2, r3
    1868:	d00a      	beq.n	1880 <usart_init+0xc8>
    186a:	2380      	movs	r3, #128	; 0x80
    186c:	021b      	lsls	r3, r3, #8
    186e:	429a      	cmp	r2, r3
    1870:	d100      	bne.n	1874 <usart_init+0xbc>
    1872:	e0ff      	b.n	1a74 <usart_init+0x2bc>
    1874:	e0f9      	b.n	1a6a <usart_init+0x2b2>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1876:	2310      	movs	r3, #16
    1878:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    187a:	3b0f      	subs	r3, #15
    187c:	9307      	str	r3, [sp, #28]
    187e:	e0fd      	b.n	1a7c <usart_init+0x2c4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1880:	2308      	movs	r3, #8
    1882:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1884:	3b07      	subs	r3, #7
    1886:	9307      	str	r3, [sp, #28]
    1888:	e0f8      	b.n	1a7c <usart_init+0x2c4>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    188a:	6833      	ldr	r3, [r6, #0]
    188c:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    188e:	68f3      	ldr	r3, [r6, #12]
    1890:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1892:	6973      	ldr	r3, [r6, #20]
    1894:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1896:	7e33      	ldrb	r3, [r6, #24]
    1898:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    189a:	2326      	movs	r3, #38	; 0x26
    189c:	5cf3      	ldrb	r3, [r6, r3]
    189e:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    18a0:	6873      	ldr	r3, [r6, #4]
    18a2:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    18a4:	2b00      	cmp	r3, #0
    18a6:	d015      	beq.n	18d4 <usart_init+0x11c>
    18a8:	2380      	movs	r3, #128	; 0x80
    18aa:	055b      	lsls	r3, r3, #21
    18ac:	459a      	cmp	sl, r3
    18ae:	d136      	bne.n	191e <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    18b0:	2327      	movs	r3, #39	; 0x27
    18b2:	5cf3      	ldrb	r3, [r6, r3]
    18b4:	2b00      	cmp	r3, #0
    18b6:	d136      	bne.n	1926 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    18b8:	6a33      	ldr	r3, [r6, #32]
    18ba:	001f      	movs	r7, r3
    18bc:	b2c0      	uxtb	r0, r0
    18be:	4b83      	ldr	r3, [pc, #524]	; (1acc <usart_init+0x314>)
    18c0:	4798      	blx	r3
    18c2:	0001      	movs	r1, r0
    18c4:	220e      	movs	r2, #14
    18c6:	ab06      	add	r3, sp, #24
    18c8:	469c      	mov	ip, r3
    18ca:	4462      	add	r2, ip
    18cc:	0038      	movs	r0, r7
    18ce:	4b80      	ldr	r3, [pc, #512]	; (1ad0 <usart_init+0x318>)
    18d0:	4798      	blx	r3
    18d2:	e025      	b.n	1920 <usart_init+0x168>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    18d4:	2308      	movs	r3, #8
    18d6:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    18d8:	2300      	movs	r3, #0
    18da:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    18dc:	2327      	movs	r3, #39	; 0x27
    18de:	5cf3      	ldrb	r3, [r6, r3]
    18e0:	2b00      	cmp	r3, #0
    18e2:	d00b      	beq.n	18fc <usart_init+0x144>
				status_code =
    18e4:	9b06      	ldr	r3, [sp, #24]
    18e6:	9300      	str	r3, [sp, #0]
    18e8:	9b07      	ldr	r3, [sp, #28]
    18ea:	220e      	movs	r2, #14
    18ec:	a906      	add	r1, sp, #24
    18ee:	468c      	mov	ip, r1
    18f0:	4462      	add	r2, ip
    18f2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    18f4:	6a30      	ldr	r0, [r6, #32]
    18f6:	4f77      	ldr	r7, [pc, #476]	; (1ad4 <usart_init+0x31c>)
    18f8:	47b8      	blx	r7
    18fa:	e011      	b.n	1920 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    18fc:	6a33      	ldr	r3, [r6, #32]
    18fe:	001f      	movs	r7, r3
    1900:	b2c0      	uxtb	r0, r0
    1902:	4b72      	ldr	r3, [pc, #456]	; (1acc <usart_init+0x314>)
    1904:	4798      	blx	r3
    1906:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    1908:	9b06      	ldr	r3, [sp, #24]
    190a:	9300      	str	r3, [sp, #0]
    190c:	9b07      	ldr	r3, [sp, #28]
    190e:	220e      	movs	r2, #14
    1910:	a806      	add	r0, sp, #24
    1912:	4684      	mov	ip, r0
    1914:	4462      	add	r2, ip
    1916:	0038      	movs	r0, r7
    1918:	4f6e      	ldr	r7, [pc, #440]	; (1ad4 <usart_init+0x31c>)
    191a:	47b8      	blx	r7
    191c:	e000      	b.n	1920 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    191e:	2000      	movs	r0, #0
    1920:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    1922:	d000      	beq.n	1926 <usart_init+0x16e>
    1924:	e0c0      	b.n	1aa8 <usart_init+0x2f0>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    1926:	7e73      	ldrb	r3, [r6, #25]
    1928:	2b00      	cmp	r3, #0
    192a:	d002      	beq.n	1932 <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    192c:	7eb3      	ldrb	r3, [r6, #26]
    192e:	464a      	mov	r2, r9
    1930:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1932:	682a      	ldr	r2, [r5, #0]
    1934:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1936:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1938:	2b00      	cmp	r3, #0
    193a:	d1fc      	bne.n	1936 <usart_init+0x17e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    193c:	330e      	adds	r3, #14
    193e:	aa06      	add	r2, sp, #24
    1940:	4694      	mov	ip, r2
    1942:	4463      	add	r3, ip
    1944:	881b      	ldrh	r3, [r3, #0]
    1946:	464a      	mov	r2, r9
    1948:	8193      	strh	r3, [r2, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    194a:	9b04      	ldr	r3, [sp, #16]
    194c:	465a      	mov	r2, fp
    194e:	4313      	orrs	r3, r2
    1950:	9a03      	ldr	r2, [sp, #12]
    1952:	4313      	orrs	r3, r2
    1954:	4652      	mov	r2, sl
    1956:	4313      	orrs	r3, r2
    1958:	433b      	orrs	r3, r7
    195a:	4642      	mov	r2, r8
    195c:	0212      	lsls	r2, r2, #8
    195e:	4313      	orrs	r3, r2
    1960:	9a05      	ldr	r2, [sp, #20]
    1962:	0757      	lsls	r7, r2, #29
    1964:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    1966:	2327      	movs	r3, #39	; 0x27
    1968:	5cf3      	ldrb	r3, [r6, r3]
    196a:	2b00      	cmp	r3, #0
    196c:	d101      	bne.n	1972 <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    196e:	3304      	adds	r3, #4
    1970:	431f      	orrs	r7, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    1972:	7e71      	ldrb	r1, [r6, #25]
    1974:	0289      	lsls	r1, r1, #10
    1976:	7f33      	ldrb	r3, [r6, #28]
    1978:	025b      	lsls	r3, r3, #9
    197a:	4319      	orrs	r1, r3
    197c:	7f73      	ldrb	r3, [r6, #29]
    197e:	021b      	lsls	r3, r3, #8
    1980:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1982:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    1984:	5cf3      	ldrb	r3, [r6, r3]
    1986:	045b      	lsls	r3, r3, #17
    1988:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    198a:	2325      	movs	r3, #37	; 0x25
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    198c:	5cf2      	ldrb	r2, [r6, r3]
    198e:	0412      	lsls	r2, r2, #16
    1990:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    1992:	7af3      	ldrb	r3, [r6, #11]
    1994:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    1996:	8933      	ldrh	r3, [r6, #8]
    1998:	2bff      	cmp	r3, #255	; 0xff
    199a:	d004      	beq.n	19a6 <usart_init+0x1ee>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    199c:	2280      	movs	r2, #128	; 0x80
    199e:	0452      	lsls	r2, r2, #17
    19a0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    19a2:	4319      	orrs	r1, r3
    19a4:	e005      	b.n	19b2 <usart_init+0x1fa>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    19a6:	7ef3      	ldrb	r3, [r6, #27]
    19a8:	2b00      	cmp	r3, #0
    19aa:	d002      	beq.n	19b2 <usart_init+0x1fa>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    19ac:	2380      	movs	r3, #128	; 0x80
    19ae:	04db      	lsls	r3, r3, #19
    19b0:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    19b2:	232c      	movs	r3, #44	; 0x2c
    19b4:	5cf3      	ldrb	r3, [r6, r3]
    19b6:	2b00      	cmp	r3, #0
    19b8:	d103      	bne.n	19c2 <usart_init+0x20a>
    19ba:	4b47      	ldr	r3, [pc, #284]	; (1ad8 <usart_init+0x320>)
    19bc:	789b      	ldrb	r3, [r3, #2]
    19be:	079b      	lsls	r3, r3, #30
    19c0:	d501      	bpl.n	19c6 <usart_init+0x20e>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    19c2:	2380      	movs	r3, #128	; 0x80
    19c4:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    19c6:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    19c8:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    19ca:	2b00      	cmp	r3, #0
    19cc:	d1fc      	bne.n	19c8 <usart_init+0x210>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    19ce:	464b      	mov	r3, r9
    19d0:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    19d2:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    19d4:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    19d6:	2b00      	cmp	r3, #0
    19d8:	d1fc      	bne.n	19d4 <usart_init+0x21c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    19da:	464b      	mov	r3, r9
    19dc:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    19de:	ab0e      	add	r3, sp, #56	; 0x38
    19e0:	2280      	movs	r2, #128	; 0x80
    19e2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    19e4:	2200      	movs	r2, #0
    19e6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    19e8:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    19ea:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    19ec:	6b33      	ldr	r3, [r6, #48]	; 0x30
    19ee:	930a      	str	r3, [sp, #40]	; 0x28
    19f0:	6b73      	ldr	r3, [r6, #52]	; 0x34
    19f2:	930b      	str	r3, [sp, #44]	; 0x2c
    19f4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    19f6:	930c      	str	r3, [sp, #48]	; 0x30
    19f8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    19fa:	9302      	str	r3, [sp, #8]
    19fc:	930d      	str	r3, [sp, #52]	; 0x34
    19fe:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1a00:	ae0e      	add	r6, sp, #56	; 0x38
    1a02:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1a04:	00bb      	lsls	r3, r7, #2
    1a06:	aa0a      	add	r2, sp, #40	; 0x28
    1a08:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    1a0a:	2800      	cmp	r0, #0
    1a0c:	d102      	bne.n	1a14 <usart_init+0x25c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1a0e:	0020      	movs	r0, r4
    1a10:	4b32      	ldr	r3, [pc, #200]	; (1adc <usart_init+0x324>)
    1a12:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1a14:	1c43      	adds	r3, r0, #1
    1a16:	d005      	beq.n	1a24 <usart_init+0x26c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1a18:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1a1a:	0c00      	lsrs	r0, r0, #16
    1a1c:	b2c0      	uxtb	r0, r0
    1a1e:	0031      	movs	r1, r6
    1a20:	4b2f      	ldr	r3, [pc, #188]	; (1ae0 <usart_init+0x328>)
    1a22:	4798      	blx	r3
    1a24:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1a26:	2f04      	cmp	r7, #4
    1a28:	d1eb      	bne.n	1a02 <usart_init+0x24a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    1a2a:	2300      	movs	r3, #0
    1a2c:	60eb      	str	r3, [r5, #12]
    1a2e:	612b      	str	r3, [r5, #16]
    1a30:	616b      	str	r3, [r5, #20]
    1a32:	61ab      	str	r3, [r5, #24]
    1a34:	61eb      	str	r3, [r5, #28]
    1a36:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    1a38:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1a3a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1a3c:	2200      	movs	r2, #0
    1a3e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1a40:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1a42:	3330      	adds	r3, #48	; 0x30
    1a44:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1a46:	3301      	adds	r3, #1
    1a48:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1a4a:	3301      	adds	r3, #1
    1a4c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1a4e:	3301      	adds	r3, #1
    1a50:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1a52:	6828      	ldr	r0, [r5, #0]
    1a54:	4b18      	ldr	r3, [pc, #96]	; (1ab8 <usart_init+0x300>)
    1a56:	4798      	blx	r3
    1a58:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1a5a:	4922      	ldr	r1, [pc, #136]	; (1ae4 <usart_init+0x32c>)
    1a5c:	4b22      	ldr	r3, [pc, #136]	; (1ae8 <usart_init+0x330>)
    1a5e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1a60:	00a4      	lsls	r4, r4, #2
    1a62:	4b22      	ldr	r3, [pc, #136]	; (1aec <usart_init+0x334>)
    1a64:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    1a66:	2300      	movs	r3, #0
    1a68:	e01e      	b.n	1aa8 <usart_init+0x2f0>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1a6a:	2310      	movs	r3, #16
    1a6c:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1a6e:	2300      	movs	r3, #0
    1a70:	9307      	str	r3, [sp, #28]
    1a72:	e003      	b.n	1a7c <usart_init+0x2c4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1a74:	2303      	movs	r3, #3
    1a76:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1a78:	2300      	movs	r3, #0
    1a7a:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1a7c:	6833      	ldr	r3, [r6, #0]
    1a7e:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    1a80:	68f3      	ldr	r3, [r6, #12]
    1a82:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1a84:	6973      	ldr	r3, [r6, #20]
    1a86:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1a88:	7e33      	ldrb	r3, [r6, #24]
    1a8a:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1a8c:	2326      	movs	r3, #38	; 0x26
    1a8e:	5cf3      	ldrb	r3, [r6, r3]
    1a90:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    1a92:	6873      	ldr	r3, [r6, #4]
    1a94:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1a96:	2b00      	cmp	r3, #0
    1a98:	d100      	bne.n	1a9c <usart_init+0x2e4>
    1a9a:	e71f      	b.n	18dc <usart_init+0x124>
    1a9c:	2380      	movs	r3, #128	; 0x80
    1a9e:	055b      	lsls	r3, r3, #21
    1aa0:	459a      	cmp	sl, r3
    1aa2:	d100      	bne.n	1aa6 <usart_init+0x2ee>
    1aa4:	e704      	b.n	18b0 <usart_init+0xf8>
    1aa6:	e73e      	b.n	1926 <usart_init+0x16e>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1aa8:	0018      	movs	r0, r3
    1aaa:	b011      	add	sp, #68	; 0x44
    1aac:	bc3c      	pop	{r2, r3, r4, r5}
    1aae:	4690      	mov	r8, r2
    1ab0:	4699      	mov	r9, r3
    1ab2:	46a2      	mov	sl, r4
    1ab4:	46ab      	mov	fp, r5
    1ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ab8:	000013d9 	.word	0x000013d9
    1abc:	40000400 	.word	0x40000400
    1ac0:	000020ad 	.word	0x000020ad
    1ac4:	00002021 	.word	0x00002021
    1ac8:	00001205 	.word	0x00001205
    1acc:	000020c9 	.word	0x000020c9
    1ad0:	00001015 	.word	0x00001015
    1ad4:	0000103d 	.word	0x0000103d
    1ad8:	41002000 	.word	0x41002000
    1adc:	00001251 	.word	0x00001251
    1ae0:	000021a5 	.word	0x000021a5
    1ae4:	000003d5 	.word	0x000003d5
    1ae8:	0000030d 	.word	0x0000030d
    1aec:	20000278 	.word	0x20000278

00001af0 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1af0:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1af2:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1af4:	2a00      	cmp	r2, #0
    1af6:	d00e      	beq.n	1b16 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1af8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1afa:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1afc:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1afe:	2a00      	cmp	r2, #0
    1b00:	d109      	bne.n	1b16 <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1b02:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1b04:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1b06:	2a00      	cmp	r2, #0
    1b08:	d1fc      	bne.n	1b04 <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    1b0a:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1b0c:	2102      	movs	r1, #2
    1b0e:	7e1a      	ldrb	r2, [r3, #24]
    1b10:	420a      	tst	r2, r1
    1b12:	d0fc      	beq.n	1b0e <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1b14:	2300      	movs	r3, #0
}
    1b16:	0018      	movs	r0, r3
    1b18:	4770      	bx	lr
    1b1a:	46c0      	nop			; (mov r8, r8)

00001b1c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1b1c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1b1e:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1b20:	2a00      	cmp	r2, #0
    1b22:	d030      	beq.n	1b86 <usart_read_wait+0x6a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1b24:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1b26:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1b28:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1b2a:	2a00      	cmp	r2, #0
    1b2c:	d12b      	bne.n	1b86 <usart_read_wait+0x6a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1b2e:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1b30:	7e10      	ldrb	r0, [r2, #24]
    1b32:	0740      	lsls	r0, r0, #29
    1b34:	d527      	bpl.n	1b86 <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1b36:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1b38:	2b00      	cmp	r3, #0
    1b3a:	d1fc      	bne.n	1b36 <usart_read_wait+0x1a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1b3c:	8b53      	ldrh	r3, [r2, #26]
    1b3e:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    1b40:	0698      	lsls	r0, r3, #26
    1b42:	d01d      	beq.n	1b80 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1b44:	0798      	lsls	r0, r3, #30
    1b46:	d503      	bpl.n	1b50 <usart_read_wait+0x34>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1b48:	2302      	movs	r3, #2
    1b4a:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_FORMAT;
    1b4c:	3318      	adds	r3, #24
    1b4e:	e01a      	b.n	1b86 <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1b50:	0758      	lsls	r0, r3, #29
    1b52:	d503      	bpl.n	1b5c <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1b54:	2304      	movs	r3, #4
    1b56:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_OVERFLOW;
    1b58:	331a      	adds	r3, #26
    1b5a:	e014      	b.n	1b86 <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1b5c:	07d8      	lsls	r0, r3, #31
    1b5e:	d503      	bpl.n	1b68 <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1b60:	2301      	movs	r3, #1
    1b62:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_DATA;
    1b64:	3312      	adds	r3, #18
    1b66:	e00e      	b.n	1b86 <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1b68:	06d8      	lsls	r0, r3, #27
    1b6a:	d503      	bpl.n	1b74 <usart_read_wait+0x58>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1b6c:	2310      	movs	r3, #16
    1b6e:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PROTOCOL;
    1b70:	3332      	adds	r3, #50	; 0x32
    1b72:	e008      	b.n	1b86 <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1b74:	069b      	lsls	r3, r3, #26
    1b76:	d503      	bpl.n	1b80 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1b78:	2320      	movs	r3, #32
    1b7a:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PACKET_COLLISION;
    1b7c:	3321      	adds	r3, #33	; 0x21
    1b7e:	e002      	b.n	1b86 <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    1b80:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1b82:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    1b84:	2300      	movs	r3, #0
}
    1b86:	0018      	movs	r0, r3
    1b88:	4770      	bx	lr
    1b8a:	46c0      	nop			; (mov r8, r8)

00001b8c <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b8e:	464f      	mov	r7, r9
    1b90:	b480      	push	{r7}
    1b92:	b082      	sub	sp, #8
    1b94:	0004      	movs	r4, r0
    1b96:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1b98:	2017      	movs	r0, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    1b9a:	2a00      	cmp	r2, #0
    1b9c:	d049      	beq.n	1c32 <usart_write_buffer_wait+0xa6>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1b9e:	79e3      	ldrb	r3, [r4, #7]
		return STATUS_ERR_DENIED;
    1ba0:	3005      	adds	r0, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1ba2:	2b00      	cmp	r3, #0
    1ba4:	d045      	beq.n	1c32 <usart_write_buffer_wait+0xa6>
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ba6:	6827      	ldr	r7, [r4, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1ba8:	69fb      	ldr	r3, [r7, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1baa:	2b00      	cmp	r3, #0
    1bac:	d1fc      	bne.n	1ba8 <usart_write_buffer_wait+0x1c>
    1bae:	4691      	mov	r9, r2
    1bb0:	2500      	movs	r5, #0
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    1bb2:	2601      	movs	r6, #1
    1bb4:	e020      	b.n	1bf8 <usart_write_buffer_wait+0x6c>
    1bb6:	7e3a      	ldrb	r2, [r7, #24]
    1bb8:	4232      	tst	r2, r6
    1bba:	d104      	bne.n	1bc6 <usart_write_buffer_wait+0x3a>
				break;
			} else if (i == USART_TIMEOUT) {
    1bbc:	2b01      	cmp	r3, #1
    1bbe:	d02a      	beq.n	1c16 <usart_write_buffer_wait+0x8a>
    1bc0:	3b01      	subs	r3, #1

	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1bc2:	2b00      	cmp	r3, #0
    1bc4:	d1f7      	bne.n	1bb6 <usart_write_buffer_wait+0x2a>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    1bc6:	1c6a      	adds	r2, r5, #1
    1bc8:	b292      	uxth	r2, r2
    1bca:	9b01      	ldr	r3, [sp, #4]
    1bcc:	5d5b      	ldrb	r3, [r3, r5]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1bce:	7961      	ldrb	r1, [r4, #5]
    1bd0:	2901      	cmp	r1, #1
    1bd2:	d002      	beq.n	1bda <usart_write_buffer_wait+0x4e>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    1bd4:	b299      	uxth	r1, r3
    1bd6:	0015      	movs	r5, r2
    1bd8:	e005      	b.n	1be6 <usart_write_buffer_wait+0x5a>

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
    1bda:	1ca9      	adds	r1, r5, #2
    1bdc:	b28d      	uxth	r5, r1
    1bde:	9901      	ldr	r1, [sp, #4]
    1be0:	5c89      	ldrb	r1, [r1, r2]
    1be2:	0209      	lsls	r1, r1, #8
    1be4:	4319      	orrs	r1, r3
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    1be6:	0020      	movs	r0, r4
    1be8:	4b14      	ldr	r3, [pc, #80]	; (1c3c <usart_write_buffer_wait+0xb0>)
    1bea:	4798      	blx	r3
    1bec:	464a      	mov	r2, r9
    1bee:	3a01      	subs	r2, #1
    1bf0:	b293      	uxth	r3, r2
    1bf2:	4699      	mov	r9, r3
	_usart_wait_for_sync(module);

	uint16_t tx_pos = 0;

	/* Blocks while buffer is being transferred */
	while (length--) {
    1bf4:	2b00      	cmp	r3, #0
    1bf6:	d016      	beq.n	1c26 <usart_write_buffer_wait+0x9a>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    1bf8:	7e3b      	ldrb	r3, [r7, #24]
    1bfa:	4233      	tst	r3, r6
    1bfc:	d1e3      	bne.n	1bc6 <usart_write_buffer_wait+0x3a>
    1bfe:	4b10      	ldr	r3, [pc, #64]	; (1c40 <usart_write_buffer_wait+0xb4>)
    1c00:	e7d9      	b.n	1bb6 <usart_write_buffer_wait+0x2a>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    1c02:	7e3a      	ldrb	r2, [r7, #24]
    1c04:	420a      	tst	r2, r1
    1c06:	d108      	bne.n	1c1a <usart_write_buffer_wait+0x8e>
			break;
		} else if (i == USART_TIMEOUT) {
    1c08:	2b01      	cmp	r3, #1
    1c0a:	d008      	beq.n	1c1e <usart_write_buffer_wait+0x92>
    1c0c:	3b01      	subs	r3, #1
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1c0e:	2b00      	cmp	r3, #0
    1c10:	d1f7      	bne.n	1c02 <usart_write_buffer_wait+0x76>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
    1c12:	2000      	movs	r0, #0
    1c14:	e00d      	b.n	1c32 <usart_write_buffer_wait+0xa6>
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
    1c16:	2012      	movs	r0, #18
    1c18:	e00b      	b.n	1c32 <usart_write_buffer_wait+0xa6>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
    1c1a:	2000      	movs	r0, #0
    1c1c:	e009      	b.n	1c32 <usart_write_buffer_wait+0xa6>
	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
			break;
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
    1c1e:	2012      	movs	r0, #18
    1c20:	e007      	b.n	1c32 <usart_write_buffer_wait+0xa6>
		}
	}

	return STATUS_OK;
    1c22:	2000      	movs	r0, #0
    1c24:	e005      	b.n	1c32 <usart_write_buffer_wait+0xa6>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    1c26:	7e3b      	ldrb	r3, [r7, #24]
    1c28:	079b      	lsls	r3, r3, #30
    1c2a:	d4fa      	bmi.n	1c22 <usart_write_buffer_wait+0x96>
    1c2c:	4b04      	ldr	r3, [pc, #16]	; (1c40 <usart_write_buffer_wait+0xb4>)
    1c2e:	2102      	movs	r1, #2
    1c30:	e7e7      	b.n	1c02 <usart_write_buffer_wait+0x76>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    1c32:	b002      	add	sp, #8
    1c34:	bc04      	pop	{r2}
    1c36:	4691      	mov	r9, r2
    1c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c3a:	46c0      	nop			; (mov r8, r8)
    1c3c:	00001af1 	.word	0x00001af1
    1c40:	0000ffff 	.word	0x0000ffff

00001c44 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1c44:	b510      	push	{r4, lr}
	switch (clock_source) {
    1c46:	2808      	cmp	r0, #8
    1c48:	d803      	bhi.n	1c52 <system_clock_source_get_hz+0xe>
    1c4a:	0080      	lsls	r0, r0, #2
    1c4c:	4b1b      	ldr	r3, [pc, #108]	; (1cbc <system_clock_source_get_hz+0x78>)
    1c4e:	581b      	ldr	r3, [r3, r0]
    1c50:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1c52:	2000      	movs	r0, #0
    1c54:	e030      	b.n	1cb8 <system_clock_source_get_hz+0x74>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1c56:	4b1a      	ldr	r3, [pc, #104]	; (1cc0 <system_clock_source_get_hz+0x7c>)
    1c58:	6918      	ldr	r0, [r3, #16]
    1c5a:	e02d      	b.n	1cb8 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1c5c:	4b19      	ldr	r3, [pc, #100]	; (1cc4 <system_clock_source_get_hz+0x80>)
    1c5e:	6a1b      	ldr	r3, [r3, #32]
    1c60:	059b      	lsls	r3, r3, #22
    1c62:	0f9b      	lsrs	r3, r3, #30
    1c64:	4818      	ldr	r0, [pc, #96]	; (1cc8 <system_clock_source_get_hz+0x84>)
    1c66:	40d8      	lsrs	r0, r3
    1c68:	e026      	b.n	1cb8 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1c6a:	4b15      	ldr	r3, [pc, #84]	; (1cc0 <system_clock_source_get_hz+0x7c>)
    1c6c:	6958      	ldr	r0, [r3, #20]
    1c6e:	e023      	b.n	1cb8 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1c70:	4b13      	ldr	r3, [pc, #76]	; (1cc0 <system_clock_source_get_hz+0x7c>)
    1c72:	681b      	ldr	r3, [r3, #0]
    1c74:	2002      	movs	r0, #2
    1c76:	4018      	ands	r0, r3
    1c78:	d01e      	beq.n	1cb8 <system_clock_source_get_hz+0x74>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1c7a:	4912      	ldr	r1, [pc, #72]	; (1cc4 <system_clock_source_get_hz+0x80>)
    1c7c:	2210      	movs	r2, #16
    1c7e:	68cb      	ldr	r3, [r1, #12]
    1c80:	421a      	tst	r2, r3
    1c82:	d0fc      	beq.n	1c7e <system_clock_source_get_hz+0x3a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1c84:	4b0e      	ldr	r3, [pc, #56]	; (1cc0 <system_clock_source_get_hz+0x7c>)
    1c86:	681b      	ldr	r3, [r3, #0]
    1c88:	075b      	lsls	r3, r3, #29
    1c8a:	d514      	bpl.n	1cb6 <system_clock_source_get_hz+0x72>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1c8c:	2000      	movs	r0, #0
    1c8e:	4b0f      	ldr	r3, [pc, #60]	; (1ccc <system_clock_source_get_hz+0x88>)
    1c90:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1c92:	4b0b      	ldr	r3, [pc, #44]	; (1cc0 <system_clock_source_get_hz+0x7c>)
    1c94:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1c96:	041b      	lsls	r3, r3, #16
    1c98:	0c1b      	lsrs	r3, r3, #16
    1c9a:	4358      	muls	r0, r3
    1c9c:	e00c      	b.n	1cb8 <system_clock_source_get_hz+0x74>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1c9e:	2350      	movs	r3, #80	; 0x50
    1ca0:	4a08      	ldr	r2, [pc, #32]	; (1cc4 <system_clock_source_get_hz+0x80>)
    1ca2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1ca4:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1ca6:	075b      	lsls	r3, r3, #29
    1ca8:	d506      	bpl.n	1cb8 <system_clock_source_get_hz+0x74>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1caa:	4b05      	ldr	r3, [pc, #20]	; (1cc0 <system_clock_source_get_hz+0x7c>)
    1cac:	68d8      	ldr	r0, [r3, #12]
    1cae:	e003      	b.n	1cb8 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1cb0:	2080      	movs	r0, #128	; 0x80
    1cb2:	0200      	lsls	r0, r0, #8
    1cb4:	e000      	b.n	1cb8 <system_clock_source_get_hz+0x74>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1cb6:	4806      	ldr	r0, [pc, #24]	; (1cd0 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    1cb8:	bd10      	pop	{r4, pc}
    1cba:	46c0      	nop			; (mov r8, r8)
    1cbc:	00002958 	.word	0x00002958
    1cc0:	2000005c 	.word	0x2000005c
    1cc4:	40000800 	.word	0x40000800
    1cc8:	007a1200 	.word	0x007a1200
    1ccc:	000020c9 	.word	0x000020c9
    1cd0:	02dc6c00 	.word	0x02dc6c00

00001cd4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1cd4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1cd6:	4c0c      	ldr	r4, [pc, #48]	; (1d08 <system_clock_source_osc8m_set_config+0x34>)
    1cd8:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1cda:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1cdc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1cde:	7842      	ldrb	r2, [r0, #1]
    1ce0:	2001      	movs	r0, #1
    1ce2:	4002      	ands	r2, r0
    1ce4:	0192      	lsls	r2, r2, #6
    1ce6:	2640      	movs	r6, #64	; 0x40
    1ce8:	43b3      	bics	r3, r6
    1cea:	4313      	orrs	r3, r2
    1cec:	0002      	movs	r2, r0
    1cee:	402a      	ands	r2, r5
    1cf0:	01d2      	lsls	r2, r2, #7
    1cf2:	307f      	adds	r0, #127	; 0x7f
    1cf4:	4383      	bics	r3, r0
    1cf6:	4313      	orrs	r3, r2
    1cf8:	2203      	movs	r2, #3
    1cfa:	400a      	ands	r2, r1
    1cfc:	0212      	lsls	r2, r2, #8
    1cfe:	4903      	ldr	r1, [pc, #12]	; (1d0c <system_clock_source_osc8m_set_config+0x38>)
    1d00:	400b      	ands	r3, r1
    1d02:	4313      	orrs	r3, r2
    1d04:	6223      	str	r3, [r4, #32]
}
    1d06:	bd70      	pop	{r4, r5, r6, pc}
    1d08:	40000800 	.word	0x40000800
    1d0c:	fffffcff 	.word	0xfffffcff

00001d10 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1d10:	2808      	cmp	r0, #8
    1d12:	d803      	bhi.n	1d1c <system_clock_source_enable+0xc>
    1d14:	0080      	lsls	r0, r0, #2
    1d16:	4b25      	ldr	r3, [pc, #148]	; (1dac <system_clock_source_enable+0x9c>)
    1d18:	581b      	ldr	r3, [r3, r0]
    1d1a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1d1c:	2017      	movs	r0, #23
    1d1e:	e044      	b.n	1daa <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1d20:	4a23      	ldr	r2, [pc, #140]	; (1db0 <system_clock_source_enable+0xa0>)
    1d22:	6a11      	ldr	r1, [r2, #32]
    1d24:	2302      	movs	r3, #2
    1d26:	430b      	orrs	r3, r1
    1d28:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1d2a:	2000      	movs	r0, #0
    1d2c:	e03d      	b.n	1daa <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1d2e:	4a20      	ldr	r2, [pc, #128]	; (1db0 <system_clock_source_enable+0xa0>)
    1d30:	6991      	ldr	r1, [r2, #24]
    1d32:	2302      	movs	r3, #2
    1d34:	430b      	orrs	r3, r1
    1d36:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1d38:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    1d3a:	e036      	b.n	1daa <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1d3c:	4a1c      	ldr	r2, [pc, #112]	; (1db0 <system_clock_source_enable+0xa0>)
    1d3e:	8a11      	ldrh	r1, [r2, #16]
    1d40:	2302      	movs	r3, #2
    1d42:	430b      	orrs	r3, r1
    1d44:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1d46:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1d48:	e02f      	b.n	1daa <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1d4a:	4a19      	ldr	r2, [pc, #100]	; (1db0 <system_clock_source_enable+0xa0>)
    1d4c:	8a91      	ldrh	r1, [r2, #20]
    1d4e:	2302      	movs	r3, #2
    1d50:	430b      	orrs	r3, r1
    1d52:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1d54:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    1d56:	e028      	b.n	1daa <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1d58:	4916      	ldr	r1, [pc, #88]	; (1db4 <system_clock_source_enable+0xa4>)
    1d5a:	680b      	ldr	r3, [r1, #0]
    1d5c:	2202      	movs	r2, #2
    1d5e:	4313      	orrs	r3, r2
    1d60:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1d62:	4b13      	ldr	r3, [pc, #76]	; (1db0 <system_clock_source_enable+0xa0>)
    1d64:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1d66:	0019      	movs	r1, r3
    1d68:	320e      	adds	r2, #14
    1d6a:	68cb      	ldr	r3, [r1, #12]
    1d6c:	421a      	tst	r2, r3
    1d6e:	d0fc      	beq.n	1d6a <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1d70:	4a10      	ldr	r2, [pc, #64]	; (1db4 <system_clock_source_enable+0xa4>)
    1d72:	6891      	ldr	r1, [r2, #8]
    1d74:	4b0e      	ldr	r3, [pc, #56]	; (1db0 <system_clock_source_enable+0xa0>)
    1d76:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1d78:	6852      	ldr	r2, [r2, #4]
    1d7a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    1d7c:	2200      	movs	r2, #0
    1d7e:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1d80:	0019      	movs	r1, r3
    1d82:	3210      	adds	r2, #16
    1d84:	68cb      	ldr	r3, [r1, #12]
    1d86:	421a      	tst	r2, r3
    1d88:	d0fc      	beq.n	1d84 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1d8a:	4b0a      	ldr	r3, [pc, #40]	; (1db4 <system_clock_source_enable+0xa4>)
    1d8c:	681b      	ldr	r3, [r3, #0]
    1d8e:	b29b      	uxth	r3, r3
    1d90:	4a07      	ldr	r2, [pc, #28]	; (1db0 <system_clock_source_enable+0xa0>)
    1d92:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1d94:	2000      	movs	r0, #0
    1d96:	e008      	b.n	1daa <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1d98:	4905      	ldr	r1, [pc, #20]	; (1db0 <system_clock_source_enable+0xa0>)
    1d9a:	2244      	movs	r2, #68	; 0x44
    1d9c:	5c88      	ldrb	r0, [r1, r2]
    1d9e:	2302      	movs	r3, #2
    1da0:	4303      	orrs	r3, r0
    1da2:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1da4:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    1da6:	e000      	b.n	1daa <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1da8:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    1daa:	4770      	bx	lr
    1dac:	0000297c 	.word	0x0000297c
    1db0:	40000800 	.word	0x40000800
    1db4:	2000005c 	.word	0x2000005c

00001db8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1db8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1dba:	4647      	mov	r7, r8
    1dbc:	b480      	push	{r7}
    1dbe:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1dc0:	22c2      	movs	r2, #194	; 0xc2
    1dc2:	00d2      	lsls	r2, r2, #3
    1dc4:	4b22      	ldr	r3, [pc, #136]	; (1e50 <system_clock_init+0x98>)
    1dc6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1dc8:	4a22      	ldr	r2, [pc, #136]	; (1e54 <system_clock_init+0x9c>)
    1dca:	6853      	ldr	r3, [r2, #4]
    1dcc:	211e      	movs	r1, #30
    1dce:	438b      	bics	r3, r1
    1dd0:	6053      	str	r3, [r2, #4]
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1dd2:	2302      	movs	r3, #2
    1dd4:	466a      	mov	r2, sp
    1dd6:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1dd8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1dda:	4d1f      	ldr	r5, [pc, #124]	; (1e58 <system_clock_init+0xa0>)
    1ddc:	b2e0      	uxtb	r0, r4
    1dde:	4669      	mov	r1, sp
    1de0:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1de2:	3401      	adds	r4, #1
    1de4:	2c25      	cmp	r4, #37	; 0x25
    1de6:	d1f9      	bne.n	1ddc <system_clock_init+0x24>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1de8:	a803      	add	r0, sp, #12
    1dea:	2400      	movs	r4, #0
    1dec:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1dee:	2501      	movs	r5, #1
    1df0:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1df2:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1df4:	4b19      	ldr	r3, [pc, #100]	; (1e5c <system_clock_init+0xa4>)
    1df6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1df8:	2006      	movs	r0, #6
    1dfa:	4b19      	ldr	r3, [pc, #100]	; (1e60 <system_clock_init+0xa8>)
    1dfc:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1dfe:	4b19      	ldr	r3, [pc, #100]	; (1e64 <system_clock_init+0xac>)
    1e00:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1e02:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1e04:	466b      	mov	r3, sp
    1e06:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1e08:	2306      	movs	r3, #6
    1e0a:	4698      	mov	r8, r3
    1e0c:	466b      	mov	r3, sp
    1e0e:	4642      	mov	r2, r8
    1e10:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    1e12:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    1e14:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1e16:	4669      	mov	r1, sp
    1e18:	2001      	movs	r0, #1
    1e1a:	4f13      	ldr	r7, [pc, #76]	; (1e68 <system_clock_init+0xb0>)
    1e1c:	47b8      	blx	r7
    1e1e:	2001      	movs	r0, #1
    1e20:	4e12      	ldr	r6, [pc, #72]	; (1e6c <system_clock_init+0xb4>)
    1e22:	47b0      	blx	r6
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1e24:	4b12      	ldr	r3, [pc, #72]	; (1e70 <system_clock_init+0xb8>)
    1e26:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1e28:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    1e2a:	729c      	strb	r4, [r3, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    1e2c:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1e2e:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1e30:	466b      	mov	r3, sp
    1e32:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1e34:	4642      	mov	r2, r8
    1e36:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    1e38:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    1e3a:	725c      	strb	r4, [r3, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1e3c:	4669      	mov	r1, sp
    1e3e:	2000      	movs	r0, #0
    1e40:	47b8      	blx	r7
    1e42:	2000      	movs	r0, #0
    1e44:	47b0      	blx	r6
#endif
}
    1e46:	b004      	add	sp, #16
    1e48:	bc04      	pop	{r2}
    1e4a:	4690      	mov	r8, r2
    1e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e4e:	46c0      	nop			; (mov r8, r8)
    1e50:	40000800 	.word	0x40000800
    1e54:	41004000 	.word	0x41004000
    1e58:	000020ad 	.word	0x000020ad
    1e5c:	00001cd5 	.word	0x00001cd5
    1e60:	00001d11 	.word	0x00001d11
    1e64:	00001e75 	.word	0x00001e75
    1e68:	00001e99 	.word	0x00001e99
    1e6c:	00001f51 	.word	0x00001f51
    1e70:	40000400 	.word	0x40000400

00001e74 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1e74:	4a06      	ldr	r2, [pc, #24]	; (1e90 <system_gclk_init+0x1c>)
    1e76:	6991      	ldr	r1, [r2, #24]
    1e78:	2308      	movs	r3, #8
    1e7a:	430b      	orrs	r3, r1
    1e7c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1e7e:	2201      	movs	r2, #1
    1e80:	4b04      	ldr	r3, [pc, #16]	; (1e94 <system_gclk_init+0x20>)
    1e82:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1e84:	0019      	movs	r1, r3
    1e86:	780b      	ldrb	r3, [r1, #0]
    1e88:	4213      	tst	r3, r2
    1e8a:	d1fc      	bne.n	1e86 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1e8c:	4770      	bx	lr
    1e8e:	46c0      	nop			; (mov r8, r8)
    1e90:	40000400 	.word	0x40000400
    1e94:	40000c00 	.word	0x40000c00

00001e98 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1e98:	b570      	push	{r4, r5, r6, lr}
    1e9a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1e9c:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1e9e:	780c      	ldrb	r4, [r1, #0]
    1ea0:	0224      	lsls	r4, r4, #8
    1ea2:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1ea4:	784b      	ldrb	r3, [r1, #1]
    1ea6:	2b00      	cmp	r3, #0
    1ea8:	d002      	beq.n	1eb0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1eaa:	2380      	movs	r3, #128	; 0x80
    1eac:	02db      	lsls	r3, r3, #11
    1eae:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1eb0:	7a4b      	ldrb	r3, [r1, #9]
    1eb2:	2b00      	cmp	r3, #0
    1eb4:	d002      	beq.n	1ebc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1eb6:	2380      	movs	r3, #128	; 0x80
    1eb8:	031b      	lsls	r3, r3, #12
    1eba:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1ebc:	6848      	ldr	r0, [r1, #4]
    1ebe:	2801      	cmp	r0, #1
    1ec0:	d918      	bls.n	1ef4 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1ec2:	1e43      	subs	r3, r0, #1
    1ec4:	4218      	tst	r0, r3
    1ec6:	d110      	bne.n	1eea <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1ec8:	2802      	cmp	r0, #2
    1eca:	d906      	bls.n	1eda <system_gclk_gen_set_config+0x42>
    1ecc:	2302      	movs	r3, #2
    1ece:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1ed0:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1ed2:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1ed4:	4298      	cmp	r0, r3
    1ed6:	d8fb      	bhi.n	1ed0 <system_gclk_gen_set_config+0x38>
    1ed8:	e000      	b.n	1edc <system_gclk_gen_set_config+0x44>
    1eda:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1edc:	0212      	lsls	r2, r2, #8
    1ede:	4332      	orrs	r2, r6
    1ee0:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1ee2:	2380      	movs	r3, #128	; 0x80
    1ee4:	035b      	lsls	r3, r3, #13
    1ee6:	431c      	orrs	r4, r3
    1ee8:	e004      	b.n	1ef4 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1eea:	0205      	lsls	r5, r0, #8
    1eec:	4335      	orrs	r5, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1eee:	2380      	movs	r3, #128	; 0x80
    1ef0:	029b      	lsls	r3, r3, #10
    1ef2:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1ef4:	7a0b      	ldrb	r3, [r1, #8]
    1ef6:	2b00      	cmp	r3, #0
    1ef8:	d002      	beq.n	1f00 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1efa:	2380      	movs	r3, #128	; 0x80
    1efc:	039b      	lsls	r3, r3, #14
    1efe:	431c      	orrs	r4, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f00:	4a0f      	ldr	r2, [pc, #60]	; (1f40 <system_gclk_gen_set_config+0xa8>)
    1f02:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    1f04:	b25b      	sxtb	r3, r3
    1f06:	2b00      	cmp	r3, #0
    1f08:	dbfb      	blt.n	1f02 <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1f0a:	4b0e      	ldr	r3, [pc, #56]	; (1f44 <system_gclk_gen_set_config+0xac>)
    1f0c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1f0e:	4b0e      	ldr	r3, [pc, #56]	; (1f48 <system_gclk_gen_set_config+0xb0>)
    1f10:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f12:	4a0b      	ldr	r2, [pc, #44]	; (1f40 <system_gclk_gen_set_config+0xa8>)
    1f14:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1f16:	b25b      	sxtb	r3, r3
    1f18:	2b00      	cmp	r3, #0
    1f1a:	dbfb      	blt.n	1f14 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1f1c:	4b08      	ldr	r3, [pc, #32]	; (1f40 <system_gclk_gen_set_config+0xa8>)
    1f1e:	609d      	str	r5, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f20:	001a      	movs	r2, r3
    1f22:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    1f24:	b25b      	sxtb	r3, r3
    1f26:	2b00      	cmp	r3, #0
    1f28:	dbfb      	blt.n	1f22 <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1f2a:	4a05      	ldr	r2, [pc, #20]	; (1f40 <system_gclk_gen_set_config+0xa8>)
    1f2c:	6851      	ldr	r1, [r2, #4]
    1f2e:	2380      	movs	r3, #128	; 0x80
    1f30:	025b      	lsls	r3, r3, #9
    1f32:	400b      	ands	r3, r1
    1f34:	431c      	orrs	r4, r3
    1f36:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1f38:	4b04      	ldr	r3, [pc, #16]	; (1f4c <system_gclk_gen_set_config+0xb4>)
    1f3a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1f3c:	bd70      	pop	{r4, r5, r6, pc}
    1f3e:	46c0      	nop			; (mov r8, r8)
    1f40:	40000c00 	.word	0x40000c00
    1f44:	00000f49 	.word	0x00000f49
    1f48:	40000c08 	.word	0x40000c08
    1f4c:	00000f89 	.word	0x00000f89

00001f50 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1f50:	b510      	push	{r4, lr}
    1f52:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f54:	4a0b      	ldr	r2, [pc, #44]	; (1f84 <system_gclk_gen_enable+0x34>)
    1f56:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1f58:	b25b      	sxtb	r3, r3
    1f5a:	2b00      	cmp	r3, #0
    1f5c:	dbfb      	blt.n	1f56 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1f5e:	4b0a      	ldr	r3, [pc, #40]	; (1f88 <system_gclk_gen_enable+0x38>)
    1f60:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1f62:	4b0a      	ldr	r3, [pc, #40]	; (1f8c <system_gclk_gen_enable+0x3c>)
    1f64:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f66:	4a07      	ldr	r2, [pc, #28]	; (1f84 <system_gclk_gen_enable+0x34>)
    1f68:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1f6a:	b25b      	sxtb	r3, r3
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	dbfb      	blt.n	1f68 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1f70:	4a04      	ldr	r2, [pc, #16]	; (1f84 <system_gclk_gen_enable+0x34>)
    1f72:	6853      	ldr	r3, [r2, #4]
    1f74:	2180      	movs	r1, #128	; 0x80
    1f76:	0249      	lsls	r1, r1, #9
    1f78:	430b      	orrs	r3, r1
    1f7a:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1f7c:	4b04      	ldr	r3, [pc, #16]	; (1f90 <system_gclk_gen_enable+0x40>)
    1f7e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1f80:	bd10      	pop	{r4, pc}
    1f82:	46c0      	nop			; (mov r8, r8)
    1f84:	40000c00 	.word	0x40000c00
    1f88:	00000f49 	.word	0x00000f49
    1f8c:	40000c04 	.word	0x40000c04
    1f90:	00000f89 	.word	0x00000f89

00001f94 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1f94:	b570      	push	{r4, r5, r6, lr}
    1f96:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1f98:	4a1a      	ldr	r2, [pc, #104]	; (2004 <STACK_SIZE+0x4>)
    1f9a:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1f9c:	b25b      	sxtb	r3, r3
    1f9e:	2b00      	cmp	r3, #0
    1fa0:	dbfb      	blt.n	1f9a <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1fa2:	4b19      	ldr	r3, [pc, #100]	; (2008 <STACK_SIZE+0x8>)
    1fa4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1fa6:	4b19      	ldr	r3, [pc, #100]	; (200c <STACK_SIZE+0xc>)
    1fa8:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1faa:	4a16      	ldr	r2, [pc, #88]	; (2004 <STACK_SIZE+0x4>)
    1fac:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1fae:	b25b      	sxtb	r3, r3
    1fb0:	2b00      	cmp	r3, #0
    1fb2:	dbfb      	blt.n	1fac <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1fb4:	4e13      	ldr	r6, [pc, #76]	; (2004 <STACK_SIZE+0x4>)
    1fb6:	6870      	ldr	r0, [r6, #4]
    1fb8:	04c0      	lsls	r0, r0, #19
    1fba:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1fbc:	4b14      	ldr	r3, [pc, #80]	; (2010 <STACK_SIZE+0x10>)
    1fbe:	4798      	blx	r3
    1fc0:	0005      	movs	r5, r0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1fc2:	4b12      	ldr	r3, [pc, #72]	; (200c <STACK_SIZE+0xc>)
    1fc4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1fc6:	6876      	ldr	r6, [r6, #4]
    1fc8:	02f6      	lsls	r6, r6, #11
    1fca:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1fcc:	4b11      	ldr	r3, [pc, #68]	; (2014 <STACK_SIZE+0x14>)
    1fce:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fd0:	4a0c      	ldr	r2, [pc, #48]	; (2004 <STACK_SIZE+0x4>)
    1fd2:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    1fd4:	b25b      	sxtb	r3, r3
    1fd6:	2b00      	cmp	r3, #0
    1fd8:	dbfb      	blt.n	1fd2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1fda:	4b0a      	ldr	r3, [pc, #40]	; (2004 <STACK_SIZE+0x4>)
    1fdc:	689c      	ldr	r4, [r3, #8]
    1fde:	0224      	lsls	r4, r4, #8
    1fe0:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1fe2:	4b0d      	ldr	r3, [pc, #52]	; (2018 <STACK_SIZE+0x18>)
    1fe4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1fe6:	2e00      	cmp	r6, #0
    1fe8:	d107      	bne.n	1ffa <system_gclk_gen_get_hz+0x66>
    1fea:	2c01      	cmp	r4, #1
    1fec:	d907      	bls.n	1ffe <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1fee:	0021      	movs	r1, r4
    1ff0:	0028      	movs	r0, r5
    1ff2:	4b0a      	ldr	r3, [pc, #40]	; (201c <STACK_SIZE+0x1c>)
    1ff4:	4798      	blx	r3
    1ff6:	0005      	movs	r5, r0
    1ff8:	e001      	b.n	1ffe <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1ffa:	3401      	adds	r4, #1
    1ffc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1ffe:	0028      	movs	r0, r5
    2000:	bd70      	pop	{r4, r5, r6, pc}
    2002:	46c0      	nop			; (mov r8, r8)
    2004:	40000c00 	.word	0x40000c00
    2008:	00000f49 	.word	0x00000f49
    200c:	40000c04 	.word	0x40000c04
    2010:	00001c45 	.word	0x00001c45
    2014:	40000c08 	.word	0x40000c08
    2018:	00000f89 	.word	0x00000f89
    201c:	000024ad 	.word	0x000024ad

00002020 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2020:	b510      	push	{r4, lr}
    2022:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2024:	4b06      	ldr	r3, [pc, #24]	; (2040 <system_gclk_chan_enable+0x20>)
    2026:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2028:	4b06      	ldr	r3, [pc, #24]	; (2044 <system_gclk_chan_enable+0x24>)
    202a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    202c:	4a06      	ldr	r2, [pc, #24]	; (2048 <system_gclk_chan_enable+0x28>)
    202e:	8851      	ldrh	r1, [r2, #2]
    2030:	2380      	movs	r3, #128	; 0x80
    2032:	01db      	lsls	r3, r3, #7
    2034:	430b      	orrs	r3, r1
    2036:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2038:	4b04      	ldr	r3, [pc, #16]	; (204c <system_gclk_chan_enable+0x2c>)
    203a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    203c:	bd10      	pop	{r4, pc}
    203e:	46c0      	nop			; (mov r8, r8)
    2040:	00000f49 	.word	0x00000f49
    2044:	40000c02 	.word	0x40000c02
    2048:	40000c00 	.word	0x40000c00
    204c:	00000f89 	.word	0x00000f89

00002050 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2050:	b510      	push	{r4, lr}
    2052:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2054:	4b0f      	ldr	r3, [pc, #60]	; (2094 <system_gclk_chan_disable+0x44>)
    2056:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2058:	4b0f      	ldr	r3, [pc, #60]	; (2098 <system_gclk_chan_disable+0x48>)
    205a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    205c:	4b0f      	ldr	r3, [pc, #60]	; (209c <system_gclk_chan_disable+0x4c>)
    205e:	885a      	ldrh	r2, [r3, #2]
    2060:	0512      	lsls	r2, r2, #20
    2062:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2064:	8859      	ldrh	r1, [r3, #2]
    2066:	4a0e      	ldr	r2, [pc, #56]	; (20a0 <system_gclk_chan_disable+0x50>)
    2068:	400a      	ands	r2, r1
    206a:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    206c:	8859      	ldrh	r1, [r3, #2]
    206e:	4a0d      	ldr	r2, [pc, #52]	; (20a4 <system_gclk_chan_disable+0x54>)
    2070:	400a      	ands	r2, r1
    2072:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2074:	0019      	movs	r1, r3
    2076:	2280      	movs	r2, #128	; 0x80
    2078:	01d2      	lsls	r2, r2, #7
    207a:	884b      	ldrh	r3, [r1, #2]
    207c:	4213      	tst	r3, r2
    207e:	d1fc      	bne.n	207a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2080:	4906      	ldr	r1, [pc, #24]	; (209c <system_gclk_chan_disable+0x4c>)
    2082:	884c      	ldrh	r4, [r1, #2]
    2084:	0202      	lsls	r2, r0, #8
    2086:	4b06      	ldr	r3, [pc, #24]	; (20a0 <system_gclk_chan_disable+0x50>)
    2088:	4023      	ands	r3, r4
    208a:	4313      	orrs	r3, r2
    208c:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    208e:	4b06      	ldr	r3, [pc, #24]	; (20a8 <system_gclk_chan_disable+0x58>)
    2090:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2092:	bd10      	pop	{r4, pc}
    2094:	00000f49 	.word	0x00000f49
    2098:	40000c02 	.word	0x40000c02
    209c:	40000c00 	.word	0x40000c00
    20a0:	fffff0ff 	.word	0xfffff0ff
    20a4:	ffffbfff 	.word	0xffffbfff
    20a8:	00000f89 	.word	0x00000f89

000020ac <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    20ac:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    20ae:	780c      	ldrb	r4, [r1, #0]
    20b0:	0224      	lsls	r4, r4, #8
    20b2:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    20b4:	4b02      	ldr	r3, [pc, #8]	; (20c0 <system_gclk_chan_set_config+0x14>)
    20b6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    20b8:	b2a4      	uxth	r4, r4
    20ba:	4b02      	ldr	r3, [pc, #8]	; (20c4 <system_gclk_chan_set_config+0x18>)
    20bc:	805c      	strh	r4, [r3, #2]
}
    20be:	bd10      	pop	{r4, pc}
    20c0:	00002051 	.word	0x00002051
    20c4:	40000c00 	.word	0x40000c00

000020c8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    20c8:	b510      	push	{r4, lr}
    20ca:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    20cc:	4b06      	ldr	r3, [pc, #24]	; (20e8 <system_gclk_chan_get_hz+0x20>)
    20ce:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    20d0:	4b06      	ldr	r3, [pc, #24]	; (20ec <system_gclk_chan_get_hz+0x24>)
    20d2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    20d4:	4b06      	ldr	r3, [pc, #24]	; (20f0 <system_gclk_chan_get_hz+0x28>)
    20d6:	885c      	ldrh	r4, [r3, #2]
    20d8:	0524      	lsls	r4, r4, #20
    20da:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    20dc:	4b05      	ldr	r3, [pc, #20]	; (20f4 <system_gclk_chan_get_hz+0x2c>)
    20de:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    20e0:	0020      	movs	r0, r4
    20e2:	4b05      	ldr	r3, [pc, #20]	; (20f8 <system_gclk_chan_get_hz+0x30>)
    20e4:	4798      	blx	r3
}
    20e6:	bd10      	pop	{r4, pc}
    20e8:	00000f49 	.word	0x00000f49
    20ec:	40000c02 	.word	0x40000c02
    20f0:	40000c00 	.word	0x40000c00
    20f4:	00000f89 	.word	0x00000f89
    20f8:	00001f95 	.word	0x00001f95

000020fc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    20fc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    20fe:	78d3      	ldrb	r3, [r2, #3]
    2100:	2b00      	cmp	r3, #0
    2102:	d11e      	bne.n	2142 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2104:	7813      	ldrb	r3, [r2, #0]
    2106:	2b80      	cmp	r3, #128	; 0x80
    2108:	d004      	beq.n	2114 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    210a:	061b      	lsls	r3, r3, #24
    210c:	2480      	movs	r4, #128	; 0x80
    210e:	0264      	lsls	r4, r4, #9
    2110:	4323      	orrs	r3, r4
    2112:	e000      	b.n	2116 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    2114:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2116:	7854      	ldrb	r4, [r2, #1]
    2118:	2502      	movs	r5, #2
    211a:	43ac      	bics	r4, r5
    211c:	d10a      	bne.n	2134 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    211e:	7894      	ldrb	r4, [r2, #2]
    2120:	2c00      	cmp	r4, #0
    2122:	d103      	bne.n	212c <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    2124:	2480      	movs	r4, #128	; 0x80
    2126:	02a4      	lsls	r4, r4, #10
    2128:	4323      	orrs	r3, r4
    212a:	e002      	b.n	2132 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    212c:	24c0      	movs	r4, #192	; 0xc0
    212e:	02e4      	lsls	r4, r4, #11
    2130:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2132:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2134:	7854      	ldrb	r4, [r2, #1]
    2136:	3c01      	subs	r4, #1
    2138:	2c01      	cmp	r4, #1
    213a:	d812      	bhi.n	2162 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    213c:	4c18      	ldr	r4, [pc, #96]	; (21a0 <_system_pinmux_config+0xa4>)
    213e:	4023      	ands	r3, r4
    2140:	e00f      	b.n	2162 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    2142:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2144:	040b      	lsls	r3, r1, #16
    2146:	0c1b      	lsrs	r3, r3, #16
    2148:	24a0      	movs	r4, #160	; 0xa0
    214a:	05e4      	lsls	r4, r4, #23
    214c:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    214e:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2150:	0c0b      	lsrs	r3, r1, #16
    2152:	24d0      	movs	r4, #208	; 0xd0
    2154:	0624      	lsls	r4, r4, #24
    2156:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2158:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    215a:	78d3      	ldrb	r3, [r2, #3]
    215c:	2b00      	cmp	r3, #0
    215e:	d018      	beq.n	2192 <_system_pinmux_config+0x96>
    2160:	e01c      	b.n	219c <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2162:	040c      	lsls	r4, r1, #16
    2164:	0c24      	lsrs	r4, r4, #16
    2166:	25a0      	movs	r5, #160	; 0xa0
    2168:	05ed      	lsls	r5, r5, #23
    216a:	432c      	orrs	r4, r5
    216c:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    216e:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2170:	0c0c      	lsrs	r4, r1, #16
    2172:	25d0      	movs	r5, #208	; 0xd0
    2174:	062d      	lsls	r5, r5, #24
    2176:	432c      	orrs	r4, r5
    2178:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    217a:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    217c:	78d4      	ldrb	r4, [r2, #3]
    217e:	2c00      	cmp	r4, #0
    2180:	d10c      	bne.n	219c <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2182:	035b      	lsls	r3, r3, #13
    2184:	d505      	bpl.n	2192 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2186:	7893      	ldrb	r3, [r2, #2]
    2188:	2b01      	cmp	r3, #1
    218a:	d101      	bne.n	2190 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    218c:	6181      	str	r1, [r0, #24]
    218e:	e000      	b.n	2192 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    2190:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2192:	7853      	ldrb	r3, [r2, #1]
    2194:	3b01      	subs	r3, #1
    2196:	2b01      	cmp	r3, #1
    2198:	d800      	bhi.n	219c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    219a:	6081      	str	r1, [r0, #8]
		}
	}
}
    219c:	bd30      	pop	{r4, r5, pc}
    219e:	46c0      	nop			; (mov r8, r8)
    21a0:	fffbffff 	.word	0xfffbffff

000021a4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    21a4:	b510      	push	{r4, lr}
    21a6:	0003      	movs	r3, r0
    21a8:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    21aa:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    21ac:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    21ae:	2900      	cmp	r1, #0
    21b0:	d104      	bne.n	21bc <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    21b2:	0958      	lsrs	r0, r3, #5
    21b4:	01c0      	lsls	r0, r0, #7
    21b6:	4905      	ldr	r1, [pc, #20]	; (21cc <system_pinmux_pin_set_config+0x28>)
    21b8:	468c      	mov	ip, r1
    21ba:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    21bc:	211f      	movs	r1, #31
    21be:	400b      	ands	r3, r1
    21c0:	391e      	subs	r1, #30
    21c2:	4099      	lsls	r1, r3
    21c4:	4b02      	ldr	r3, [pc, #8]	; (21d0 <system_pinmux_pin_set_config+0x2c>)
    21c6:	4798      	blx	r3
}
    21c8:	bd10      	pop	{r4, pc}
    21ca:	46c0      	nop			; (mov r8, r8)
    21cc:	41004400 	.word	0x41004400
    21d0:	000020fd 	.word	0x000020fd

000021d4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    21d4:	4770      	bx	lr
    21d6:	46c0      	nop			; (mov r8, r8)

000021d8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    21d8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    21da:	4b05      	ldr	r3, [pc, #20]	; (21f0 <system_init+0x18>)
    21dc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    21de:	4b05      	ldr	r3, [pc, #20]	; (21f4 <system_init+0x1c>)
    21e0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    21e2:	4b05      	ldr	r3, [pc, #20]	; (21f8 <system_init+0x20>)
    21e4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    21e6:	4b05      	ldr	r3, [pc, #20]	; (21fc <system_init+0x24>)
    21e8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    21ea:	4b05      	ldr	r3, [pc, #20]	; (2200 <system_init+0x28>)
    21ec:	4798      	blx	r3
}
    21ee:	bd10      	pop	{r4, pc}
    21f0:	00001db9 	.word	0x00001db9
    21f4:	00000fb9 	.word	0x00000fb9
    21f8:	000021d5 	.word	0x000021d5
    21fc:	000021d5 	.word	0x000021d5
    2200:	000021d5 	.word	0x000021d5

00002204 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{		
    2204:	e7fe      	b.n	2204 <Dummy_Handler>
    2206:	46c0      	nop			; (mov r8, r8)

00002208 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    2208:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    220a:	4b2e      	ldr	r3, [pc, #184]	; (22c4 <Reset_Handler+0xbc>)
    220c:	4a2e      	ldr	r2, [pc, #184]	; (22c8 <Reset_Handler+0xc0>)
    220e:	429a      	cmp	r2, r3
    2210:	d003      	beq.n	221a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    2212:	4b2e      	ldr	r3, [pc, #184]	; (22cc <Reset_Handler+0xc4>)
    2214:	4a2b      	ldr	r2, [pc, #172]	; (22c4 <Reset_Handler+0xbc>)
    2216:	429a      	cmp	r2, r3
    2218:	d304      	bcc.n	2224 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    221a:	4b2d      	ldr	r3, [pc, #180]	; (22d0 <Reset_Handler+0xc8>)
    221c:	4a2d      	ldr	r2, [pc, #180]	; (22d4 <Reset_Handler+0xcc>)
    221e:	429a      	cmp	r2, r3
    2220:	d310      	bcc.n	2244 <Reset_Handler+0x3c>
    2222:	e01e      	b.n	2262 <Reset_Handler+0x5a>
    2224:	4a2c      	ldr	r2, [pc, #176]	; (22d8 <Reset_Handler+0xd0>)
    2226:	4b29      	ldr	r3, [pc, #164]	; (22cc <Reset_Handler+0xc4>)
    2228:	3303      	adds	r3, #3
    222a:	1a9b      	subs	r3, r3, r2
    222c:	089b      	lsrs	r3, r3, #2
    222e:	3301      	adds	r3, #1
    2230:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    2232:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2234:	4823      	ldr	r0, [pc, #140]	; (22c4 <Reset_Handler+0xbc>)
    2236:	4924      	ldr	r1, [pc, #144]	; (22c8 <Reset_Handler+0xc0>)
    2238:	588c      	ldr	r4, [r1, r2]
    223a:	5084      	str	r4, [r0, r2]
    223c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    223e:	429a      	cmp	r2, r3
    2240:	d1fa      	bne.n	2238 <Reset_Handler+0x30>
    2242:	e7ea      	b.n	221a <Reset_Handler+0x12>
    2244:	4a25      	ldr	r2, [pc, #148]	; (22dc <Reset_Handler+0xd4>)
    2246:	4b22      	ldr	r3, [pc, #136]	; (22d0 <Reset_Handler+0xc8>)
    2248:	3303      	adds	r3, #3
    224a:	1a9b      	subs	r3, r3, r2
    224c:	089b      	lsrs	r3, r3, #2
    224e:	3301      	adds	r3, #1
    2250:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2252:	2200      	movs	r2, #0
                *pDest++ = 0;
    2254:	481f      	ldr	r0, [pc, #124]	; (22d4 <Reset_Handler+0xcc>)
    2256:	2100      	movs	r1, #0
    2258:	1814      	adds	r4, r2, r0
    225a:	6021      	str	r1, [r4, #0]
    225c:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    225e:	429a      	cmp	r2, r3
    2260:	d1fa      	bne.n	2258 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2262:	4a1f      	ldr	r2, [pc, #124]	; (22e0 <Reset_Handler+0xd8>)
    2264:	21ff      	movs	r1, #255	; 0xff
    2266:	4b1f      	ldr	r3, [pc, #124]	; (22e4 <Reset_Handler+0xdc>)
    2268:	438b      	bics	r3, r1
    226a:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    226c:	39fd      	subs	r1, #253	; 0xfd
    226e:	2390      	movs	r3, #144	; 0x90
    2270:	005b      	lsls	r3, r3, #1
    2272:	4a1d      	ldr	r2, [pc, #116]	; (22e8 <Reset_Handler+0xe0>)
    2274:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2276:	481d      	ldr	r0, [pc, #116]	; (22ec <Reset_Handler+0xe4>)
    2278:	78c3      	ldrb	r3, [r0, #3]
    227a:	2403      	movs	r4, #3
    227c:	43a3      	bics	r3, r4
    227e:	2202      	movs	r2, #2
    2280:	4313      	orrs	r3, r2
    2282:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2284:	78c3      	ldrb	r3, [r0, #3]
    2286:	260c      	movs	r6, #12
    2288:	43b3      	bics	r3, r6
    228a:	2108      	movs	r1, #8
    228c:	430b      	orrs	r3, r1
    228e:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    2290:	4b17      	ldr	r3, [pc, #92]	; (22f0 <Reset_Handler+0xe8>)
    2292:	7b98      	ldrb	r0, [r3, #14]
    2294:	2530      	movs	r5, #48	; 0x30
    2296:	43a8      	bics	r0, r5
    2298:	0005      	movs	r5, r0
    229a:	2020      	movs	r0, #32
    229c:	4328      	orrs	r0, r5
    229e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    22a0:	7b98      	ldrb	r0, [r3, #14]
    22a2:	43b0      	bics	r0, r6
    22a4:	4301      	orrs	r1, r0
    22a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    22a8:	7b99      	ldrb	r1, [r3, #14]
    22aa:	43a1      	bics	r1, r4
    22ac:	430a      	orrs	r2, r1
    22ae:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    22b0:	4a10      	ldr	r2, [pc, #64]	; (22f4 <Reset_Handler+0xec>)
    22b2:	6851      	ldr	r1, [r2, #4]
    22b4:	2380      	movs	r3, #128	; 0x80
    22b6:	430b      	orrs	r3, r1
    22b8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    22ba:	4b0f      	ldr	r3, [pc, #60]	; (22f8 <Reset_Handler+0xf0>)
    22bc:	4798      	blx	r3

        /* Branch to main function */
        main();
    22be:	4b0f      	ldr	r3, [pc, #60]	; (22fc <Reset_Handler+0xf4>)
    22c0:	4798      	blx	r3
    22c2:	e7fe      	b.n	22c2 <Reset_Handler+0xba>
    22c4:	20000000 	.word	0x20000000
    22c8:	000029d0 	.word	0x000029d0
    22cc:	20000014 	.word	0x20000014
    22d0:	200002bc 	.word	0x200002bc
    22d4:	20000018 	.word	0x20000018
    22d8:	20000004 	.word	0x20000004
    22dc:	2000001c 	.word	0x2000001c
    22e0:	e000ed00 	.word	0xe000ed00
    22e4:	00000000 	.word	0x00000000
    22e8:	41007000 	.word	0x41007000
    22ec:	41005000 	.word	0x41005000
    22f0:	41004800 	.word	0x41004800
    22f4:	41004000 	.word	0x41004000
    22f8:	000028ad 	.word	0x000028ad
    22fc:	00002415 	.word	0x00002415

00002300 <loop>:
		}
	}
	return 0;
}

void loop() {
    2300:	b5f0      	push	{r4, r5, r6, r7, lr}
    2302:	4647      	mov	r7, r8
    2304:	b480      	push	{r7}
	if(state == ZEROSCALING) {
    2306:	4b36      	ldr	r3, [pc, #216]	; (23e0 <loop+0xe0>)
    2308:	781b      	ldrb	r3, [r3, #0]
    230a:	2b00      	cmp	r3, #0
    230c:	d128      	bne.n	2360 <loop+0x60>
		zoffset = 0;
    230e:	2000      	movs	r0, #0
    2310:	2100      	movs	r1, #0
    2312:	4b34      	ldr	r3, [pc, #208]	; (23e4 <loop+0xe4>)
    2314:	6018      	str	r0, [r3, #0]
    2316:	6059      	str	r1, [r3, #4]
    2318:	4c33      	ldr	r4, [pc, #204]	; (23e8 <loop+0xe8>)
    231a:	0027      	movs	r7, r4
    231c:	3778      	adds	r7, #120	; 0x78
    231e:	0025      	movs	r5, r4
		for(uint16_t i = 0; i < DATA_COLLECTED; i++) {
			col_data[i] = get_data_from_landingsensor(1);
    2320:	4b32      	ldr	r3, [pc, #200]	; (23ec <loop+0xec>)
    2322:	4698      	mov	r8, r3
			zoffset += col_data[i];
    2324:	4e2f      	ldr	r6, [pc, #188]	; (23e4 <loop+0xe4>)

void loop() {
	if(state == ZEROSCALING) {
		zoffset = 0;
		for(uint16_t i = 0; i < DATA_COLLECTED; i++) {
			col_data[i] = get_data_from_landingsensor(1);
    2326:	2001      	movs	r0, #1
    2328:	47c0      	blx	r8
    232a:	c503      	stmia	r5!, {r0, r1}
			zoffset += col_data[i];
    232c:	6832      	ldr	r2, [r6, #0]
    232e:	6873      	ldr	r3, [r6, #4]
    2330:	1880      	adds	r0, r0, r2
    2332:	4159      	adcs	r1, r3
    2334:	6030      	str	r0, [r6, #0]
    2336:	6071      	str	r1, [r6, #4]
}

void loop() {
	if(state == ZEROSCALING) {
		zoffset = 0;
		for(uint16_t i = 0; i < DATA_COLLECTED; i++) {
    2338:	42bd      	cmp	r5, r7
    233a:	d1f4      	bne.n	2326 <loop+0x26>
			col_data[i] = get_data_from_landingsensor(1);
			zoffset += col_data[i];
		}
		for(uint16_t i = 0; i < DATA_COLLECTED; i++) {
			col_data[i] -= zoffset;
    233c:	6822      	ldr	r2, [r4, #0]
    233e:	6863      	ldr	r3, [r4, #4]
    2340:	1a12      	subs	r2, r2, r0
    2342:	418b      	sbcs	r3, r1
    2344:	c40c      	stmia	r4!, {r2, r3}
		zoffset = 0;
		for(uint16_t i = 0; i < DATA_COLLECTED; i++) {
			col_data[i] = get_data_from_landingsensor(1);
			zoffset += col_data[i];
		}
		for(uint16_t i = 0; i < DATA_COLLECTED; i++) {
    2346:	42bc      	cmp	r4, r7
    2348:	d1f8      	bne.n	233c <loop+0x3c>
			col_data[i] -= zoffset;
		}
		zoffset = zoffset/DATA_COLLECTED;
    234a:	220f      	movs	r2, #15
    234c:	2300      	movs	r3, #0
    234e:	4c28      	ldr	r4, [pc, #160]	; (23f0 <loop+0xf0>)
    2350:	47a0      	blx	r4
    2352:	4b24      	ldr	r3, [pc, #144]	; (23e4 <loop+0xe4>)
    2354:	6018      	str	r0, [r3, #0]
    2356:	6059      	str	r1, [r3, #4]
		state = SENDINGDATA;
    2358:	2201      	movs	r2, #1
    235a:	4b21      	ldr	r3, [pc, #132]	; (23e0 <loop+0xe0>)
    235c:	701a      	strb	r2, [r3, #0]
    235e:	e03b      	b.n	23d8 <loop+0xd8>
	} else if (state == SENDINGDATA)
    2360:	2b01      	cmp	r3, #1
    2362:	d139      	bne.n	23d8 <loop+0xd8>
	{
		data = get_data_from_landingsensor(1) - zoffset;
    2364:	2001      	movs	r0, #1
    2366:	4b21      	ldr	r3, [pc, #132]	; (23ec <loop+0xec>)
    2368:	4798      	blx	r3
    236a:	4b1e      	ldr	r3, [pc, #120]	; (23e4 <loop+0xe4>)
    236c:	681a      	ldr	r2, [r3, #0]
    236e:	685b      	ldr	r3, [r3, #4]
    2370:	1a80      	subs	r0, r0, r2
    2372:	4199      	sbcs	r1, r3
    2374:	4c1f      	ldr	r4, [pc, #124]	; (23f4 <loop+0xf4>)
    2376:	6020      	str	r0, [r4, #0]
    2378:	6061      	str	r1, [r4, #4]
		data = moving_average(data);
    237a:	4b1f      	ldr	r3, [pc, #124]	; (23f8 <loop+0xf8>)
    237c:	4798      	blx	r3
    237e:	6020      	str	r0, [r4, #0]
    2380:	6061      	str	r1, [r4, #4]
		//printint(get_data_from_landingsensor(1));
		print("\n",	1);
		#endif // CALIBRATE;
	
		#ifndef CALIBRATE
		if(data > 1200000) { //airborn
    2382:	2900      	cmp	r1, #0
    2384:	dc03      	bgt.n	238e <loop+0x8e>
    2386:	d112      	bne.n	23ae <loop+0xae>
    2388:	4b1c      	ldr	r3, [pc, #112]	; (23fc <loop+0xfc>)
    238a:	4298      	cmp	r0, r3
    238c:	d90f      	bls.n	23ae <loop+0xae>
			//if(bumpers_is_pushed()) { //bumper activated
			if(drone_state == AIRBORN) {
    238e:	4b1c      	ldr	r3, [pc, #112]	; (2400 <loop+0x100>)
    2390:	781b      	ldrb	r3, [r3, #0]
    2392:	2b00      	cmp	r3, #0
    2394:	d103      	bne.n	239e <loop+0x9e>
				tc_set_data_to_send('a');
    2396:	2061      	movs	r0, #97	; 0x61
    2398:	4b1a      	ldr	r3, [pc, #104]	; (2404 <loop+0x104>)
    239a:	4798      	blx	r3
    239c:	e01c      	b.n	23d8 <loop+0xd8>
				
			} else {		//just landed
				print("a", 1); 
    239e:	2101      	movs	r1, #1
    23a0:	4819      	ldr	r0, [pc, #100]	; (2408 <loop+0x108>)
    23a2:	4b1a      	ldr	r3, [pc, #104]	; (240c <loop+0x10c>)
    23a4:	4798      	blx	r3
				drone_state = AIRBORN;
    23a6:	2200      	movs	r2, #0
    23a8:	4b15      	ldr	r3, [pc, #84]	; (2400 <loop+0x100>)
    23aa:	701a      	strb	r2, [r3, #0]
    23ac:	e014      	b.n	23d8 <loop+0xd8>
			}
			//setBufData('l');
		} 
		else if (data != 0) //landed
    23ae:	4301      	orrs	r1, r0
    23b0:	d00f      	beq.n	23d2 <loop+0xd2>
		{
			if(drone_state == LANDED) {
    23b2:	4b13      	ldr	r3, [pc, #76]	; (2400 <loop+0x100>)
    23b4:	781b      	ldrb	r3, [r3, #0]
    23b6:	2b01      	cmp	r3, #1
    23b8:	d103      	bne.n	23c2 <loop+0xc2>
				tc_set_data_to_send('l');
    23ba:	206c      	movs	r0, #108	; 0x6c
    23bc:	4b11      	ldr	r3, [pc, #68]	; (2404 <loop+0x104>)
    23be:	4798      	blx	r3
    23c0:	e00a      	b.n	23d8 <loop+0xd8>
				
			} 
			else {		  //just landed
				print("l", 1);
    23c2:	2101      	movs	r1, #1
    23c4:	4812      	ldr	r0, [pc, #72]	; (2410 <loop+0x110>)
    23c6:	4b11      	ldr	r3, [pc, #68]	; (240c <loop+0x10c>)
    23c8:	4798      	blx	r3
				drone_state = LANDED;
    23ca:	2201      	movs	r2, #1
    23cc:	4b0c      	ldr	r3, [pc, #48]	; (2400 <loop+0x100>)
    23ce:	701a      	strb	r2, [r3, #0]
    23d0:	e002      	b.n	23d8 <loop+0xd8>
			}
		} 
		else { //error
			tc_set_data_to_send('e');
    23d2:	2065      	movs	r0, #101	; 0x65
    23d4:	4b0b      	ldr	r3, [pc, #44]	; (2404 <loop+0x104>)
    23d6:	4798      	blx	r3
			
		}
		#endif // CALIBRATE
			
	}
}
    23d8:	bc04      	pop	{r2}
    23da:	4690      	mov	r8, r2
    23dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23de:	46c0      	nop			; (mov r8, r8)
    23e0:	200002b9 	.word	0x200002b9
    23e4:	20000080 	.word	0x20000080
    23e8:	200000c0 	.word	0x200000c0
    23ec:	000002ad 	.word	0x000002ad
    23f0:	000025c5 	.word	0x000025c5
    23f4:	20000078 	.word	0x20000078
    23f8:	00000279 	.word	0x00000279
    23fc:	00124f80 	.word	0x00124f80
    2400:	200002b8 	.word	0x200002b8
    2404:	00000e69 	.word	0x00000e69
    2408:	000029a0 	.word	0x000029a0
    240c:	00000f31 	.word	0x00000f31
    2410:	000029a4 	.word	0x000029a4

00002414 <main>:
int64_t zoffset = 0;

void loop();

int main(void)
{
    2414:	b570      	push	{r4, r5, r6, lr}
    2416:	b084      	sub	sp, #16
		
	system_init();
    2418:	4b17      	ldr	r3, [pc, #92]	; (2478 <main+0x64>)
    241a:	4798      	blx	r3
    241c:	4b17      	ldr	r3, [pc, #92]	; (247c <main+0x68>)
    241e:	001a      	movs	r2, r3
    2420:	3278      	adds	r2, #120	; 0x78

	for (uint16_t i = 0; i < DATA_COLLECTED; i++)
	{
		col_data[i] = 0;
    2422:	2000      	movs	r0, #0
    2424:	2100      	movs	r1, #0
    2426:	c303      	stmia	r3!, {r0, r1}
int main(void)
{
		
	system_init();

	for (uint16_t i = 0; i < DATA_COLLECTED; i++)
    2428:	4293      	cmp	r3, r2
    242a:	d1fc      	bne.n	2426 <main+0x12>
	{
		col_data[i] = 0;
	}

	configure_usart();
    242c:	4b14      	ldr	r3, [pc, #80]	; (2480 <main+0x6c>)
    242e:	4798      	blx	r3
	//configure_usart_callbacks();
	configure_spi_master();
    2430:	4b14      	ldr	r3, [pc, #80]	; (2484 <main+0x70>)
    2432:	4798      	blx	r3
	configure_AD7192();
    2434:	4b14      	ldr	r3, [pc, #80]	; (2488 <main+0x74>)
    2436:	4798      	blx	r3
	
	#ifndef CALIBRATE
	configure_tc();
    2438:	4b14      	ldr	r3, [pc, #80]	; (248c <main+0x78>)
    243a:	4798      	blx	r3
	configure_tc_callbacks();
    243c:	4b14      	ldr	r3, [pc, #80]	; (2490 <main+0x7c>)
    243e:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    2440:	2301      	movs	r3, #1
    2442:	4a14      	ldr	r2, [pc, #80]	; (2494 <main+0x80>)
    2444:	7013      	strb	r3, [r2, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2446:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    244a:	b662      	cpsie	i
	#endif //CALIBRATE

	system_interrupt_enable_global();

	//rintln("Testing start", sizeof("Testing start"));
	state = ZEROSCALING;
    244c:	2100      	movs	r1, #0
    244e:	4a12      	ldr	r2, [pc, #72]	; (2498 <main+0x84>)
    2450:	7011      	strb	r1, [r2, #0]

	int8_t uart_read_data[16];
	drone_state = LANDED;
    2452:	4a12      	ldr	r2, [pc, #72]	; (249c <main+0x88>)
    2454:	7013      	strb	r3, [r2, #0]
	while (1) {
		
		loop();
    2456:	4e12      	ldr	r6, [pc, #72]	; (24a0 <main+0x8c>)
		usart_read_wait(&usart_instance, uart_read_data);
    2458:	4d12      	ldr	r5, [pc, #72]	; (24a4 <main+0x90>)
    245a:	4c13      	ldr	r4, [pc, #76]	; (24a8 <main+0x94>)

	int8_t uart_read_data[16];
	drone_state = LANDED;
	while (1) {
		
		loop();
    245c:	47b0      	blx	r6
		usart_read_wait(&usart_instance, uart_read_data);
    245e:	4669      	mov	r1, sp
    2460:	0028      	movs	r0, r5
    2462:	47a0      	blx	r4
		if (uart_read_data[0] == 'r')
    2464:	466b      	mov	r3, sp
    2466:	781b      	ldrb	r3, [r3, #0]
    2468:	b25b      	sxtb	r3, r3
    246a:	2b72      	cmp	r3, #114	; 0x72
    246c:	d1f6      	bne.n	245c <main+0x48>
		{
			state = ZEROSCALING;
    246e:	2200      	movs	r2, #0
    2470:	4b09      	ldr	r3, [pc, #36]	; (2498 <main+0x84>)
    2472:	701a      	strb	r2, [r3, #0]
    2474:	e7f2      	b.n	245c <main+0x48>
    2476:	46c0      	nop			; (mov r8, r8)
    2478:	000021d9 	.word	0x000021d9
    247c:	200000c0 	.word	0x200000c0
    2480:	00000e75 	.word	0x00000e75
    2484:	000008d1 	.word	0x000008d1
    2488:	00000149 	.word	0x00000149
    248c:	00000dad 	.word	0x00000dad
    2490:	00000e1d 	.word	0x00000e1d
    2494:	20000011 	.word	0x20000011
    2498:	200002b9 	.word	0x200002b9
    249c:	200002b8 	.word	0x200002b8
    24a0:	00002301 	.word	0x00002301
    24a4:	20000088 	.word	0x20000088
    24a8:	00001b1d 	.word	0x00001b1d

000024ac <__aeabi_uidiv>:
    24ac:	2200      	movs	r2, #0
    24ae:	0843      	lsrs	r3, r0, #1
    24b0:	428b      	cmp	r3, r1
    24b2:	d374      	bcc.n	259e <__aeabi_uidiv+0xf2>
    24b4:	0903      	lsrs	r3, r0, #4
    24b6:	428b      	cmp	r3, r1
    24b8:	d35f      	bcc.n	257a <__aeabi_uidiv+0xce>
    24ba:	0a03      	lsrs	r3, r0, #8
    24bc:	428b      	cmp	r3, r1
    24be:	d344      	bcc.n	254a <__aeabi_uidiv+0x9e>
    24c0:	0b03      	lsrs	r3, r0, #12
    24c2:	428b      	cmp	r3, r1
    24c4:	d328      	bcc.n	2518 <__aeabi_uidiv+0x6c>
    24c6:	0c03      	lsrs	r3, r0, #16
    24c8:	428b      	cmp	r3, r1
    24ca:	d30d      	bcc.n	24e8 <__aeabi_uidiv+0x3c>
    24cc:	22ff      	movs	r2, #255	; 0xff
    24ce:	0209      	lsls	r1, r1, #8
    24d0:	ba12      	rev	r2, r2
    24d2:	0c03      	lsrs	r3, r0, #16
    24d4:	428b      	cmp	r3, r1
    24d6:	d302      	bcc.n	24de <__aeabi_uidiv+0x32>
    24d8:	1212      	asrs	r2, r2, #8
    24da:	0209      	lsls	r1, r1, #8
    24dc:	d065      	beq.n	25aa <__aeabi_uidiv+0xfe>
    24de:	0b03      	lsrs	r3, r0, #12
    24e0:	428b      	cmp	r3, r1
    24e2:	d319      	bcc.n	2518 <__aeabi_uidiv+0x6c>
    24e4:	e000      	b.n	24e8 <__aeabi_uidiv+0x3c>
    24e6:	0a09      	lsrs	r1, r1, #8
    24e8:	0bc3      	lsrs	r3, r0, #15
    24ea:	428b      	cmp	r3, r1
    24ec:	d301      	bcc.n	24f2 <__aeabi_uidiv+0x46>
    24ee:	03cb      	lsls	r3, r1, #15
    24f0:	1ac0      	subs	r0, r0, r3
    24f2:	4152      	adcs	r2, r2
    24f4:	0b83      	lsrs	r3, r0, #14
    24f6:	428b      	cmp	r3, r1
    24f8:	d301      	bcc.n	24fe <__aeabi_uidiv+0x52>
    24fa:	038b      	lsls	r3, r1, #14
    24fc:	1ac0      	subs	r0, r0, r3
    24fe:	4152      	adcs	r2, r2
    2500:	0b43      	lsrs	r3, r0, #13
    2502:	428b      	cmp	r3, r1
    2504:	d301      	bcc.n	250a <__aeabi_uidiv+0x5e>
    2506:	034b      	lsls	r3, r1, #13
    2508:	1ac0      	subs	r0, r0, r3
    250a:	4152      	adcs	r2, r2
    250c:	0b03      	lsrs	r3, r0, #12
    250e:	428b      	cmp	r3, r1
    2510:	d301      	bcc.n	2516 <__aeabi_uidiv+0x6a>
    2512:	030b      	lsls	r3, r1, #12
    2514:	1ac0      	subs	r0, r0, r3
    2516:	4152      	adcs	r2, r2
    2518:	0ac3      	lsrs	r3, r0, #11
    251a:	428b      	cmp	r3, r1
    251c:	d301      	bcc.n	2522 <__aeabi_uidiv+0x76>
    251e:	02cb      	lsls	r3, r1, #11
    2520:	1ac0      	subs	r0, r0, r3
    2522:	4152      	adcs	r2, r2
    2524:	0a83      	lsrs	r3, r0, #10
    2526:	428b      	cmp	r3, r1
    2528:	d301      	bcc.n	252e <__aeabi_uidiv+0x82>
    252a:	028b      	lsls	r3, r1, #10
    252c:	1ac0      	subs	r0, r0, r3
    252e:	4152      	adcs	r2, r2
    2530:	0a43      	lsrs	r3, r0, #9
    2532:	428b      	cmp	r3, r1
    2534:	d301      	bcc.n	253a <__aeabi_uidiv+0x8e>
    2536:	024b      	lsls	r3, r1, #9
    2538:	1ac0      	subs	r0, r0, r3
    253a:	4152      	adcs	r2, r2
    253c:	0a03      	lsrs	r3, r0, #8
    253e:	428b      	cmp	r3, r1
    2540:	d301      	bcc.n	2546 <__aeabi_uidiv+0x9a>
    2542:	020b      	lsls	r3, r1, #8
    2544:	1ac0      	subs	r0, r0, r3
    2546:	4152      	adcs	r2, r2
    2548:	d2cd      	bcs.n	24e6 <__aeabi_uidiv+0x3a>
    254a:	09c3      	lsrs	r3, r0, #7
    254c:	428b      	cmp	r3, r1
    254e:	d301      	bcc.n	2554 <__aeabi_uidiv+0xa8>
    2550:	01cb      	lsls	r3, r1, #7
    2552:	1ac0      	subs	r0, r0, r3
    2554:	4152      	adcs	r2, r2
    2556:	0983      	lsrs	r3, r0, #6
    2558:	428b      	cmp	r3, r1
    255a:	d301      	bcc.n	2560 <__aeabi_uidiv+0xb4>
    255c:	018b      	lsls	r3, r1, #6
    255e:	1ac0      	subs	r0, r0, r3
    2560:	4152      	adcs	r2, r2
    2562:	0943      	lsrs	r3, r0, #5
    2564:	428b      	cmp	r3, r1
    2566:	d301      	bcc.n	256c <__aeabi_uidiv+0xc0>
    2568:	014b      	lsls	r3, r1, #5
    256a:	1ac0      	subs	r0, r0, r3
    256c:	4152      	adcs	r2, r2
    256e:	0903      	lsrs	r3, r0, #4
    2570:	428b      	cmp	r3, r1
    2572:	d301      	bcc.n	2578 <__aeabi_uidiv+0xcc>
    2574:	010b      	lsls	r3, r1, #4
    2576:	1ac0      	subs	r0, r0, r3
    2578:	4152      	adcs	r2, r2
    257a:	08c3      	lsrs	r3, r0, #3
    257c:	428b      	cmp	r3, r1
    257e:	d301      	bcc.n	2584 <__aeabi_uidiv+0xd8>
    2580:	00cb      	lsls	r3, r1, #3
    2582:	1ac0      	subs	r0, r0, r3
    2584:	4152      	adcs	r2, r2
    2586:	0883      	lsrs	r3, r0, #2
    2588:	428b      	cmp	r3, r1
    258a:	d301      	bcc.n	2590 <__aeabi_uidiv+0xe4>
    258c:	008b      	lsls	r3, r1, #2
    258e:	1ac0      	subs	r0, r0, r3
    2590:	4152      	adcs	r2, r2
    2592:	0843      	lsrs	r3, r0, #1
    2594:	428b      	cmp	r3, r1
    2596:	d301      	bcc.n	259c <__aeabi_uidiv+0xf0>
    2598:	004b      	lsls	r3, r1, #1
    259a:	1ac0      	subs	r0, r0, r3
    259c:	4152      	adcs	r2, r2
    259e:	1a41      	subs	r1, r0, r1
    25a0:	d200      	bcs.n	25a4 <__aeabi_uidiv+0xf8>
    25a2:	4601      	mov	r1, r0
    25a4:	4152      	adcs	r2, r2
    25a6:	4610      	mov	r0, r2
    25a8:	4770      	bx	lr
    25aa:	e7ff      	b.n	25ac <__aeabi_uidiv+0x100>
    25ac:	b501      	push	{r0, lr}
    25ae:	2000      	movs	r0, #0
    25b0:	f000 f806 	bl	25c0 <__aeabi_idiv0>
    25b4:	bd02      	pop	{r1, pc}
    25b6:	46c0      	nop			; (mov r8, r8)

000025b8 <__aeabi_uidivmod>:
    25b8:	2900      	cmp	r1, #0
    25ba:	d0f7      	beq.n	25ac <__aeabi_uidiv+0x100>
    25bc:	e776      	b.n	24ac <__aeabi_uidiv>
    25be:	4770      	bx	lr

000025c0 <__aeabi_idiv0>:
    25c0:	4770      	bx	lr
    25c2:	46c0      	nop			; (mov r8, r8)

000025c4 <__aeabi_ldivmod>:
    25c4:	2b00      	cmp	r3, #0
    25c6:	d115      	bne.n	25f4 <__aeabi_ldivmod+0x30>
    25c8:	2a00      	cmp	r2, #0
    25ca:	d113      	bne.n	25f4 <__aeabi_ldivmod+0x30>
    25cc:	2900      	cmp	r1, #0
    25ce:	db06      	blt.n	25de <__aeabi_ldivmod+0x1a>
    25d0:	dc01      	bgt.n	25d6 <__aeabi_ldivmod+0x12>
    25d2:	2800      	cmp	r0, #0
    25d4:	d006      	beq.n	25e4 <__aeabi_ldivmod+0x20>
    25d6:	2000      	movs	r0, #0
    25d8:	43c0      	mvns	r0, r0
    25da:	0841      	lsrs	r1, r0, #1
    25dc:	e002      	b.n	25e4 <__aeabi_ldivmod+0x20>
    25de:	2180      	movs	r1, #128	; 0x80
    25e0:	0609      	lsls	r1, r1, #24
    25e2:	2000      	movs	r0, #0
    25e4:	b407      	push	{r0, r1, r2}
    25e6:	4802      	ldr	r0, [pc, #8]	; (25f0 <__aeabi_ldivmod+0x2c>)
    25e8:	a101      	add	r1, pc, #4	; (adr r1, 25f0 <__aeabi_ldivmod+0x2c>)
    25ea:	1840      	adds	r0, r0, r1
    25ec:	9002      	str	r0, [sp, #8]
    25ee:	bd03      	pop	{r0, r1, pc}
    25f0:	ffffffd1 	.word	0xffffffd1
    25f4:	b403      	push	{r0, r1}
    25f6:	4668      	mov	r0, sp
    25f8:	b501      	push	{r0, lr}
    25fa:	9802      	ldr	r0, [sp, #8]
    25fc:	f000 f832 	bl	2664 <__gnu_ldivmod_helper>
    2600:	9b01      	ldr	r3, [sp, #4]
    2602:	469e      	mov	lr, r3
    2604:	b002      	add	sp, #8
    2606:	bc0c      	pop	{r2, r3}
    2608:	4770      	bx	lr
    260a:	46c0      	nop			; (mov r8, r8)

0000260c <__aeabi_lmul>:
    260c:	b5f0      	push	{r4, r5, r6, r7, lr}
    260e:	464f      	mov	r7, r9
    2610:	4646      	mov	r6, r8
    2612:	b4c0      	push	{r6, r7}
    2614:	0416      	lsls	r6, r2, #16
    2616:	0c36      	lsrs	r6, r6, #16
    2618:	4699      	mov	r9, r3
    261a:	0033      	movs	r3, r6
    261c:	0405      	lsls	r5, r0, #16
    261e:	0c2c      	lsrs	r4, r5, #16
    2620:	0c07      	lsrs	r7, r0, #16
    2622:	0c15      	lsrs	r5, r2, #16
    2624:	4363      	muls	r3, r4
    2626:	437e      	muls	r6, r7
    2628:	436f      	muls	r7, r5
    262a:	4365      	muls	r5, r4
    262c:	0c1c      	lsrs	r4, r3, #16
    262e:	19ad      	adds	r5, r5, r6
    2630:	1964      	adds	r4, r4, r5
    2632:	469c      	mov	ip, r3
    2634:	42a6      	cmp	r6, r4
    2636:	d903      	bls.n	2640 <__aeabi_lmul+0x34>
    2638:	2380      	movs	r3, #128	; 0x80
    263a:	025b      	lsls	r3, r3, #9
    263c:	4698      	mov	r8, r3
    263e:	4447      	add	r7, r8
    2640:	4663      	mov	r3, ip
    2642:	0c25      	lsrs	r5, r4, #16
    2644:	19ef      	adds	r7, r5, r7
    2646:	041d      	lsls	r5, r3, #16
    2648:	464b      	mov	r3, r9
    264a:	434a      	muls	r2, r1
    264c:	4343      	muls	r3, r0
    264e:	0c2d      	lsrs	r5, r5, #16
    2650:	0424      	lsls	r4, r4, #16
    2652:	1964      	adds	r4, r4, r5
    2654:	1899      	adds	r1, r3, r2
    2656:	19c9      	adds	r1, r1, r7
    2658:	0020      	movs	r0, r4
    265a:	bc0c      	pop	{r2, r3}
    265c:	4690      	mov	r8, r2
    265e:	4699      	mov	r9, r3
    2660:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2662:	46c0      	nop			; (mov r8, r8)

00002664 <__gnu_ldivmod_helper>:
    2664:	b5f0      	push	{r4, r5, r6, r7, lr}
    2666:	b083      	sub	sp, #12
    2668:	0016      	movs	r6, r2
    266a:	001f      	movs	r7, r3
    266c:	9000      	str	r0, [sp, #0]
    266e:	9101      	str	r1, [sp, #4]
    2670:	f000 f814 	bl	269c <__divdi3>
    2674:	0004      	movs	r4, r0
    2676:	000d      	movs	r5, r1
    2678:	0002      	movs	r2, r0
    267a:	000b      	movs	r3, r1
    267c:	0030      	movs	r0, r6
    267e:	0039      	movs	r1, r7
    2680:	f7ff ffc4 	bl	260c <__aeabi_lmul>
    2684:	9a00      	ldr	r2, [sp, #0]
    2686:	9b01      	ldr	r3, [sp, #4]
    2688:	1a12      	subs	r2, r2, r0
    268a:	418b      	sbcs	r3, r1
    268c:	9908      	ldr	r1, [sp, #32]
    268e:	0020      	movs	r0, r4
    2690:	600a      	str	r2, [r1, #0]
    2692:	604b      	str	r3, [r1, #4]
    2694:	0029      	movs	r1, r5
    2696:	b003      	add	sp, #12
    2698:	bdf0      	pop	{r4, r5, r6, r7, pc}
    269a:	46c0      	nop			; (mov r8, r8)

0000269c <__divdi3>:
    269c:	b5f0      	push	{r4, r5, r6, r7, lr}
    269e:	4644      	mov	r4, r8
    26a0:	465f      	mov	r7, fp
    26a2:	4656      	mov	r6, sl
    26a4:	464d      	mov	r5, r9
    26a6:	b4f0      	push	{r4, r5, r6, r7}
    26a8:	001c      	movs	r4, r3
    26aa:	b083      	sub	sp, #12
    26ac:	2900      	cmp	r1, #0
    26ae:	da00      	bge.n	26b2 <__divdi3+0x16>
    26b0:	e092      	b.n	27d8 <__divdi3+0x13c>
    26b2:	000f      	movs	r7, r1
    26b4:	2100      	movs	r1, #0
    26b6:	0006      	movs	r6, r0
    26b8:	468a      	mov	sl, r1
    26ba:	0010      	movs	r0, r2
    26bc:	0019      	movs	r1, r3
    26be:	2c00      	cmp	r4, #0
    26c0:	da00      	bge.n	26c4 <__divdi3+0x28>
    26c2:	e080      	b.n	27c6 <__divdi3+0x12a>
    26c4:	0034      	movs	r4, r6
    26c6:	003d      	movs	r5, r7
    26c8:	4681      	mov	r9, r0
    26ca:	4688      	mov	r8, r1
    26cc:	42b9      	cmp	r1, r7
    26ce:	d869      	bhi.n	27a4 <__divdi3+0x108>
    26d0:	d066      	beq.n	27a0 <__divdi3+0x104>
    26d2:	4641      	mov	r1, r8
    26d4:	4648      	mov	r0, r9
    26d6:	f000 f8bf 	bl	2858 <__clzdi2>
    26da:	4683      	mov	fp, r0
    26dc:	0039      	movs	r1, r7
    26de:	0030      	movs	r0, r6
    26e0:	f000 f8ba 	bl	2858 <__clzdi2>
    26e4:	465b      	mov	r3, fp
    26e6:	1a1b      	subs	r3, r3, r0
    26e8:	469c      	mov	ip, r3
    26ea:	3b20      	subs	r3, #32
    26ec:	469b      	mov	fp, r3
    26ee:	d500      	bpl.n	26f2 <__divdi3+0x56>
    26f0:	e086      	b.n	2800 <__divdi3+0x164>
    26f2:	4649      	mov	r1, r9
    26f4:	4658      	mov	r0, fp
    26f6:	4081      	lsls	r1, r0
    26f8:	000b      	movs	r3, r1
    26fa:	4649      	mov	r1, r9
    26fc:	4660      	mov	r0, ip
    26fe:	4081      	lsls	r1, r0
    2700:	000a      	movs	r2, r1
    2702:	42bb      	cmp	r3, r7
    2704:	d900      	bls.n	2708 <__divdi3+0x6c>
    2706:	e071      	b.n	27ec <__divdi3+0x150>
    2708:	d06d      	beq.n	27e6 <__divdi3+0x14a>
    270a:	0034      	movs	r4, r6
    270c:	003d      	movs	r5, r7
    270e:	4659      	mov	r1, fp
    2710:	1aa4      	subs	r4, r4, r2
    2712:	419d      	sbcs	r5, r3
    2714:	2900      	cmp	r1, #0
    2716:	da00      	bge.n	271a <__divdi3+0x7e>
    2718:	e089      	b.n	282e <__divdi3+0x192>
    271a:	2100      	movs	r1, #0
    271c:	2000      	movs	r0, #0
    271e:	2601      	movs	r6, #1
    2720:	9000      	str	r0, [sp, #0]
    2722:	9101      	str	r1, [sp, #4]
    2724:	4659      	mov	r1, fp
    2726:	408e      	lsls	r6, r1
    2728:	9601      	str	r6, [sp, #4]
    272a:	4661      	mov	r1, ip
    272c:	2601      	movs	r6, #1
    272e:	408e      	lsls	r6, r1
    2730:	4661      	mov	r1, ip
    2732:	9600      	str	r6, [sp, #0]
    2734:	2900      	cmp	r1, #0
    2736:	d060      	beq.n	27fa <__divdi3+0x15e>
    2738:	07d9      	lsls	r1, r3, #31
    273a:	0856      	lsrs	r6, r2, #1
    273c:	430e      	orrs	r6, r1
    273e:	085f      	lsrs	r7, r3, #1
    2740:	4661      	mov	r1, ip
    2742:	2201      	movs	r2, #1
    2744:	2300      	movs	r3, #0
    2746:	e00c      	b.n	2762 <__divdi3+0xc6>
    2748:	42af      	cmp	r7, r5
    274a:	d101      	bne.n	2750 <__divdi3+0xb4>
    274c:	42a6      	cmp	r6, r4
    274e:	d80a      	bhi.n	2766 <__divdi3+0xca>
    2750:	1ba4      	subs	r4, r4, r6
    2752:	41bd      	sbcs	r5, r7
    2754:	1924      	adds	r4, r4, r4
    2756:	416d      	adcs	r5, r5
    2758:	3901      	subs	r1, #1
    275a:	18a4      	adds	r4, r4, r2
    275c:	415d      	adcs	r5, r3
    275e:	2900      	cmp	r1, #0
    2760:	d006      	beq.n	2770 <__divdi3+0xd4>
    2762:	42af      	cmp	r7, r5
    2764:	d9f0      	bls.n	2748 <__divdi3+0xac>
    2766:	3901      	subs	r1, #1
    2768:	1924      	adds	r4, r4, r4
    276a:	416d      	adcs	r5, r5
    276c:	2900      	cmp	r1, #0
    276e:	d1f8      	bne.n	2762 <__divdi3+0xc6>
    2770:	465b      	mov	r3, fp
    2772:	9800      	ldr	r0, [sp, #0]
    2774:	9901      	ldr	r1, [sp, #4]
    2776:	1900      	adds	r0, r0, r4
    2778:	4169      	adcs	r1, r5
    277a:	2b00      	cmp	r3, #0
    277c:	db4c      	blt.n	2818 <__divdi3+0x17c>
    277e:	002e      	movs	r6, r5
    2780:	40de      	lsrs	r6, r3
    2782:	4663      	mov	r3, ip
    2784:	002c      	movs	r4, r5
    2786:	40dc      	lsrs	r4, r3
    2788:	465b      	mov	r3, fp
    278a:	2b00      	cmp	r3, #0
    278c:	db5a      	blt.n	2844 <__divdi3+0x1a8>
    278e:	0034      	movs	r4, r6
    2790:	409c      	lsls	r4, r3
    2792:	0023      	movs	r3, r4
    2794:	4664      	mov	r4, ip
    2796:	40a6      	lsls	r6, r4
    2798:	0032      	movs	r2, r6
    279a:	1a80      	subs	r0, r0, r2
    279c:	4199      	sbcs	r1, r3
    279e:	e003      	b.n	27a8 <__divdi3+0x10c>
    27a0:	42b0      	cmp	r0, r6
    27a2:	d996      	bls.n	26d2 <__divdi3+0x36>
    27a4:	2000      	movs	r0, #0
    27a6:	2100      	movs	r1, #0
    27a8:	4653      	mov	r3, sl
    27aa:	2b00      	cmp	r3, #0
    27ac:	d004      	beq.n	27b8 <__divdi3+0x11c>
    27ae:	0003      	movs	r3, r0
    27b0:	000c      	movs	r4, r1
    27b2:	2100      	movs	r1, #0
    27b4:	4258      	negs	r0, r3
    27b6:	41a1      	sbcs	r1, r4
    27b8:	b003      	add	sp, #12
    27ba:	bc3c      	pop	{r2, r3, r4, r5}
    27bc:	4690      	mov	r8, r2
    27be:	4699      	mov	r9, r3
    27c0:	46a2      	mov	sl, r4
    27c2:	46ab      	mov	fp, r5
    27c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27c6:	4653      	mov	r3, sl
    27c8:	43db      	mvns	r3, r3
    27ca:	000c      	movs	r4, r1
    27cc:	469a      	mov	sl, r3
    27ce:	0013      	movs	r3, r2
    27d0:	2100      	movs	r1, #0
    27d2:	4258      	negs	r0, r3
    27d4:	41a1      	sbcs	r1, r4
    27d6:	e775      	b.n	26c4 <__divdi3+0x28>
    27d8:	2700      	movs	r7, #0
    27da:	4246      	negs	r6, r0
    27dc:	418f      	sbcs	r7, r1
    27de:	2101      	movs	r1, #1
    27e0:	4249      	negs	r1, r1
    27e2:	468a      	mov	sl, r1
    27e4:	e769      	b.n	26ba <__divdi3+0x1e>
    27e6:	42b1      	cmp	r1, r6
    27e8:	d800      	bhi.n	27ec <__divdi3+0x150>
    27ea:	e78e      	b.n	270a <__divdi3+0x6e>
    27ec:	2100      	movs	r1, #0
    27ee:	2000      	movs	r0, #0
    27f0:	9000      	str	r0, [sp, #0]
    27f2:	9101      	str	r1, [sp, #4]
    27f4:	4661      	mov	r1, ip
    27f6:	2900      	cmp	r1, #0
    27f8:	d19e      	bne.n	2738 <__divdi3+0x9c>
    27fa:	9800      	ldr	r0, [sp, #0]
    27fc:	9901      	ldr	r1, [sp, #4]
    27fe:	e7d3      	b.n	27a8 <__divdi3+0x10c>
    2800:	4662      	mov	r2, ip
    2802:	4640      	mov	r0, r8
    2804:	2320      	movs	r3, #32
    2806:	4649      	mov	r1, r9
    2808:	4090      	lsls	r0, r2
    280a:	1a9b      	subs	r3, r3, r2
    280c:	40d9      	lsrs	r1, r3
    280e:	0003      	movs	r3, r0
    2810:	9100      	str	r1, [sp, #0]
    2812:	9900      	ldr	r1, [sp, #0]
    2814:	430b      	orrs	r3, r1
    2816:	e770      	b.n	26fa <__divdi3+0x5e>
    2818:	4662      	mov	r2, ip
    281a:	2320      	movs	r3, #32
    281c:	1a9b      	subs	r3, r3, r2
    281e:	002a      	movs	r2, r5
    2820:	409a      	lsls	r2, r3
    2822:	0026      	movs	r6, r4
    2824:	0013      	movs	r3, r2
    2826:	4662      	mov	r2, ip
    2828:	40d6      	lsrs	r6, r2
    282a:	431e      	orrs	r6, r3
    282c:	e7a9      	b.n	2782 <__divdi3+0xe6>
    282e:	4661      	mov	r1, ip
    2830:	2620      	movs	r6, #32
    2832:	2701      	movs	r7, #1
    2834:	1a76      	subs	r6, r6, r1
    2836:	2000      	movs	r0, #0
    2838:	2100      	movs	r1, #0
    283a:	40f7      	lsrs	r7, r6
    283c:	9000      	str	r0, [sp, #0]
    283e:	9101      	str	r1, [sp, #4]
    2840:	9701      	str	r7, [sp, #4]
    2842:	e772      	b.n	272a <__divdi3+0x8e>
    2844:	4662      	mov	r2, ip
    2846:	2320      	movs	r3, #32
    2848:	0035      	movs	r5, r6
    284a:	4094      	lsls	r4, r2
    284c:	1a9b      	subs	r3, r3, r2
    284e:	40dd      	lsrs	r5, r3
    2850:	0023      	movs	r3, r4
    2852:	432b      	orrs	r3, r5
    2854:	e79e      	b.n	2794 <__divdi3+0xf8>
    2856:	46c0      	nop			; (mov r8, r8)

00002858 <__clzdi2>:
    2858:	b510      	push	{r4, lr}
    285a:	2900      	cmp	r1, #0
    285c:	d103      	bne.n	2866 <__clzdi2+0xe>
    285e:	f000 f807 	bl	2870 <__clzsi2>
    2862:	3020      	adds	r0, #32
    2864:	e002      	b.n	286c <__clzdi2+0x14>
    2866:	1c08      	adds	r0, r1, #0
    2868:	f000 f802 	bl	2870 <__clzsi2>
    286c:	bd10      	pop	{r4, pc}
    286e:	46c0      	nop			; (mov r8, r8)

00002870 <__clzsi2>:
    2870:	211c      	movs	r1, #28
    2872:	2301      	movs	r3, #1
    2874:	041b      	lsls	r3, r3, #16
    2876:	4298      	cmp	r0, r3
    2878:	d301      	bcc.n	287e <__clzsi2+0xe>
    287a:	0c00      	lsrs	r0, r0, #16
    287c:	3910      	subs	r1, #16
    287e:	0a1b      	lsrs	r3, r3, #8
    2880:	4298      	cmp	r0, r3
    2882:	d301      	bcc.n	2888 <__clzsi2+0x18>
    2884:	0a00      	lsrs	r0, r0, #8
    2886:	3908      	subs	r1, #8
    2888:	091b      	lsrs	r3, r3, #4
    288a:	4298      	cmp	r0, r3
    288c:	d301      	bcc.n	2892 <__clzsi2+0x22>
    288e:	0900      	lsrs	r0, r0, #4
    2890:	3904      	subs	r1, #4
    2892:	a202      	add	r2, pc, #8	; (adr r2, 289c <__clzsi2+0x2c>)
    2894:	5c10      	ldrb	r0, [r2, r0]
    2896:	1840      	adds	r0, r0, r1
    2898:	4770      	bx	lr
    289a:	46c0      	nop			; (mov r8, r8)
    289c:	02020304 	.word	0x02020304
    28a0:	01010101 	.word	0x01010101
	...

000028ac <__libc_init_array>:
    28ac:	4b0e      	ldr	r3, [pc, #56]	; (28e8 <__libc_init_array+0x3c>)
    28ae:	b570      	push	{r4, r5, r6, lr}
    28b0:	2500      	movs	r5, #0
    28b2:	001e      	movs	r6, r3
    28b4:	4c0d      	ldr	r4, [pc, #52]	; (28ec <__libc_init_array+0x40>)
    28b6:	1ae4      	subs	r4, r4, r3
    28b8:	10a4      	asrs	r4, r4, #2
    28ba:	42a5      	cmp	r5, r4
    28bc:	d004      	beq.n	28c8 <__libc_init_array+0x1c>
    28be:	00ab      	lsls	r3, r5, #2
    28c0:	58f3      	ldr	r3, [r6, r3]
    28c2:	4798      	blx	r3
    28c4:	3501      	adds	r5, #1
    28c6:	e7f8      	b.n	28ba <__libc_init_array+0xe>
    28c8:	f000 f86e 	bl	29a8 <_init>
    28cc:	4b08      	ldr	r3, [pc, #32]	; (28f0 <__libc_init_array+0x44>)
    28ce:	2500      	movs	r5, #0
    28d0:	001e      	movs	r6, r3
    28d2:	4c08      	ldr	r4, [pc, #32]	; (28f4 <__libc_init_array+0x48>)
    28d4:	1ae4      	subs	r4, r4, r3
    28d6:	10a4      	asrs	r4, r4, #2
    28d8:	42a5      	cmp	r5, r4
    28da:	d004      	beq.n	28e6 <__libc_init_array+0x3a>
    28dc:	00ab      	lsls	r3, r5, #2
    28de:	58f3      	ldr	r3, [r6, r3]
    28e0:	4798      	blx	r3
    28e2:	3501      	adds	r5, #1
    28e4:	e7f8      	b.n	28d8 <__libc_init_array+0x2c>
    28e6:	bd70      	pop	{r4, r5, r6, pc}
    28e8:	000029b4 	.word	0x000029b4
    28ec:	000029b4 	.word	0x000029b4
    28f0:	000029b4 	.word	0x000029b4
    28f4:	000029b8 	.word	0x000029b8

000028f8 <memcpy>:
    28f8:	2300      	movs	r3, #0
    28fa:	b510      	push	{r4, lr}
    28fc:	429a      	cmp	r2, r3
    28fe:	d003      	beq.n	2908 <memcpy+0x10>
    2900:	5ccc      	ldrb	r4, [r1, r3]
    2902:	54c4      	strb	r4, [r0, r3]
    2904:	3301      	adds	r3, #1
    2906:	e7f9      	b.n	28fc <memcpy+0x4>
    2908:	bd10      	pop	{r4, pc}

0000290a <memset>:
    290a:	0003      	movs	r3, r0
    290c:	1882      	adds	r2, r0, r2
    290e:	4293      	cmp	r3, r2
    2910:	d002      	beq.n	2918 <memset+0xe>
    2912:	7019      	strb	r1, [r3, #0]
    2914:	3301      	adds	r3, #1
    2916:	e7fa      	b.n	290e <memset+0x4>
    2918:	4770      	bx	lr
    291a:	0000      	movs	r0, r0
    291c:	0c0b0a09 	.word	0x0c0b0a09
    2920:	00000e0d 	.word	0x00000e0d
    2924:	42002c00 	.word	0x42002c00
    2928:	42003000 	.word	0x42003000
    292c:	42003400 	.word	0x42003400
    2930:	001c1c1b 	.word	0x001c1c1b
    2934:	10000800 	.word	0x10000800
    2938:	00002000 	.word	0x00002000

0000293c <tc_interrupt_vectors.12940>:
    293c:	00141312 42000800 42000c00 42001000     .......B...B...B
    294c:	42001400 42001800 42001c00 00001c56     ...B...B...BV...
    295c:	00001c52 00001c52 00001cb0 00001cb0     R...R...........
    296c:	00001c6a 00001c5c 00001c70 00001c9e     j...\...p.......
    297c:	00001d3c 00001d1c 00001d1c 00001da8     <...............
    298c:	00001d2e 00001d4a 00001d20 00001d58     ....J... ...X...
    299c:	00001d98 00000061 0000006c              ....a...l...

000029a8 <_init>:
    29a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29aa:	46c0      	nop			; (mov r8, r8)
    29ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    29ae:	bc08      	pop	{r3}
    29b0:	469e      	mov	lr, r3
    29b2:	4770      	bx	lr

000029b4 <__init_array_start>:
    29b4:	000000dd 	.word	0x000000dd

000029b8 <_fini>:
    29b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29ba:	46c0      	nop			; (mov r8, r8)
    29bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    29be:	bc08      	pop	{r3}
    29c0:	469e      	mov	lr, r3
    29c2:	4770      	bx	lr

000029c4 <__fini_array_start>:
    29c4:	000000b5 	.word	0x000000b5

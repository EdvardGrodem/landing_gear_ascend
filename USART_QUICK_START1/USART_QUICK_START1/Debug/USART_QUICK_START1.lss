
USART_QUICK_START1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c5c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00001c5c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000110  20000004  00001c60  00020004  2**2
                  ALLOC
  3 .stack        00002004  20000114  00001d70  00020004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00025f79  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000031d6  00000000  00000000  00045ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004b16  00000000  00000000  000491d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000508  00000000  00000000  0004dcea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000638  00000000  00000000  0004e1f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001aaf3  00000000  00000000  0004e82a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d36d  00000000  00000000  0006931d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00089bcd  00000000  00000000  0007668a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000bcc  00000000  00000000  00100258  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002118 	.word	0x20002118
       4:	00001829 	.word	0x00001829
       8:	00001825 	.word	0x00001825
       c:	00001825 	.word	0x00001825
	...
      2c:	00001825 	.word	0x00001825
	...
      38:	00001825 	.word	0x00001825
      3c:	00001825 	.word	0x00001825
      40:	00001825 	.word	0x00001825
      44:	00001825 	.word	0x00001825
      48:	00001825 	.word	0x00001825
      4c:	00001825 	.word	0x00001825
      50:	00001825 	.word	0x00001825
      54:	00001825 	.word	0x00001825
      58:	00001825 	.word	0x00001825
      5c:	00001825 	.word	0x00001825
      60:	00001825 	.word	0x00001825
      64:	00000181 	.word	0x00000181
      68:	00000191 	.word	0x00000191
      6c:	000001a1 	.word	0x000001a1
      70:	000001b1 	.word	0x000001b1
      74:	000001c1 	.word	0x000001c1
      78:	000001d1 	.word	0x000001d1
      7c:	00001825 	.word	0x00001825
      80:	00001825 	.word	0x00001825
      84:	00001825 	.word	0x00001825
      88:	000003f9 	.word	0x000003f9
      8c:	00000409 	.word	0x00000409
      90:	00000419 	.word	0x00000419
	...
      9c:	00001825 	.word	0x00001825
      a0:	00001825 	.word	0x00001825
      a4:	00001825 	.word	0x00001825
      a8:	00001825 	.word	0x00001825
      ac:	00001825 	.word	0x00001825
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000004 	.word	0x20000004
      d4:	00000000 	.word	0x00000000
      d8:	00001c5c 	.word	0x00001c5c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000008 	.word	0x20000008
     108:	00001c5c 	.word	0x00001c5c
     10c:	00001c5c 	.word	0x00001c5c
     110:	00000000 	.word	0x00000000

00000114 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     114:	4770      	bx	lr
     116:	46c0      	nop			; (mov r8, r8)

00000118 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     118:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     11a:	4b0a      	ldr	r3, [pc, #40]	; (144 <_sercom_set_handler+0x2c>)
     11c:	781b      	ldrb	r3, [r3, #0]
     11e:	2b00      	cmp	r3, #0
     120:	d10c      	bne.n	13c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     122:	4f09      	ldr	r7, [pc, #36]	; (148 <_sercom_set_handler+0x30>)
     124:	4e09      	ldr	r6, [pc, #36]	; (14c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     126:	4d0a      	ldr	r5, [pc, #40]	; (150 <_sercom_set_handler+0x38>)
     128:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     12a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     12c:	195a      	adds	r2, r3, r5
     12e:	6014      	str	r4, [r2, #0]
     130:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     132:	2b18      	cmp	r3, #24
     134:	d1f9      	bne.n	12a <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     136:	2201      	movs	r2, #1
     138:	4b02      	ldr	r3, [pc, #8]	; (144 <_sercom_set_handler+0x2c>)
     13a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     13c:	0080      	lsls	r0, r0, #2
     13e:	4b02      	ldr	r3, [pc, #8]	; (148 <_sercom_set_handler+0x30>)
     140:	50c1      	str	r1, [r0, r3]
}
     142:	bdf0      	pop	{r4, r5, r6, r7, pc}
     144:	20000020 	.word	0x20000020
     148:	20000024 	.word	0x20000024
     14c:	00000115 	.word	0x00000115
     150:	20000060 	.word	0x20000060

00000154 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     154:	b510      	push	{r4, lr}
     156:	b082      	sub	sp, #8
     158:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     15a:	2206      	movs	r2, #6
     15c:	4905      	ldr	r1, [pc, #20]	; (174 <_sercom_get_interrupt_vector+0x20>)
     15e:	4668      	mov	r0, sp
     160:	4b05      	ldr	r3, [pc, #20]	; (178 <_sercom_get_interrupt_vector+0x24>)
     162:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     164:	0020      	movs	r0, r4
     166:	4b05      	ldr	r3, [pc, #20]	; (17c <_sercom_get_interrupt_vector+0x28>)
     168:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     16a:	466b      	mov	r3, sp
     16c:	5618      	ldrsb	r0, [r3, r0]
}
     16e:	b002      	add	sp, #8
     170:	bd10      	pop	{r4, pc}
     172:	46c0      	nop			; (mov r8, r8)
     174:	00001bb4 	.word	0x00001bb4
     178:	00001ba1 	.word	0x00001ba1
     17c:	00000e0d 	.word	0x00000e0d

00000180 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     180:	b510      	push	{r4, lr}
     182:	4b02      	ldr	r3, [pc, #8]	; (18c <SERCOM0_Handler+0xc>)
     184:	681b      	ldr	r3, [r3, #0]
     186:	2000      	movs	r0, #0
     188:	4798      	blx	r3
     18a:	bd10      	pop	{r4, pc}
     18c:	20000024 	.word	0x20000024

00000190 <SERCOM1_Handler>:
     190:	b510      	push	{r4, lr}
     192:	4b02      	ldr	r3, [pc, #8]	; (19c <SERCOM1_Handler+0xc>)
     194:	685b      	ldr	r3, [r3, #4]
     196:	2001      	movs	r0, #1
     198:	4798      	blx	r3
     19a:	bd10      	pop	{r4, pc}
     19c:	20000024 	.word	0x20000024

000001a0 <SERCOM2_Handler>:
     1a0:	b510      	push	{r4, lr}
     1a2:	4b02      	ldr	r3, [pc, #8]	; (1ac <SERCOM2_Handler+0xc>)
     1a4:	689b      	ldr	r3, [r3, #8]
     1a6:	2002      	movs	r0, #2
     1a8:	4798      	blx	r3
     1aa:	bd10      	pop	{r4, pc}
     1ac:	20000024 	.word	0x20000024

000001b0 <SERCOM3_Handler>:
     1b0:	b510      	push	{r4, lr}
     1b2:	4b02      	ldr	r3, [pc, #8]	; (1bc <SERCOM3_Handler+0xc>)
     1b4:	68db      	ldr	r3, [r3, #12]
     1b6:	2003      	movs	r0, #3
     1b8:	4798      	blx	r3
     1ba:	bd10      	pop	{r4, pc}
     1bc:	20000024 	.word	0x20000024

000001c0 <SERCOM4_Handler>:
     1c0:	b510      	push	{r4, lr}
     1c2:	4b02      	ldr	r3, [pc, #8]	; (1cc <SERCOM4_Handler+0xc>)
     1c4:	691b      	ldr	r3, [r3, #16]
     1c6:	2004      	movs	r0, #4
     1c8:	4798      	blx	r3
     1ca:	bd10      	pop	{r4, pc}
     1cc:	20000024 	.word	0x20000024

000001d0 <SERCOM5_Handler>:
     1d0:	b510      	push	{r4, lr}
     1d2:	4b02      	ldr	r3, [pc, #8]	; (1dc <SERCOM5_Handler+0xc>)
     1d4:	695b      	ldr	r3, [r3, #20]
     1d6:	2005      	movs	r0, #5
     1d8:	4798      	blx	r3
     1da:	bd10      	pop	{r4, pc}
     1dc:	20000024 	.word	0x20000024

000001e0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     1e2:	0080      	lsls	r0, r0, #2
     1e4:	4b60      	ldr	r3, [pc, #384]	; (368 <_usart_interrupt_handler+0x188>)
     1e6:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     1e8:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     1ea:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     1ec:	2b00      	cmp	r3, #0
     1ee:	d1fc      	bne.n	1ea <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     1f0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     1f2:	7da6      	ldrb	r6, [r4, #22]
     1f4:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     1f6:	2330      	movs	r3, #48	; 0x30
     1f8:	5ceb      	ldrb	r3, [r5, r3]
     1fa:	2231      	movs	r2, #49	; 0x31
     1fc:	5caf      	ldrb	r7, [r5, r2]
     1fe:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     200:	07f3      	lsls	r3, r6, #31
     202:	d522      	bpl.n	24a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     204:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     206:	b29b      	uxth	r3, r3
     208:	2b00      	cmp	r3, #0
     20a:	d01c      	beq.n	246 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     20c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     20e:	7813      	ldrb	r3, [r2, #0]
     210:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     212:	1c51      	adds	r1, r2, #1
     214:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     216:	7969      	ldrb	r1, [r5, #5]
     218:	2901      	cmp	r1, #1
     21a:	d001      	beq.n	220 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     21c:	b29b      	uxth	r3, r3
     21e:	e004      	b.n	22a <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     220:	7851      	ldrb	r1, [r2, #1]
     222:	0209      	lsls	r1, r1, #8
     224:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     226:	3202      	adds	r2, #2
     228:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     22a:	05db      	lsls	r3, r3, #23
     22c:	0ddb      	lsrs	r3, r3, #23
     22e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     230:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     232:	3b01      	subs	r3, #1
     234:	b29b      	uxth	r3, r3
     236:	85eb      	strh	r3, [r5, #46]	; 0x2e
     238:	2b00      	cmp	r3, #0
     23a:	d106      	bne.n	24a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     23c:	3301      	adds	r3, #1
     23e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     240:	3301      	adds	r3, #1
     242:	75a3      	strb	r3, [r4, #22]
     244:	e001      	b.n	24a <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     246:	2301      	movs	r3, #1
     248:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     24a:	07b3      	lsls	r3, r6, #30
     24c:	d509      	bpl.n	262 <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     24e:	2302      	movs	r3, #2
     250:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     252:	2200      	movs	r2, #0
     254:	3331      	adds	r3, #49	; 0x31
     256:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     258:	07fb      	lsls	r3, r7, #31
     25a:	d502      	bpl.n	262 <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     25c:	0028      	movs	r0, r5
     25e:	68eb      	ldr	r3, [r5, #12]
     260:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     262:	0773      	lsls	r3, r6, #29
     264:	d560      	bpl.n	328 <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
     266:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     268:	b29b      	uxth	r3, r3
     26a:	2b00      	cmp	r3, #0
     26c:	d05a      	beq.n	324 <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     26e:	8b63      	ldrh	r3, [r4, #26]
     270:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     272:	071a      	lsls	r2, r3, #28
     274:	d402      	bmi.n	27c <_usart_interrupt_handler+0x9c>
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     276:	223f      	movs	r2, #63	; 0x3f
     278:	4013      	ands	r3, r2
     27a:	e001      	b.n	280 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
     27c:	2237      	movs	r2, #55	; 0x37
     27e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     280:	2b00      	cmp	r3, #0
     282:	d02d      	beq.n	2e0 <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     284:	079a      	lsls	r2, r3, #30
     286:	d505      	bpl.n	294 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     288:	221a      	movs	r2, #26
     28a:	2332      	movs	r3, #50	; 0x32
     28c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     28e:	3b30      	subs	r3, #48	; 0x30
     290:	8363      	strh	r3, [r4, #26]
     292:	e01f      	b.n	2d4 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     294:	075a      	lsls	r2, r3, #29
     296:	d505      	bpl.n	2a4 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     298:	221e      	movs	r2, #30
     29a:	2332      	movs	r3, #50	; 0x32
     29c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     29e:	3b2e      	subs	r3, #46	; 0x2e
     2a0:	8363      	strh	r3, [r4, #26]
     2a2:	e017      	b.n	2d4 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     2a4:	07da      	lsls	r2, r3, #31
     2a6:	d505      	bpl.n	2b4 <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     2a8:	2213      	movs	r2, #19
     2aa:	2332      	movs	r3, #50	; 0x32
     2ac:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     2ae:	3b31      	subs	r3, #49	; 0x31
     2b0:	8363      	strh	r3, [r4, #26]
     2b2:	e00f      	b.n	2d4 <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     2b4:	06da      	lsls	r2, r3, #27
     2b6:	d505      	bpl.n	2c4 <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     2b8:	2242      	movs	r2, #66	; 0x42
     2ba:	2332      	movs	r3, #50	; 0x32
     2bc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     2be:	3b22      	subs	r3, #34	; 0x22
     2c0:	8363      	strh	r3, [r4, #26]
     2c2:	e007      	b.n	2d4 <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     2c4:	2220      	movs	r2, #32
     2c6:	421a      	tst	r2, r3
     2c8:	d004      	beq.n	2d4 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     2ca:	3221      	adds	r2, #33	; 0x21
     2cc:	2332      	movs	r3, #50	; 0x32
     2ce:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     2d0:	3b12      	subs	r3, #18
     2d2:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     2d4:	077b      	lsls	r3, r7, #29
     2d6:	d527      	bpl.n	328 <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     2d8:	0028      	movs	r0, r5
     2da:	696b      	ldr	r3, [r5, #20]
     2dc:	4798      	blx	r3
     2de:	e023      	b.n	328 <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     2e0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     2e2:	05db      	lsls	r3, r3, #23
     2e4:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     2e6:	b2da      	uxtb	r2, r3
     2e8:	6a69      	ldr	r1, [r5, #36]	; 0x24
     2ea:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     2ec:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     2ee:	1c51      	adds	r1, r2, #1
     2f0:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     2f2:	7969      	ldrb	r1, [r5, #5]
     2f4:	2901      	cmp	r1, #1
     2f6:	d104      	bne.n	302 <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
     2f8:	0a1b      	lsrs	r3, r3, #8
     2fa:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
     2fc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     2fe:	3301      	adds	r3, #1
     300:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     302:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     304:	3b01      	subs	r3, #1
     306:	b29b      	uxth	r3, r3
     308:	85ab      	strh	r3, [r5, #44]	; 0x2c
     30a:	2b00      	cmp	r3, #0
     30c:	d10c      	bne.n	328 <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     30e:	3304      	adds	r3, #4
     310:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     312:	2200      	movs	r2, #0
     314:	332e      	adds	r3, #46	; 0x2e
     316:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     318:	07bb      	lsls	r3, r7, #30
     31a:	d505      	bpl.n	328 <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     31c:	0028      	movs	r0, r5
     31e:	692b      	ldr	r3, [r5, #16]
     320:	4798      	blx	r3
     322:	e001      	b.n	328 <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     324:	2304      	movs	r3, #4
     326:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     328:	06f3      	lsls	r3, r6, #27
     32a:	d507      	bpl.n	33c <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     32c:	2310      	movs	r3, #16
     32e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     330:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     332:	06fb      	lsls	r3, r7, #27
     334:	d502      	bpl.n	33c <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     336:	0028      	movs	r0, r5
     338:	69eb      	ldr	r3, [r5, #28]
     33a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     33c:	06b3      	lsls	r3, r6, #26
     33e:	d507      	bpl.n	350 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     340:	2320      	movs	r3, #32
     342:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     344:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     346:	073b      	lsls	r3, r7, #28
     348:	d502      	bpl.n	350 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     34a:	0028      	movs	r0, r5
     34c:	69ab      	ldr	r3, [r5, #24]
     34e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     350:	0733      	lsls	r3, r6, #28
     352:	d507      	bpl.n	364 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     354:	2308      	movs	r3, #8
     356:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     358:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     35a:	06bb      	lsls	r3, r7, #26
     35c:	d502      	bpl.n	364 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     35e:	6a2b      	ldr	r3, [r5, #32]
     360:	0028      	movs	r0, r5
     362:	4798      	blx	r3
		}
	}
#endif
}
     364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     366:	46c0      	nop			; (mov r8, r8)
     368:	20000060 	.word	0x20000060

0000036c <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     36c:	1c93      	adds	r3, r2, #2
     36e:	009b      	lsls	r3, r3, #2
     370:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     372:	2a02      	cmp	r2, #2
     374:	d104      	bne.n	380 <tc_register_callback+0x14>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
     376:	7e02      	ldrb	r2, [r0, #24]
     378:	2310      	movs	r3, #16
     37a:	4313      	orrs	r3, r2
     37c:	7603      	strb	r3, [r0, #24]
     37e:	e00b      	b.n	398 <tc_register_callback+0x2c>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     380:	2a03      	cmp	r2, #3
     382:	d104      	bne.n	38e <tc_register_callback+0x22>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
     384:	7e02      	ldrb	r2, [r0, #24]
     386:	2320      	movs	r3, #32
     388:	4313      	orrs	r3, r2
     38a:	7603      	strb	r3, [r0, #24]
     38c:	e004      	b.n	398 <tc_register_callback+0x2c>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
     38e:	2301      	movs	r3, #1
     390:	4093      	lsls	r3, r2
     392:	7e02      	ldrb	r2, [r0, #24]
     394:	4313      	orrs	r3, r2
     396:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
     398:	2000      	movs	r0, #0
     39a:	4770      	bx	lr

0000039c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     39c:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     39e:	0080      	lsls	r0, r0, #2
     3a0:	4b14      	ldr	r3, [pc, #80]	; (3f4 <_tc_interrupt_handler+0x58>)
     3a2:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     3a4:	682b      	ldr	r3, [r5, #0]
     3a6:	7b9c      	ldrb	r4, [r3, #14]
     3a8:	7e2b      	ldrb	r3, [r5, #24]
     3aa:	401c      	ands	r4, r3
     3ac:	7e6b      	ldrb	r3, [r5, #25]
     3ae:	401c      	ands	r4, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     3b0:	07e3      	lsls	r3, r4, #31
     3b2:	d505      	bpl.n	3c0 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     3b4:	0028      	movs	r0, r5
     3b6:	68ab      	ldr	r3, [r5, #8]
     3b8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     3ba:	2301      	movs	r3, #1
     3bc:	682a      	ldr	r2, [r5, #0]
     3be:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     3c0:	07a3      	lsls	r3, r4, #30
     3c2:	d505      	bpl.n	3d0 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     3c4:	0028      	movs	r0, r5
     3c6:	68eb      	ldr	r3, [r5, #12]
     3c8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     3ca:	2302      	movs	r3, #2
     3cc:	682a      	ldr	r2, [r5, #0]
     3ce:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     3d0:	06e3      	lsls	r3, r4, #27
     3d2:	d505      	bpl.n	3e0 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     3d4:	0028      	movs	r0, r5
     3d6:	692b      	ldr	r3, [r5, #16]
     3d8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     3da:	2310      	movs	r3, #16
     3dc:	682a      	ldr	r2, [r5, #0]
     3de:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     3e0:	06a3      	lsls	r3, r4, #26
     3e2:	d505      	bpl.n	3f0 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     3e4:	0028      	movs	r0, r5
     3e6:	696b      	ldr	r3, [r5, #20]
     3e8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     3ea:	682b      	ldr	r3, [r5, #0]
     3ec:	2220      	movs	r2, #32
     3ee:	739a      	strb	r2, [r3, #14]
	}
}
     3f0:	bd70      	pop	{r4, r5, r6, pc}
     3f2:	46c0      	nop			; (mov r8, r8)
     3f4:	20000078 	.word	0x20000078

000003f8 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     3f8:	b510      	push	{r4, lr}
     3fa:	2000      	movs	r0, #0
     3fc:	4b01      	ldr	r3, [pc, #4]	; (404 <TC3_Handler+0xc>)
     3fe:	4798      	blx	r3
     400:	bd10      	pop	{r4, pc}
     402:	46c0      	nop			; (mov r8, r8)
     404:	0000039d 	.word	0x0000039d

00000408 <TC4_Handler>:
     408:	b510      	push	{r4, lr}
     40a:	2001      	movs	r0, #1
     40c:	4b01      	ldr	r3, [pc, #4]	; (414 <TC4_Handler+0xc>)
     40e:	4798      	blx	r3
     410:	bd10      	pop	{r4, pc}
     412:	46c0      	nop			; (mov r8, r8)
     414:	0000039d 	.word	0x0000039d

00000418 <TC5_Handler>:
     418:	b510      	push	{r4, lr}
     41a:	2002      	movs	r0, #2
     41c:	4b01      	ldr	r3, [pc, #4]	; (424 <TC5_Handler+0xc>)
     41e:	4798      	blx	r3
     420:	bd10      	pop	{r4, pc}
     422:	46c0      	nop			; (mov r8, r8)
     424:	0000039d 	.word	0x0000039d

00000428 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     428:	b530      	push	{r4, r5, lr}
     42a:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     42c:	aa01      	add	r2, sp, #4
     42e:	4b0b      	ldr	r3, [pc, #44]	; (45c <_tc_get_inst_index+0x34>)
     430:	cb32      	ldmia	r3!, {r1, r4, r5}
     432:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     434:	9b01      	ldr	r3, [sp, #4]
     436:	4298      	cmp	r0, r3
     438:	d00a      	beq.n	450 <_tc_get_inst_index+0x28>
     43a:	9b02      	ldr	r3, [sp, #8]
     43c:	4298      	cmp	r0, r3
     43e:	d005      	beq.n	44c <_tc_get_inst_index+0x24>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     440:	2300      	movs	r3, #0
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
     442:	9a03      	ldr	r2, [sp, #12]
     444:	4282      	cmp	r2, r0
     446:	d105      	bne.n	454 <_tc_get_inst_index+0x2c>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     448:	3302      	adds	r3, #2
     44a:	e002      	b.n	452 <_tc_get_inst_index+0x2a>
     44c:	2301      	movs	r3, #1
     44e:	e000      	b.n	452 <_tc_get_inst_index+0x2a>
     450:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
			return i;
     452:	b2db      	uxtb	r3, r3
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
     454:	0018      	movs	r0, r3
     456:	b005      	add	sp, #20
     458:	bd30      	pop	{r4, r5, pc}
     45a:	46c0      	nop			; (mov r8, r8)
     45c:	00001bbc 	.word	0x00001bbc

00000460 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     460:	b5f0      	push	{r4, r5, r6, r7, lr}
     462:	464f      	mov	r7, r9
     464:	4646      	mov	r6, r8
     466:	b4c0      	push	{r6, r7}
     468:	b087      	sub	sp, #28
     46a:	0004      	movs	r4, r0
     46c:	000e      	movs	r6, r1
     46e:	4690      	mov	r8, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     470:	0008      	movs	r0, r1
     472:	4b92      	ldr	r3, [pc, #584]	; (6bc <tc_init+0x25c>)
     474:	4798      	blx	r3
     476:	4681      	mov	r9, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     478:	4d91      	ldr	r5, [pc, #580]	; (6c0 <tc_init+0x260>)
     47a:	0029      	movs	r1, r5
     47c:	310c      	adds	r1, #12
     47e:	2203      	movs	r2, #3
     480:	a805      	add	r0, sp, #20
     482:	4f90      	ldr	r7, [pc, #576]	; (6c4 <tc_init+0x264>)
     484:	47b8      	blx	r7
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     486:	0029      	movs	r1, r5
     488:	3110      	adds	r1, #16
     48a:	2206      	movs	r2, #6
     48c:	a803      	add	r0, sp, #12
     48e:	47b8      	blx	r7
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
     490:	2300      	movs	r3, #0
     492:	60a3      	str	r3, [r4, #8]
     494:	60e3      	str	r3, [r4, #12]
     496:	6123      	str	r3, [r4, #16]
     498:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
     49a:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
     49c:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     49e:	464b      	mov	r3, r9
     4a0:	009a      	lsls	r2, r3, #2
     4a2:	4b89      	ldr	r3, [pc, #548]	; (6c8 <tc_init+0x268>)
     4a4:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     4a6:	6026      	str	r6, [r4, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     4a8:	4643      	mov	r3, r8
     4aa:	789b      	ldrb	r3, [r3, #2]
     4ac:	2b08      	cmp	r3, #8
     4ae:	d104      	bne.n	4ba <tc_init+0x5a>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     4b0:	2017      	movs	r0, #23
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     4b2:	464a      	mov	r2, r9
     4b4:	07d2      	lsls	r2, r2, #31
     4b6:	d400      	bmi.n	4ba <tc_init+0x5a>
     4b8:	e0fb      	b.n	6b2 <tc_init+0x252>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     4ba:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     4bc:	8833      	ldrh	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     4be:	2005      	movs	r0, #5
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     4c0:	07db      	lsls	r3, r3, #31
     4c2:	d500      	bpl.n	4c6 <tc_init+0x66>
     4c4:	e0f5      	b.n	6b2 <tc_init+0x252>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     4c6:	7bf3      	ldrb	r3, [r6, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
     4c8:	3017      	adds	r0, #23
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     4ca:	06db      	lsls	r3, r3, #27
     4cc:	d500      	bpl.n	4d0 <tc_init+0x70>
     4ce:	e0f0      	b.n	6b2 <tc_init+0x252>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     4d0:	8833      	ldrh	r3, [r6, #0]
     4d2:	079b      	lsls	r3, r3, #30
     4d4:	d500      	bpl.n	4d8 <tc_init+0x78>
     4d6:	e0ec      	b.n	6b2 <tc_init+0x252>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
     4d8:	4643      	mov	r3, r8
     4da:	7c1b      	ldrb	r3, [r3, #16]
     4dc:	2b00      	cmp	r3, #0
     4de:	d00c      	beq.n	4fa <tc_init+0x9a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     4e0:	a902      	add	r1, sp, #8
     4e2:	2301      	movs	r3, #1
     4e4:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     4e6:	2200      	movs	r2, #0
     4e8:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     4ea:	4642      	mov	r2, r8
     4ec:	7e12      	ldrb	r2, [r2, #24]
     4ee:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     4f0:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     4f2:	4643      	mov	r3, r8
     4f4:	7d18      	ldrb	r0, [r3, #20]
     4f6:	4b75      	ldr	r3, [pc, #468]	; (6cc <tc_init+0x26c>)
     4f8:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
     4fa:	4643      	mov	r3, r8
     4fc:	7f1b      	ldrb	r3, [r3, #28]
     4fe:	2b00      	cmp	r3, #0
     500:	d00d      	beq.n	51e <tc_init+0xbe>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     502:	a902      	add	r1, sp, #8
     504:	2301      	movs	r3, #1
     506:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
     508:	2200      	movs	r2, #0
     50a:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     50c:	4642      	mov	r2, r8
     50e:	6a52      	ldr	r2, [r2, #36]	; 0x24
     510:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     512:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
     514:	4643      	mov	r3, r8
     516:	6a1b      	ldr	r3, [r3, #32]
     518:	b2d8      	uxtb	r0, r3
     51a:	4b6c      	ldr	r3, [pc, #432]	; (6cc <tc_init+0x26c>)
     51c:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     51e:	496c      	ldr	r1, [pc, #432]	; (6d0 <tc_init+0x270>)
     520:	6a0b      	ldr	r3, [r1, #32]
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
     522:	464a      	mov	r2, r9
     524:	0052      	lsls	r2, r2, #1
     526:	a803      	add	r0, sp, #12
     528:	5a12      	ldrh	r2, [r2, r0]
     52a:	4313      	orrs	r3, r2
     52c:	620b      	str	r3, [r1, #32]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     52e:	4643      	mov	r3, r8
     530:	789b      	ldrb	r3, [r3, #2]
     532:	2b08      	cmp	r3, #8
     534:	d106      	bne.n	544 <tc_init+0xe4>
     536:	6a0b      	ldr	r3, [r1, #32]
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
     538:	464a      	mov	r2, r9
     53a:	3201      	adds	r2, #1
     53c:	0052      	lsls	r2, r2, #1
     53e:	5a12      	ldrh	r2, [r2, r0]
     540:	4313      	orrs	r3, r2
     542:	620b      	str	r3, [r1, #32]
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
     544:	a901      	add	r1, sp, #4
     546:	4643      	mov	r3, r8
     548:	781b      	ldrb	r3, [r3, #0]
     54a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     54c:	ab05      	add	r3, sp, #20
     54e:	464a      	mov	r2, r9
     550:	5c9d      	ldrb	r5, [r3, r2]
     552:	0028      	movs	r0, r5
     554:	4b5f      	ldr	r3, [pc, #380]	; (6d4 <tc_init+0x274>)
     556:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     558:	0028      	movs	r0, r5
     55a:	4b5f      	ldr	r3, [pc, #380]	; (6d8 <tc_init+0x278>)
     55c:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
     55e:	4643      	mov	r3, r8
     560:	7898      	ldrb	r0, [r3, #2]
     562:	799b      	ldrb	r3, [r3, #6]
     564:	0002      	movs	r2, r0
     566:	431a      	orrs	r2, r3
     568:	4643      	mov	r3, r8
     56a:	8918      	ldrh	r0, [r3, #8]
     56c:	889b      	ldrh	r3, [r3, #4]
     56e:	4303      	orrs	r3, r0
     570:	431a      	orrs	r2, r3
     572:	0010      	movs	r0, r2
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
     574:	4643      	mov	r3, r8
     576:	785b      	ldrb	r3, [r3, #1]
     578:	2b00      	cmp	r3, #0
     57a:	d002      	beq.n	582 <tc_init+0x122>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     57c:	2380      	movs	r3, #128	; 0x80
     57e:	011b      	lsls	r3, r3, #4
     580:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     582:	6821      	ldr	r1, [r4, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     584:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     586:	7bcb      	ldrb	r3, [r1, #15]
     588:	4393      	bics	r3, r2
     58a:	d1fc      	bne.n	586 <tc_init+0x126>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     58c:	8030      	strh	r0, [r6, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
     58e:	4643      	mov	r3, r8
     590:	7b58      	ldrb	r0, [r3, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     592:	1e43      	subs	r3, r0, #1
     594:	4198      	sbcs	r0, r3
     596:	0080      	lsls	r0, r0, #2
	}

	if (config->count_direction) {
     598:	4643      	mov	r3, r8
     59a:	7b9b      	ldrb	r3, [r3, #14]
     59c:	2b00      	cmp	r3, #0
     59e:	d001      	beq.n	5a4 <tc_init+0x144>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     5a0:	2301      	movs	r3, #1
     5a2:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     5a4:	6821      	ldr	r1, [r4, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
     5a6:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     5a8:	7bcb      	ldrb	r3, [r1, #15]
     5aa:	4393      	bics	r3, r2
     5ac:	d1fc      	bne.n	5a8 <tc_init+0x148>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     5ae:	33ff      	adds	r3, #255	; 0xff
     5b0:	7133      	strb	r3, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
     5b2:	2800      	cmp	r0, #0
     5b4:	d005      	beq.n	5c2 <tc_init+0x162>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     5b6:	6821      	ldr	r1, [r4, #0]
		while (tc_is_syncing(module_inst)) {
     5b8:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     5ba:	7bcb      	ldrb	r3, [r1, #15]
     5bc:	4393      	bics	r3, r2
     5be:	d1fc      	bne.n	5ba <tc_init+0x15a>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     5c0:	7170      	strb	r0, [r6, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
     5c2:	4643      	mov	r3, r8
     5c4:	7a98      	ldrb	r0, [r3, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
     5c6:	7adb      	ldrb	r3, [r3, #11]
     5c8:	2b00      	cmp	r3, #0
     5ca:	d001      	beq.n	5d0 <tc_init+0x170>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     5cc:	2310      	movs	r3, #16
     5ce:	4318      	orrs	r0, r3
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
     5d0:	4643      	mov	r3, r8
     5d2:	7b1b      	ldrb	r3, [r3, #12]
     5d4:	2b00      	cmp	r3, #0
     5d6:	d001      	beq.n	5dc <tc_init+0x17c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     5d8:	2320      	movs	r3, #32
     5da:	4318      	orrs	r0, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     5dc:	6821      	ldr	r1, [r4, #0]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     5de:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     5e0:	7bcb      	ldrb	r3, [r1, #15]
     5e2:	4393      	bics	r3, r2
     5e4:	d1fc      	bne.n	5e0 <tc_init+0x180>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     5e6:	71b0      	strb	r0, [r6, #6]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     5e8:	6822      	ldr	r2, [r4, #0]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     5ea:	217f      	movs	r1, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     5ec:	7bd3      	ldrb	r3, [r2, #15]
     5ee:	438b      	bics	r3, r1
     5f0:	d1fc      	bne.n	5ec <tc_init+0x18c>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
     5f2:	7923      	ldrb	r3, [r4, #4]
     5f4:	2b04      	cmp	r3, #4
     5f6:	d005      	beq.n	604 <tc_init+0x1a4>
     5f8:	2b08      	cmp	r3, #8
     5fa:	d041      	beq.n	680 <tc_init+0x220>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
     5fc:	2017      	movs	r0, #23
	while (tc_is_syncing(module_inst)) {
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
     5fe:	2b00      	cmp	r3, #0
     600:	d157      	bne.n	6b2 <tc_init+0x252>
     602:	e024      	b.n	64e <tc_init+0x1ee>
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
     604:	217f      	movs	r1, #127	; 0x7f
     606:	7bd3      	ldrb	r3, [r2, #15]
     608:	438b      	bics	r3, r1
     60a:	d1fc      	bne.n	606 <tc_init+0x1a6>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
     60c:	3328      	adds	r3, #40	; 0x28
     60e:	4642      	mov	r2, r8
     610:	5cd3      	ldrb	r3, [r2, r3]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
     612:	7433      	strb	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     614:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
     616:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     618:	7bcb      	ldrb	r3, [r1, #15]
     61a:	4393      	bics	r3, r2
     61c:	d1fc      	bne.n	618 <tc_init+0x1b8>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
     61e:	3329      	adds	r3, #41	; 0x29
     620:	4642      	mov	r2, r8
     622:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
     624:	7533      	strb	r3, [r6, #20]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     626:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
     628:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     62a:	7bcb      	ldrb	r3, [r1, #15]
     62c:	4393      	bics	r3, r2
     62e:	d1fc      	bne.n	62a <tc_init+0x1ca>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
     630:	332a      	adds	r3, #42	; 0x2a
     632:	4642      	mov	r2, r8
     634:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
     636:	7633      	strb	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     638:	6821      	ldr	r1, [r4, #0]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     63a:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     63c:	7bcb      	ldrb	r3, [r1, #15]
     63e:	4393      	bics	r3, r2
     640:	d1fc      	bne.n	63c <tc_init+0x1dc>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
     642:	332b      	adds	r3, #43	; 0x2b
     644:	4642      	mov	r2, r8
     646:	5cd3      	ldrb	r3, [r2, r3]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
     648:	7673      	strb	r3, [r6, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
     64a:	2000      	movs	r0, #0
     64c:	e031      	b.n	6b2 <tc_init+0x252>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
     64e:	217f      	movs	r1, #127	; 0x7f
     650:	7bd3      	ldrb	r3, [r2, #15]
     652:	438b      	bics	r3, r1
     654:	d1fc      	bne.n	650 <tc_init+0x1f0>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
     656:	4643      	mov	r3, r8
     658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
     65a:	8233      	strh	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     65c:	6821      	ldr	r1, [r4, #0]

			while (tc_is_syncing(module_inst)) {
     65e:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     660:	7bcb      	ldrb	r3, [r1, #15]
     662:	4393      	bics	r3, r2
     664:	d1fc      	bne.n	660 <tc_init+0x200>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
     666:	4643      	mov	r3, r8
     668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
     66a:	8333      	strh	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     66c:	6821      	ldr	r1, [r4, #0]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     66e:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     670:	7bcb      	ldrb	r3, [r1, #15]
     672:	4393      	bics	r3, r2
     674:	d1fc      	bne.n	670 <tc_init+0x210>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
     676:	4643      	mov	r3, r8
     678:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
     67a:	8373      	strh	r3, [r6, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
     67c:	2000      	movs	r0, #0
     67e:	e018      	b.n	6b2 <tc_init+0x252>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
     680:	217f      	movs	r1, #127	; 0x7f
     682:	7bd3      	ldrb	r3, [r2, #15]
     684:	438b      	bics	r3, r1
     686:	d1fc      	bne.n	682 <tc_init+0x222>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
     688:	4643      	mov	r3, r8
     68a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     68c:	6133      	str	r3, [r6, #16]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     68e:	6821      	ldr	r1, [r4, #0]

			while (tc_is_syncing(module_inst)) {
     690:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     692:	7bcb      	ldrb	r3, [r1, #15]
     694:	4393      	bics	r3, r2
     696:	d1fc      	bne.n	692 <tc_init+0x232>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
     698:	4643      	mov	r3, r8
     69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     69c:	61b3      	str	r3, [r6, #24]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     69e:	6821      	ldr	r1, [r4, #0]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     6a0:	227f      	movs	r2, #127	; 0x7f

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     6a2:	7bcb      	ldrb	r3, [r1, #15]
     6a4:	4393      	bics	r3, r2
     6a6:	d1fc      	bne.n	6a2 <tc_init+0x242>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
     6a8:	4643      	mov	r3, r8
     6aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
     6ac:	61f3      	str	r3, [r6, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
     6ae:	2000      	movs	r0, #0
     6b0:	e7ff      	b.n	6b2 <tc_init+0x252>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
     6b2:	b007      	add	sp, #28
     6b4:	bc0c      	pop	{r2, r3}
     6b6:	4690      	mov	r8, r2
     6b8:	4699      	mov	r9, r3
     6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6bc:	00000429 	.word	0x00000429
     6c0:	00001bbc 	.word	0x00001bbc
     6c4:	00001ba1 	.word	0x00001ba1
     6c8:	20000078 	.word	0x20000078
     6cc:	000017c5 	.word	0x000017c5
     6d0:	40000400 	.word	0x40000400
     6d4:	000016cd 	.word	0x000016cd
     6d8:	00001641 	.word	0x00001641

000006dc <init_bumpers>:
#define BACK_BUMPER_HIGH_PIN PORT_PA04


void init_bumpers() {
	//Set up pull-down
	PORT->Group[0].PINCFG[5].reg = PORT_PINCFG_PULLEN | PORT_PINCFG_INEN;
     6dc:	4b08      	ldr	r3, [pc, #32]	; (700 <init_bumpers+0x24>)
     6de:	2206      	movs	r2, #6
     6e0:	2145      	movs	r1, #69	; 0x45
     6e2:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PINCFG[21].reg =  PORT_PINCFG_PULLEN | PORT_PINCFG_INEN;
     6e4:	3110      	adds	r1, #16
     6e6:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PINCFG[6].reg =  PORT_PINCFG_PULLEN | PORT_PINCFG_INEN;
     6e8:	390f      	subs	r1, #15
     6ea:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PINCFG[3].reg =  PORT_PINCFG_PULLEN | PORT_PINCFG_INEN;
     6ec:	3903      	subs	r1, #3
     6ee:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].DIRCLR.reg = LEFT_BUMPER_PIN | RIGHT_BUMPER_PIN | FRONT_BUMPER_PIN | BACK_BUMPER_PIN;
     6f0:	4a04      	ldr	r2, [pc, #16]	; (704 <init_bumpers+0x28>)
     6f2:	605a      	str	r2, [r3, #4]
	PORT->Group[0].OUTCLR.reg =  LEFT_BUMPER_PIN | RIGHT_BUMPER_PIN | FRONT_BUMPER_PIN | BACK_BUMPER_PIN;
     6f4:	615a      	str	r2, [r3, #20]

	//set pins to GND
	PORT->Group[0].DIRSET.reg = LEFT_BUMPER_HIGH_PIN | RIGHT_BUMPER_HIGH_PIN | FRONT_BUMPER_HIGH_PIN | BACK_BUMPER_HIGH_PIN;
     6f6:	4a04      	ldr	r2, [pc, #16]	; (708 <init_bumpers+0x2c>)
     6f8:	609a      	str	r2, [r3, #8]
	PORT->Group[0].OUTSET.reg = LEFT_BUMPER_HIGH_PIN | RIGHT_BUMPER_HIGH_PIN | FRONT_BUMPER_HIGH_PIN | BACK_BUMPER_HIGH_PIN;
     6fa:	619a      	str	r2, [r3, #24]

}
     6fc:	4770      	bx	lr
     6fe:	46c0      	nop			; (mov r8, r8)
     700:	41004400 	.word	0x41004400
     704:	00200068 	.word	0x00200068
     708:	00400092 	.word	0x00400092

0000070c <bumpers_is_pushed>:
	}

}

int bumpers_is_pushed() {
	return (PORT->Group[0].IN.reg &(LEFT_BUMPER_PIN | RIGHT_BUMPER_PIN | FRONT_BUMPER_PIN | BACK_BUMPER_PIN)) != 0;
     70c:	4b03      	ldr	r3, [pc, #12]	; (71c <bumpers_is_pushed+0x10>)
     70e:	6a18      	ldr	r0, [r3, #32]
     710:	4b03      	ldr	r3, [pc, #12]	; (720 <bumpers_is_pushed+0x14>)
     712:	4018      	ands	r0, r3
     714:	1e43      	subs	r3, r0, #1
     716:	4198      	sbcs	r0, r3
}
     718:	4770      	bx	lr
     71a:	46c0      	nop			; (mov r8, r8)
     71c:	41004400 	.word	0x41004400
     720:	00200068 	.word	0x00200068

00000724 <init_button_landing>:
#define LANDING_BUTTON4_HIGH_PIN PORT_PB11


void init_button_landing() {
	//Set up pull-down
	PORT->Group[1].PINCFG[8].reg = PORT_PINCFG_PULLEN | PORT_PINCFG_INEN;
     724:	4b0e      	ldr	r3, [pc, #56]	; (760 <init_button_landing+0x3c>)
     726:	2206      	movs	r2, #6
     728:	21c8      	movs	r1, #200	; 0xc8
     72a:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PINCFG[27].reg =  PORT_PINCFG_PULLEN | PORT_PINCFG_INEN;
     72c:	396d      	subs	r1, #109	; 0x6d
     72e:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PINCFG[28].reg =  PORT_PINCFG_PULLEN | PORT_PINCFG_INEN;
     730:	3101      	adds	r1, #1
     732:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PINCFG[12].reg =  PORT_PINCFG_PULLEN | PORT_PINCFG_INEN;
     734:	3910      	subs	r1, #16
     736:	545a      	strb	r2, [r3, r1]

	PORT->Group[0].DIRCLR.reg = LANDING_BUTTON2_PIN | LANDING_BUTTON3_PIN | LANDING_BUTTON4_PIN;
     738:	4a0a      	ldr	r2, [pc, #40]	; (764 <init_button_landing+0x40>)
     73a:	605a      	str	r2, [r3, #4]
	PORT->Group[0].OUTCLR.reg = LANDING_BUTTON2_PIN | LANDING_BUTTON3_PIN | LANDING_BUTTON4_PIN;
     73c:	615a      	str	r2, [r3, #20]

	PORT->Group[1].DIRCLR.reg = LANDING_BUTTON1_PIN;
     73e:	2280      	movs	r2, #128	; 0x80
     740:	0052      	lsls	r2, r2, #1
     742:	3138      	adds	r1, #56	; 0x38
     744:	505a      	str	r2, [r3, r1]
	PORT->Group[1].OUTCLR.reg = LANDING_BUTTON1_PIN;
     746:	3110      	adds	r1, #16
     748:	505a      	str	r2, [r3, r1]


	//set pins to GND
	PORT->Group[0].DIRSET.reg = LANDING_BUTTON3_HIGH_PIN;
     74a:	2280      	movs	r2, #128	; 0x80
     74c:	0192      	lsls	r2, r2, #6
     74e:	609a      	str	r2, [r3, #8]
	PORT->Group[0].OUTSET.reg = LANDING_BUTTON3_HIGH_PIN;
     750:	619a      	str	r2, [r3, #24]

	PORT->Group[1].DIRSET.reg = LANDING_BUTTON2_HIGH_PIN | LANDING_BUTTON1_HIGH_PIN | LANDING_BUTTON4_HIGH_PIN;
     752:	4a05      	ldr	r2, [pc, #20]	; (768 <init_button_landing+0x44>)
     754:	390c      	subs	r1, #12
     756:	505a      	str	r2, [r3, r1]
	PORT->Group[1].OUTSET.reg = LANDING_BUTTON2_HIGH_PIN | LANDING_BUTTON1_HIGH_PIN | LANDING_BUTTON4_HIGH_PIN;
     758:	3110      	adds	r1, #16
     75a:	505a      	str	r2, [r3, r1]

}
     75c:	4770      	bx	lr
     75e:	46c0      	nop			; (mov r8, r8)
     760:	41004400 	.word	0x41004400
     764:	18001000 	.word	0x18001000
     768:	00800a00 	.word	0x00800a00

0000076c <read_button_landing>:

int read_button_landing(int landing_button_index) {
     76c:	1e03      	subs	r3, r0, #0
	if(landing_button_index == 1) {
     76e:	2b01      	cmp	r3, #1
     770:	d105      	bne.n	77e <read_button_landing+0x12>
		return (PORT->Group[1].IN.reg & LANDING_BUTTON1_PIN) != 0;
     772:	339f      	adds	r3, #159	; 0x9f
     774:	4a0d      	ldr	r2, [pc, #52]	; (7ac <read_button_landing+0x40>)
     776:	58d0      	ldr	r0, [r2, r3]
     778:	05c0      	lsls	r0, r0, #23
     77a:	0fc0      	lsrs	r0, r0, #31
     77c:	e014      	b.n	7a8 <read_button_landing+0x3c>
	} else if(landing_button_index == 2) {
     77e:	2802      	cmp	r0, #2
     780:	d104      	bne.n	78c <read_button_landing+0x20>
		return (PORT->Group[0].IN.reg & LANDING_BUTTON2_PIN) != 0;
     782:	4b0a      	ldr	r3, [pc, #40]	; (7ac <read_button_landing+0x40>)
     784:	6a18      	ldr	r0, [r3, #32]
     786:	0100      	lsls	r0, r0, #4
     788:	0fc0      	lsrs	r0, r0, #31
     78a:	e00d      	b.n	7a8 <read_button_landing+0x3c>
	} else if(landing_button_index == 3) {
     78c:	2803      	cmp	r0, #3
     78e:	d104      	bne.n	79a <read_button_landing+0x2e>
		return (PORT->Group[0].IN.reg & LANDING_BUTTON3_PIN) != 0;
     790:	4b06      	ldr	r3, [pc, #24]	; (7ac <read_button_landing+0x40>)
     792:	6a18      	ldr	r0, [r3, #32]
     794:	00c0      	lsls	r0, r0, #3
     796:	0fc0      	lsrs	r0, r0, #31
     798:	e006      	b.n	7a8 <read_button_landing+0x3c>
	}else if(landing_button_index == 4) {
		return (PORT->Group[0].IN.reg & LANDING_BUTTON4_PIN) != 0;
	} else {
		return 1;
     79a:	2001      	movs	r0, #1
		return (PORT->Group[1].IN.reg & LANDING_BUTTON1_PIN) != 0;
	} else if(landing_button_index == 2) {
		return (PORT->Group[0].IN.reg & LANDING_BUTTON2_PIN) != 0;
	} else if(landing_button_index == 3) {
		return (PORT->Group[0].IN.reg & LANDING_BUTTON3_PIN) != 0;
	}else if(landing_button_index == 4) {
     79c:	2b04      	cmp	r3, #4
     79e:	d103      	bne.n	7a8 <read_button_landing+0x3c>
		return (PORT->Group[0].IN.reg & LANDING_BUTTON4_PIN) != 0;
     7a0:	4b02      	ldr	r3, [pc, #8]	; (7ac <read_button_landing+0x40>)
     7a2:	6a18      	ldr	r0, [r3, #32]
     7a4:	04c0      	lsls	r0, r0, #19
     7a6:	0fc0      	lsrs	r0, r0, #31
	} else {
		return 1;
	}

}
     7a8:	4770      	bx	lr
     7aa:	46c0      	nop			; (mov r8, r8)
     7ac:	41004400 	.word	0x41004400

000007b0 <number_of_triggered_landing_buttons>:

int number_of_triggered_landing_buttons() {
     7b0:	b570      	push	{r4, r5, r6, lr}
	int count = 0;
	for(int i = 1; i <= 4; i++) {
     7b2:	2401      	movs	r4, #1
	}

}

int number_of_triggered_landing_buttons() {
	int count = 0;
     7b4:	2500      	movs	r5, #0
	for(int i = 1; i <= 4; i++) {
		count += read_button_landing(i);
     7b6:	4e04      	ldr	r6, [pc, #16]	; (7c8 <number_of_triggered_landing_buttons+0x18>)
     7b8:	0020      	movs	r0, r4
     7ba:	47b0      	blx	r6
     7bc:	182d      	adds	r5, r5, r0

}

int number_of_triggered_landing_buttons() {
	int count = 0;
	for(int i = 1; i <= 4; i++) {
     7be:	3401      	adds	r4, #1
     7c0:	2c05      	cmp	r4, #5
     7c2:	d1f9      	bne.n	7b8 <number_of_triggered_landing_buttons+0x8>
		count += read_button_landing(i);
	}
	return count;
} 
     7c4:	0028      	movs	r0, r5
     7c6:	bd70      	pop	{r4, r5, r6, pc}
     7c8:	0000076d 	.word	0x0000076d

000007cc <tc_callback_to_send_data>:

 char tc_data = 'e';

 void tc_callback_to_send_data(
 struct tc_module *const module_inst)
 {
     7cc:	b510      	push	{r4, lr}
	 print(&tc_data, 1);
     7ce:	2101      	movs	r1, #1
     7d0:	4801      	ldr	r0, [pc, #4]	; (7d8 <tc_callback_to_send_data+0xc>)
     7d2:	4b02      	ldr	r3, [pc, #8]	; (7dc <tc_callback_to_send_data+0x10>)
     7d4:	4798      	blx	r3
 }
     7d6:	bd10      	pop	{r4, pc}
     7d8:	20000000 	.word	0x20000000
     7dc:	00000965 	.word	0x00000965

000007e0 <configure_tc>:

 void configure_tc(void)
 {
     7e0:	b510      	push	{r4, lr}
     7e2:	b08e      	sub	sp, #56	; 0x38

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     7e4:	aa01      	add	r2, sp, #4
     7e6:	2300      	movs	r3, #0
     7e8:	2100      	movs	r1, #0
     7ea:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     7ec:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     7ee:	2000      	movs	r0, #0
     7f0:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     7f2:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     7f4:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     7f6:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     7f8:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     7fa:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     7fc:	7411      	strb	r1, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     7fe:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     800:	6193      	str	r3, [r2, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     802:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     804:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     806:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     808:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     80a:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     80c:	8593      	strh	r3, [r2, #44]	; 0x2c
	 struct tc_config config_tc;
	 tc_get_config_defaults(&config_tc);
	 config_tc.counter_size = TC_COUNTER_SIZE_8BIT;
     80e:	3304      	adds	r3, #4
     810:	7093      	strb	r3, [r2, #2]
	 config_tc.clock_source = GCLK_GENERATOR_2;
     812:	3b02      	subs	r3, #2
     814:	7013      	strb	r3, [r2, #0]
	 config_tc.clock_prescaler = TC_CLOCK_PRESCALER_DIV16;
     816:	2380      	movs	r3, #128	; 0x80
     818:	00db      	lsls	r3, r3, #3
     81a:	8093      	strh	r3, [r2, #4]
	 config_tc.counter_8_bit.period = 50;
     81c:	2132      	movs	r1, #50	; 0x32
     81e:	2329      	movs	r3, #41	; 0x29
     820:	54d1      	strb	r1, [r2, r3]
	 tc_init(&tc_instance, CONF_TC_MODULE, &config_tc);
     822:	4c08      	ldr	r4, [pc, #32]	; (844 <configure_tc+0x64>)
     824:	4908      	ldr	r1, [pc, #32]	; (848 <configure_tc+0x68>)
     826:	0020      	movs	r0, r4
     828:	4b08      	ldr	r3, [pc, #32]	; (84c <configure_tc+0x6c>)
     82a:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     82c:	6822      	ldr	r2, [r4, #0]

	while (tc_is_syncing(module_inst)) {
     82e:	217f      	movs	r1, #127	; 0x7f
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     830:	7bd3      	ldrb	r3, [r2, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     832:	438b      	bics	r3, r1
     834:	d1fc      	bne.n	830 <configure_tc+0x50>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     836:	8811      	ldrh	r1, [r2, #0]
     838:	3302      	adds	r3, #2
     83a:	430b      	orrs	r3, r1
     83c:	8013      	strh	r3, [r2, #0]
	 tc_enable(&tc_instance);
 }
     83e:	b00e      	add	sp, #56	; 0x38
     840:	bd10      	pop	{r4, pc}
     842:	46c0      	nop			; (mov r8, r8)
     844:	200000f4 	.word	0x200000f4
     848:	42002c00 	.word	0x42002c00
     84c:	00000461 	.word	0x00000461

00000850 <configure_tc_callbacks>:

 void configure_tc_callbacks(void)
 {
     850:	b510      	push	{r4, lr}
	 tc_register_callback(&tc_instance, tc_callback_to_send_data,
     852:	4c0c      	ldr	r4, [pc, #48]	; (884 <configure_tc_callbacks+0x34>)
     854:	2200      	movs	r2, #0
     856:	490c      	ldr	r1, [pc, #48]	; (888 <configure_tc_callbacks+0x38>)
     858:	0020      	movs	r0, r4
     85a:	4b0c      	ldr	r3, [pc, #48]	; (88c <configure_tc_callbacks+0x3c>)
     85c:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     85e:	6820      	ldr	r0, [r4, #0]
     860:	4b0b      	ldr	r3, [pc, #44]	; (890 <configure_tc_callbacks+0x40>)
     862:	4798      	blx	r3
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     864:	4b0b      	ldr	r3, [pc, #44]	; (894 <configure_tc_callbacks+0x44>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     866:	5c1b      	ldrb	r3, [r3, r0]
     868:	221f      	movs	r2, #31
     86a:	4013      	ands	r3, r2
     86c:	3a1e      	subs	r2, #30
     86e:	0011      	movs	r1, r2
     870:	4099      	lsls	r1, r3
     872:	4b09      	ldr	r3, [pc, #36]	; (898 <configure_tc_callbacks+0x48>)
     874:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     876:	7e61      	ldrb	r1, [r4, #25]
     878:	2301      	movs	r3, #1
     87a:	430b      	orrs	r3, r1
     87c:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     87e:	6823      	ldr	r3, [r4, #0]
     880:	735a      	strb	r2, [r3, #13]
	 TC_CALLBACK_OVERFLOW);
	 tc_enable_callback(&tc_instance, TC_CALLBACK_OVERFLOW);
 }
     882:	bd10      	pop	{r4, pc}
     884:	200000f4 	.word	0x200000f4
     888:	000007cd 	.word	0x000007cd
     88c:	0000036d 	.word	0x0000036d
     890:	00000429 	.word	0x00000429
     894:	00001bd4 	.word	0x00001bd4
     898:	e000e100 	.word	0xe000e100

0000089c <tc_set_data_to_send>:

 void tc_set_data_to_send(char tc_data_p) {
	tc_data = tc_data_p;
     89c:	4b01      	ldr	r3, [pc, #4]	; (8a4 <tc_set_data_to_send+0x8>)
     89e:	7018      	strb	r0, [r3, #0]
     8a0:	4770      	bx	lr
     8a2:	46c0      	nop			; (mov r8, r8)
     8a4:	20000000 	.word	0x20000000

000008a8 <configure_usart>:
void usart_write_callback(struct usart_module *const usart_module)
{
	port_pin_toggle_output_level(LED_0_PIN);
}

void configure_usart(void) {
     8a8:	b530      	push	{r4, r5, lr}
     8aa:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     8ac:	2380      	movs	r3, #128	; 0x80
     8ae:	05db      	lsls	r3, r3, #23
     8b0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     8b2:	2300      	movs	r3, #0
     8b4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     8b6:	22ff      	movs	r2, #255	; 0xff
     8b8:	4669      	mov	r1, sp
     8ba:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     8bc:	2200      	movs	r2, #0
     8be:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     8c0:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
     8c2:	2196      	movs	r1, #150	; 0x96
     8c4:	0189      	lsls	r1, r1, #6
     8c6:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
     8c8:	2101      	movs	r1, #1
     8ca:	2024      	movs	r0, #36	; 0x24
     8cc:	466c      	mov	r4, sp
     8ce:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     8d0:	3001      	adds	r0, #1
     8d2:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     8d4:	3125      	adds	r1, #37	; 0x25
     8d6:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     8d8:	3101      	adds	r1, #1
     8da:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     8dc:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     8de:	3105      	adds	r1, #5
     8e0:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     8e2:	3101      	adds	r1, #1
     8e4:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     8e6:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     8e8:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     8ea:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     8ec:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     8ee:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     8f0:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     8f2:	2313      	movs	r3, #19
     8f4:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     8f6:	7762      	strb	r2, [r4, #29]
	struct usart_config config_usart;

	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600; //115200;
	config_usart.mux_setting = MY_SERCOM_MUX_SETTING;
     8f8:	2380      	movs	r3, #128	; 0x80
     8fa:	035b      	lsls	r3, r3, #13
     8fc:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = MY_SERCOM_PINMUX_PAD0;
     8fe:	4b12      	ldr	r3, [pc, #72]	; (948 <configure_usart+0xa0>)
     900:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = MY_SERCOM_PINMUX_PAD1;
     902:	4b12      	ldr	r3, [pc, #72]	; (94c <configure_usart+0xa4>)
     904:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = MY_SERCOM_PINMUX_PAD2;
     906:	2301      	movs	r3, #1
     908:	425b      	negs	r3, r3
     90a:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = MY_SERCOM_PINMUX_PAD3;
     90c:	930f      	str	r3, [sp, #60]	; 0x3c

	while (usart_init(&usart_instance,
     90e:	4d10      	ldr	r5, [pc, #64]	; (950 <configure_usart+0xa8>)
     910:	4c10      	ldr	r4, [pc, #64]	; (954 <configure_usart+0xac>)
     912:	466a      	mov	r2, sp
     914:	4910      	ldr	r1, [pc, #64]	; (958 <configure_usart+0xb0>)
     916:	0028      	movs	r0, r5
     918:	47a0      	blx	r4
     91a:	2800      	cmp	r0, #0
     91c:	d1f9      	bne.n	912 <configure_usart+0x6a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     91e:	4d0c      	ldr	r5, [pc, #48]	; (950 <configure_usart+0xa8>)
     920:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     922:	0020      	movs	r0, r4
     924:	4b0d      	ldr	r3, [pc, #52]	; (95c <configure_usart+0xb4>)
     926:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     928:	231f      	movs	r3, #31
     92a:	4018      	ands	r0, r3
     92c:	3b1e      	subs	r3, #30
     92e:	4083      	lsls	r3, r0
     930:	4a0b      	ldr	r2, [pc, #44]	; (960 <configure_usart+0xb8>)
     932:	6013      	str	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     934:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     936:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     938:	2b00      	cmp	r3, #0
     93a:	d1fc      	bne.n	936 <configure_usart+0x8e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     93c:	6822      	ldr	r2, [r4, #0]
     93e:	3302      	adds	r3, #2
     940:	4313      	orrs	r3, r2
     942:	6023      	str	r3, [r4, #0]
	MY_MODULE, &config_usart) != STATUS_OK) {
	}
	usart_enable(&usart_instance);
	
}
     944:	b011      	add	sp, #68	; 0x44
     946:	bd30      	pop	{r4, r5, pc}
     948:	00220003 	.word	0x00220003
     94c:	00230003 	.word	0x00230003
     950:	20000084 	.word	0x20000084
     954:	00000e49 	.word	0x00000e49
     958:	42001c00 	.word	0x42001c00
     95c:	00000155 	.word	0x00000155
     960:	e000e100 	.word	0xe000e100

00000964 <print>:
	usart_enable_callback(&usart_instance,
	USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}

void print(uint8_t * string, uint16_t size) {
     964:	b510      	push	{r4, lr}
     966:	000a      	movs	r2, r1
	usart_write_buffer_wait(&usart_instance, string, size);
     968:	0001      	movs	r1, r0
     96a:	4802      	ldr	r0, [pc, #8]	; (974 <print+0x10>)
     96c:	4b02      	ldr	r3, [pc, #8]	; (978 <print+0x14>)
     96e:	4798      	blx	r3
}
     970:	bd10      	pop	{r4, pc}
     972:	46c0      	nop			; (mov r8, r8)
     974:	20000084 	.word	0x20000084
     978:	000011ad 	.word	0x000011ad

0000097c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     97c:	4b0c      	ldr	r3, [pc, #48]	; (9b0 <cpu_irq_enter_critical+0x34>)
     97e:	681b      	ldr	r3, [r3, #0]
     980:	2b00      	cmp	r3, #0
     982:	d110      	bne.n	9a6 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     984:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     988:	2b00      	cmp	r3, #0
     98a:	d109      	bne.n	9a0 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     98c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     98e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     992:	2200      	movs	r2, #0
     994:	4b07      	ldr	r3, [pc, #28]	; (9b4 <cpu_irq_enter_critical+0x38>)
     996:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     998:	3201      	adds	r2, #1
     99a:	4b07      	ldr	r3, [pc, #28]	; (9b8 <cpu_irq_enter_critical+0x3c>)
     99c:	701a      	strb	r2, [r3, #0]
     99e:	e002      	b.n	9a6 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     9a0:	2200      	movs	r2, #0
     9a2:	4b05      	ldr	r3, [pc, #20]	; (9b8 <cpu_irq_enter_critical+0x3c>)
     9a4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     9a6:	4a02      	ldr	r2, [pc, #8]	; (9b0 <cpu_irq_enter_critical+0x34>)
     9a8:	6813      	ldr	r3, [r2, #0]
     9aa:	3301      	adds	r3, #1
     9ac:	6013      	str	r3, [r2, #0]
}
     9ae:	4770      	bx	lr
     9b0:	2000003c 	.word	0x2000003c
     9b4:	20000001 	.word	0x20000001
     9b8:	20000040 	.word	0x20000040

000009bc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     9bc:	4b08      	ldr	r3, [pc, #32]	; (9e0 <cpu_irq_leave_critical+0x24>)
     9be:	681a      	ldr	r2, [r3, #0]
     9c0:	3a01      	subs	r2, #1
     9c2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     9c4:	681b      	ldr	r3, [r3, #0]
     9c6:	2b00      	cmp	r3, #0
     9c8:	d109      	bne.n	9de <cpu_irq_leave_critical+0x22>
     9ca:	4b06      	ldr	r3, [pc, #24]	; (9e4 <cpu_irq_leave_critical+0x28>)
     9cc:	781b      	ldrb	r3, [r3, #0]
     9ce:	2b00      	cmp	r3, #0
     9d0:	d005      	beq.n	9de <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     9d2:	2201      	movs	r2, #1
     9d4:	4b04      	ldr	r3, [pc, #16]	; (9e8 <cpu_irq_leave_critical+0x2c>)
     9d6:	701a      	strb	r2, [r3, #0]
     9d8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     9dc:	b662      	cpsie	i
	}
}
     9de:	4770      	bx	lr
     9e0:	2000003c 	.word	0x2000003c
     9e4:	20000040 	.word	0x20000040
     9e8:	20000001 	.word	0x20000001

000009ec <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     9ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ee:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     9f0:	ac01      	add	r4, sp, #4
     9f2:	2501      	movs	r5, #1
     9f4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     9f6:	2700      	movs	r7, #0
     9f8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     9fa:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     9fc:	0021      	movs	r1, r4
     9fe:	2016      	movs	r0, #22
     a00:	4e06      	ldr	r6, [pc, #24]	; (a1c <system_board_init+0x30>)
     a02:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     a04:	2280      	movs	r2, #128	; 0x80
     a06:	03d2      	lsls	r2, r2, #15
     a08:	4b05      	ldr	r3, [pc, #20]	; (a20 <system_board_init+0x34>)
     a0a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     a0c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     a0e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     a10:	0021      	movs	r1, r4
     a12:	200f      	movs	r0, #15
     a14:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     a16:	b003      	add	sp, #12
     a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	00000a25 	.word	0x00000a25
     a20:	41004400 	.word	0x41004400

00000a24 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     a24:	b500      	push	{lr}
     a26:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     a28:	ab01      	add	r3, sp, #4
     a2a:	2280      	movs	r2, #128	; 0x80
     a2c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     a2e:	780a      	ldrb	r2, [r1, #0]
     a30:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     a32:	784a      	ldrb	r2, [r1, #1]
     a34:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     a36:	788a      	ldrb	r2, [r1, #2]
     a38:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     a3a:	0019      	movs	r1, r3
     a3c:	4b01      	ldr	r3, [pc, #4]	; (a44 <port_pin_set_config+0x20>)
     a3e:	4798      	blx	r3
}
     a40:	b003      	add	sp, #12
     a42:	bd00      	pop	{pc}
     a44:	000017c5 	.word	0x000017c5

00000a48 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     a48:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     a4a:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a4c:	2340      	movs	r3, #64	; 0x40
     a4e:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     a50:	4281      	cmp	r1, r0
     a52:	d201      	bcs.n	a58 <_sercom_get_sync_baud_val+0x10>
     a54:	e00a      	b.n	a6c <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
     a56:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     a58:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     a5a:	1c63      	adds	r3, r4, #1
     a5c:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     a5e:	4288      	cmp	r0, r1
     a60:	d9f9      	bls.n	a56 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a62:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     a64:	2cff      	cmp	r4, #255	; 0xff
     a66:	d801      	bhi.n	a6c <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     a68:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     a6a:	2300      	movs	r3, #0
	}
}
     a6c:	0018      	movs	r0, r3
     a6e:	bd10      	pop	{r4, pc}

00000a70 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     a70:	b5f0      	push	{r4, r5, r6, r7, lr}
     a72:	465f      	mov	r7, fp
     a74:	4656      	mov	r6, sl
     a76:	464d      	mov	r5, r9
     a78:	4644      	mov	r4, r8
     a7a:	b4f0      	push	{r4, r5, r6, r7}
     a7c:	b089      	sub	sp, #36	; 0x24
     a7e:	000c      	movs	r4, r1
     a80:	9205      	str	r2, [sp, #20]
     a82:	aa12      	add	r2, sp, #72	; 0x48
     a84:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     a86:	0002      	movs	r2, r0
     a88:	434a      	muls	r2, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a8a:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     a8c:	42a2      	cmp	r2, r4
     a8e:	d900      	bls.n	a92 <_sercom_get_async_baud_val+0x22>
     a90:	e0c6      	b.n	c20 <_sercom_get_async_baud_val+0x1b0>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     a92:	2b00      	cmp	r3, #0
     a94:	d151      	bne.n	b3a <_sercom_get_async_baud_val+0xca>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     a96:	0002      	movs	r2, r0
     a98:	0008      	movs	r0, r1
     a9a:	2100      	movs	r1, #0
     a9c:	4d64      	ldr	r5, [pc, #400]	; (c30 <_sercom_get_async_baud_val+0x1c0>)
     a9e:	47a8      	blx	r5
     aa0:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     aa2:	0026      	movs	r6, r4
     aa4:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     aa6:	2300      	movs	r3, #0
     aa8:	2400      	movs	r4, #0
     aaa:	9300      	str	r3, [sp, #0]
     aac:	9401      	str	r4, [sp, #4]
     aae:	2200      	movs	r2, #0
     ab0:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     ab2:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     ab4:	2120      	movs	r1, #32
     ab6:	468c      	mov	ip, r1
     ab8:	391f      	subs	r1, #31
     aba:	9602      	str	r6, [sp, #8]
     abc:	9703      	str	r7, [sp, #12]
     abe:	2420      	movs	r4, #32
     ac0:	4264      	negs	r4, r4
     ac2:	1904      	adds	r4, r0, r4
     ac4:	d403      	bmi.n	ace <_sercom_get_async_baud_val+0x5e>
     ac6:	000d      	movs	r5, r1
     ac8:	40a5      	lsls	r5, r4
     aca:	46a8      	mov	r8, r5
     acc:	e004      	b.n	ad8 <_sercom_get_async_baud_val+0x68>
     ace:	4664      	mov	r4, ip
     ad0:	1a24      	subs	r4, r4, r0
     ad2:	000d      	movs	r5, r1
     ad4:	40e5      	lsrs	r5, r4
     ad6:	46a8      	mov	r8, r5
     ad8:	000c      	movs	r4, r1
     ada:	4084      	lsls	r4, r0
     adc:	46a1      	mov	r9, r4

		r = r << 1;
     ade:	0014      	movs	r4, r2
     ae0:	001d      	movs	r5, r3
     ae2:	18a4      	adds	r4, r4, r2
     ae4:	415d      	adcs	r5, r3
     ae6:	0022      	movs	r2, r4
     ae8:	002b      	movs	r3, r5

		if (n & bit_shift) {
     aea:	4646      	mov	r6, r8
     aec:	465f      	mov	r7, fp
     aee:	423e      	tst	r6, r7
     af0:	d003      	beq.n	afa <_sercom_get_async_baud_val+0x8a>
			r |= 0x01;
     af2:	000e      	movs	r6, r1
     af4:	4326      	orrs	r6, r4
     af6:	0032      	movs	r2, r6
     af8:	002b      	movs	r3, r5
		}

		if (r >= d) {
     afa:	9c02      	ldr	r4, [sp, #8]
     afc:	9d03      	ldr	r5, [sp, #12]
     afe:	429d      	cmp	r5, r3
     b00:	d80f      	bhi.n	b22 <_sercom_get_async_baud_val+0xb2>
     b02:	d101      	bne.n	b08 <_sercom_get_async_baud_val+0x98>
     b04:	4294      	cmp	r4, r2
     b06:	d80c      	bhi.n	b22 <_sercom_get_async_baud_val+0xb2>
			r = r - d;
     b08:	9c02      	ldr	r4, [sp, #8]
     b0a:	9d03      	ldr	r5, [sp, #12]
     b0c:	1b12      	subs	r2, r2, r4
     b0e:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     b10:	464d      	mov	r5, r9
     b12:	9e00      	ldr	r6, [sp, #0]
     b14:	9f01      	ldr	r7, [sp, #4]
     b16:	4335      	orrs	r5, r6
     b18:	003c      	movs	r4, r7
     b1a:	4646      	mov	r6, r8
     b1c:	4334      	orrs	r4, r6
     b1e:	9500      	str	r5, [sp, #0]
     b20:	9401      	str	r4, [sp, #4]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     b22:	3801      	subs	r0, #1
     b24:	d2cb      	bcs.n	abe <_sercom_get_async_baud_val+0x4e>
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
     b26:	2200      	movs	r2, #0
     b28:	2301      	movs	r3, #1
     b2a:	9800      	ldr	r0, [sp, #0]
     b2c:	9901      	ldr	r1, [sp, #4]
     b2e:	1a12      	subs	r2, r2, r0
     b30:	418b      	sbcs	r3, r1
     b32:	0c12      	lsrs	r2, r2, #16
     b34:	041b      	lsls	r3, r3, #16
     b36:	431a      	orrs	r2, r3
     b38:	e06f      	b.n	c1a <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     b3a:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     b3c:	2b01      	cmp	r3, #1
     b3e:	d16c      	bne.n	c1a <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     b40:	0f63      	lsrs	r3, r4, #29
     b42:	9304      	str	r3, [sp, #16]
     b44:	00e3      	lsls	r3, r4, #3
     b46:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     b48:	000a      	movs	r2, r1
     b4a:	2300      	movs	r3, #0
     b4c:	2100      	movs	r1, #0
     b4e:	4c38      	ldr	r4, [pc, #224]	; (c30 <_sercom_get_async_baud_val+0x1c0>)
     b50:	47a0      	blx	r4
     b52:	0004      	movs	r4, r0
     b54:	000d      	movs	r5, r1
     b56:	2300      	movs	r3, #0
     b58:	469c      	mov	ip, r3
     b5a:	9306      	str	r3, [sp, #24]
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     b5c:	3320      	adds	r3, #32
     b5e:	469b      	mov	fp, r3
     b60:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     b62:	4663      	mov	r3, ip
     b64:	9307      	str	r3, [sp, #28]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     b66:	2300      	movs	r3, #0
     b68:	9302      	str	r3, [sp, #8]
     b6a:	2200      	movs	r2, #0
     b6c:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     b6e:	213f      	movs	r1, #63	; 0x3f
     b70:	9400      	str	r4, [sp, #0]
     b72:	9501      	str	r5, [sp, #4]
     b74:	000f      	movs	r7, r1
		bit_shift = (uint64_t)1 << i;
     b76:	2120      	movs	r1, #32
     b78:	4249      	negs	r1, r1
     b7a:	1879      	adds	r1, r7, r1
     b7c:	d403      	bmi.n	b86 <_sercom_get_async_baud_val+0x116>
     b7e:	0030      	movs	r0, r6
     b80:	4088      	lsls	r0, r1
     b82:	4684      	mov	ip, r0
     b84:	e004      	b.n	b90 <_sercom_get_async_baud_val+0x120>
     b86:	4659      	mov	r1, fp
     b88:	1bc9      	subs	r1, r1, r7
     b8a:	0030      	movs	r0, r6
     b8c:	40c8      	lsrs	r0, r1
     b8e:	4684      	mov	ip, r0
     b90:	0031      	movs	r1, r6
     b92:	40b9      	lsls	r1, r7
     b94:	4689      	mov	r9, r1

		r = r << 1;
     b96:	0010      	movs	r0, r2
     b98:	0019      	movs	r1, r3
     b9a:	1880      	adds	r0, r0, r2
     b9c:	4159      	adcs	r1, r3
     b9e:	0002      	movs	r2, r0
     ba0:	000b      	movs	r3, r1

		if (n & bit_shift) {
     ba2:	4644      	mov	r4, r8
     ba4:	464d      	mov	r5, r9
     ba6:	402c      	ands	r4, r5
     ba8:	46a2      	mov	sl, r4
     baa:	4664      	mov	r4, ip
     bac:	9d04      	ldr	r5, [sp, #16]
     bae:	402c      	ands	r4, r5
     bb0:	46a4      	mov	ip, r4
     bb2:	4654      	mov	r4, sl
     bb4:	4665      	mov	r5, ip
     bb6:	432c      	orrs	r4, r5
     bb8:	d003      	beq.n	bc2 <_sercom_get_async_baud_val+0x152>
			r |= 0x01;
     bba:	0034      	movs	r4, r6
     bbc:	4304      	orrs	r4, r0
     bbe:	0022      	movs	r2, r4
     bc0:	000b      	movs	r3, r1
		}

		if (r >= d) {
     bc2:	9800      	ldr	r0, [sp, #0]
     bc4:	9901      	ldr	r1, [sp, #4]
     bc6:	4299      	cmp	r1, r3
     bc8:	d80a      	bhi.n	be0 <_sercom_get_async_baud_val+0x170>
     bca:	d101      	bne.n	bd0 <_sercom_get_async_baud_val+0x160>
     bcc:	4290      	cmp	r0, r2
     bce:	d807      	bhi.n	be0 <_sercom_get_async_baud_val+0x170>
			r = r - d;
     bd0:	9800      	ldr	r0, [sp, #0]
     bd2:	9901      	ldr	r1, [sp, #4]
     bd4:	1a12      	subs	r2, r2, r0
     bd6:	418b      	sbcs	r3, r1
			q |= bit_shift;
     bd8:	9902      	ldr	r1, [sp, #8]
     bda:	4648      	mov	r0, r9
     bdc:	4301      	orrs	r1, r0
     bde:	9102      	str	r1, [sp, #8]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     be0:	3f01      	subs	r7, #1
     be2:	d2c8      	bcs.n	b76 <_sercom_get_async_baud_val+0x106>
     be4:	9c00      	ldr	r4, [sp, #0]
     be6:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     be8:	9902      	ldr	r1, [sp, #8]
     bea:	9a07      	ldr	r2, [sp, #28]
     bec:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     bee:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     bf0:	4910      	ldr	r1, [pc, #64]	; (c34 <_sercom_get_async_baud_val+0x1c4>)
     bf2:	428b      	cmp	r3, r1
     bf4:	d90b      	bls.n	c0e <_sercom_get_async_baud_val+0x19e>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     bf6:	9b06      	ldr	r3, [sp, #24]
     bf8:	3301      	adds	r3, #1
     bfa:	b2db      	uxtb	r3, r3
     bfc:	0019      	movs	r1, r3
     bfe:	9306      	str	r3, [sp, #24]
     c00:	0013      	movs	r3, r2
     c02:	3301      	adds	r3, #1
     c04:	9307      	str	r3, [sp, #28]
     c06:	2908      	cmp	r1, #8
     c08:	d1ad      	bne.n	b66 <_sercom_get_async_baud_val+0xf6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     c0a:	2540      	movs	r5, #64	; 0x40
     c0c:	e008      	b.n	c20 <_sercom_get_async_baud_val+0x1b0>
     c0e:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     c10:	9a06      	ldr	r2, [sp, #24]
     c12:	2a08      	cmp	r2, #8
     c14:	d004      	beq.n	c20 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     c16:	0352      	lsls	r2, r2, #13
     c18:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     c1a:	9b05      	ldr	r3, [sp, #20]
     c1c:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     c1e:	2500      	movs	r5, #0
}
     c20:	0028      	movs	r0, r5
     c22:	b009      	add	sp, #36	; 0x24
     c24:	bc3c      	pop	{r2, r3, r4, r5}
     c26:	4690      	mov	r8, r2
     c28:	4699      	mov	r9, r3
     c2a:	46a2      	mov	sl, r4
     c2c:	46ab      	mov	fp, r5
     c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c30:	00001afd 	.word	0x00001afd
     c34:	00001fff 	.word	0x00001fff

00000c38 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     c38:	b510      	push	{r4, lr}
     c3a:	b082      	sub	sp, #8
     c3c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     c3e:	4b0e      	ldr	r3, [pc, #56]	; (c78 <sercom_set_gclk_generator+0x40>)
     c40:	781b      	ldrb	r3, [r3, #0]
     c42:	2b00      	cmp	r3, #0
     c44:	d001      	beq.n	c4a <sercom_set_gclk_generator+0x12>
     c46:	2900      	cmp	r1, #0
     c48:	d00d      	beq.n	c66 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     c4a:	a901      	add	r1, sp, #4
     c4c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     c4e:	2013      	movs	r0, #19
     c50:	4b0a      	ldr	r3, [pc, #40]	; (c7c <sercom_set_gclk_generator+0x44>)
     c52:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     c54:	2013      	movs	r0, #19
     c56:	4b0a      	ldr	r3, [pc, #40]	; (c80 <sercom_set_gclk_generator+0x48>)
     c58:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     c5a:	4b07      	ldr	r3, [pc, #28]	; (c78 <sercom_set_gclk_generator+0x40>)
     c5c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     c5e:	2201      	movs	r2, #1
     c60:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     c62:	2000      	movs	r0, #0
     c64:	e006      	b.n	c74 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     c66:	4b04      	ldr	r3, [pc, #16]	; (c78 <sercom_set_gclk_generator+0x40>)
     c68:	785b      	ldrb	r3, [r3, #1]
     c6a:	4283      	cmp	r3, r0
     c6c:	d001      	beq.n	c72 <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     c6e:	201d      	movs	r0, #29
     c70:	e000      	b.n	c74 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     c72:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     c74:	b002      	add	sp, #8
     c76:	bd10      	pop	{r4, pc}
     c78:	20000044 	.word	0x20000044
     c7c:	000016cd 	.word	0x000016cd
     c80:	00001641 	.word	0x00001641

00000c84 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     c84:	4b44      	ldr	r3, [pc, #272]	; (d98 <_sercom_get_default_pad+0x114>)
     c86:	4298      	cmp	r0, r3
     c88:	d033      	beq.n	cf2 <_sercom_get_default_pad+0x6e>
     c8a:	d806      	bhi.n	c9a <_sercom_get_default_pad+0x16>
     c8c:	4b43      	ldr	r3, [pc, #268]	; (d9c <_sercom_get_default_pad+0x118>)
     c8e:	4298      	cmp	r0, r3
     c90:	d00d      	beq.n	cae <_sercom_get_default_pad+0x2a>
     c92:	4b43      	ldr	r3, [pc, #268]	; (da0 <_sercom_get_default_pad+0x11c>)
     c94:	4298      	cmp	r0, r3
     c96:	d01b      	beq.n	cd0 <_sercom_get_default_pad+0x4c>
     c98:	e06f      	b.n	d7a <_sercom_get_default_pad+0xf6>
     c9a:	4b42      	ldr	r3, [pc, #264]	; (da4 <_sercom_get_default_pad+0x120>)
     c9c:	4298      	cmp	r0, r3
     c9e:	d04a      	beq.n	d36 <_sercom_get_default_pad+0xb2>
     ca0:	4b41      	ldr	r3, [pc, #260]	; (da8 <_sercom_get_default_pad+0x124>)
     ca2:	4298      	cmp	r0, r3
     ca4:	d058      	beq.n	d58 <_sercom_get_default_pad+0xd4>
     ca6:	4b41      	ldr	r3, [pc, #260]	; (dac <_sercom_get_default_pad+0x128>)
     ca8:	4298      	cmp	r0, r3
     caa:	d166      	bne.n	d7a <_sercom_get_default_pad+0xf6>
     cac:	e032      	b.n	d14 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cae:	2901      	cmp	r1, #1
     cb0:	d006      	beq.n	cc0 <_sercom_get_default_pad+0x3c>
     cb2:	2900      	cmp	r1, #0
     cb4:	d063      	beq.n	d7e <_sercom_get_default_pad+0xfa>
     cb6:	2902      	cmp	r1, #2
     cb8:	d006      	beq.n	cc8 <_sercom_get_default_pad+0x44>
     cba:	2903      	cmp	r1, #3
     cbc:	d006      	beq.n	ccc <_sercom_get_default_pad+0x48>
     cbe:	e001      	b.n	cc4 <_sercom_get_default_pad+0x40>
     cc0:	483b      	ldr	r0, [pc, #236]	; (db0 <_sercom_get_default_pad+0x12c>)
     cc2:	e067      	b.n	d94 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     cc4:	2000      	movs	r0, #0
     cc6:	e065      	b.n	d94 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cc8:	483a      	ldr	r0, [pc, #232]	; (db4 <_sercom_get_default_pad+0x130>)
     cca:	e063      	b.n	d94 <_sercom_get_default_pad+0x110>
     ccc:	483a      	ldr	r0, [pc, #232]	; (db8 <_sercom_get_default_pad+0x134>)
     cce:	e061      	b.n	d94 <_sercom_get_default_pad+0x110>
     cd0:	2901      	cmp	r1, #1
     cd2:	d006      	beq.n	ce2 <_sercom_get_default_pad+0x5e>
     cd4:	2900      	cmp	r1, #0
     cd6:	d054      	beq.n	d82 <_sercom_get_default_pad+0xfe>
     cd8:	2902      	cmp	r1, #2
     cda:	d006      	beq.n	cea <_sercom_get_default_pad+0x66>
     cdc:	2903      	cmp	r1, #3
     cde:	d006      	beq.n	cee <_sercom_get_default_pad+0x6a>
     ce0:	e001      	b.n	ce6 <_sercom_get_default_pad+0x62>
     ce2:	4836      	ldr	r0, [pc, #216]	; (dbc <_sercom_get_default_pad+0x138>)
     ce4:	e056      	b.n	d94 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     ce6:	2000      	movs	r0, #0
     ce8:	e054      	b.n	d94 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cea:	4835      	ldr	r0, [pc, #212]	; (dc0 <_sercom_get_default_pad+0x13c>)
     cec:	e052      	b.n	d94 <_sercom_get_default_pad+0x110>
     cee:	4835      	ldr	r0, [pc, #212]	; (dc4 <_sercom_get_default_pad+0x140>)
     cf0:	e050      	b.n	d94 <_sercom_get_default_pad+0x110>
     cf2:	2901      	cmp	r1, #1
     cf4:	d006      	beq.n	d04 <_sercom_get_default_pad+0x80>
     cf6:	2900      	cmp	r1, #0
     cf8:	d045      	beq.n	d86 <_sercom_get_default_pad+0x102>
     cfa:	2902      	cmp	r1, #2
     cfc:	d006      	beq.n	d0c <_sercom_get_default_pad+0x88>
     cfe:	2903      	cmp	r1, #3
     d00:	d006      	beq.n	d10 <_sercom_get_default_pad+0x8c>
     d02:	e001      	b.n	d08 <_sercom_get_default_pad+0x84>
     d04:	4830      	ldr	r0, [pc, #192]	; (dc8 <_sercom_get_default_pad+0x144>)
     d06:	e045      	b.n	d94 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     d08:	2000      	movs	r0, #0
     d0a:	e043      	b.n	d94 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d0c:	482f      	ldr	r0, [pc, #188]	; (dcc <_sercom_get_default_pad+0x148>)
     d0e:	e041      	b.n	d94 <_sercom_get_default_pad+0x110>
     d10:	482f      	ldr	r0, [pc, #188]	; (dd0 <_sercom_get_default_pad+0x14c>)
     d12:	e03f      	b.n	d94 <_sercom_get_default_pad+0x110>
     d14:	2901      	cmp	r1, #1
     d16:	d006      	beq.n	d26 <_sercom_get_default_pad+0xa2>
     d18:	2900      	cmp	r1, #0
     d1a:	d036      	beq.n	d8a <_sercom_get_default_pad+0x106>
     d1c:	2902      	cmp	r1, #2
     d1e:	d006      	beq.n	d2e <_sercom_get_default_pad+0xaa>
     d20:	2903      	cmp	r1, #3
     d22:	d006      	beq.n	d32 <_sercom_get_default_pad+0xae>
     d24:	e001      	b.n	d2a <_sercom_get_default_pad+0xa6>
     d26:	482b      	ldr	r0, [pc, #172]	; (dd4 <_sercom_get_default_pad+0x150>)
     d28:	e034      	b.n	d94 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     d2a:	2000      	movs	r0, #0
     d2c:	e032      	b.n	d94 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d2e:	482a      	ldr	r0, [pc, #168]	; (dd8 <_sercom_get_default_pad+0x154>)
     d30:	e030      	b.n	d94 <_sercom_get_default_pad+0x110>
     d32:	482a      	ldr	r0, [pc, #168]	; (ddc <_sercom_get_default_pad+0x158>)
     d34:	e02e      	b.n	d94 <_sercom_get_default_pad+0x110>
     d36:	2901      	cmp	r1, #1
     d38:	d006      	beq.n	d48 <_sercom_get_default_pad+0xc4>
     d3a:	2900      	cmp	r1, #0
     d3c:	d027      	beq.n	d8e <_sercom_get_default_pad+0x10a>
     d3e:	2902      	cmp	r1, #2
     d40:	d006      	beq.n	d50 <_sercom_get_default_pad+0xcc>
     d42:	2903      	cmp	r1, #3
     d44:	d006      	beq.n	d54 <_sercom_get_default_pad+0xd0>
     d46:	e001      	b.n	d4c <_sercom_get_default_pad+0xc8>
     d48:	4825      	ldr	r0, [pc, #148]	; (de0 <_sercom_get_default_pad+0x15c>)
     d4a:	e023      	b.n	d94 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     d4c:	2000      	movs	r0, #0
     d4e:	e021      	b.n	d94 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d50:	4824      	ldr	r0, [pc, #144]	; (de4 <_sercom_get_default_pad+0x160>)
     d52:	e01f      	b.n	d94 <_sercom_get_default_pad+0x110>
     d54:	4824      	ldr	r0, [pc, #144]	; (de8 <_sercom_get_default_pad+0x164>)
     d56:	e01d      	b.n	d94 <_sercom_get_default_pad+0x110>
     d58:	2901      	cmp	r1, #1
     d5a:	d006      	beq.n	d6a <_sercom_get_default_pad+0xe6>
     d5c:	2900      	cmp	r1, #0
     d5e:	d018      	beq.n	d92 <_sercom_get_default_pad+0x10e>
     d60:	2902      	cmp	r1, #2
     d62:	d006      	beq.n	d72 <_sercom_get_default_pad+0xee>
     d64:	2903      	cmp	r1, #3
     d66:	d006      	beq.n	d76 <_sercom_get_default_pad+0xf2>
     d68:	e001      	b.n	d6e <_sercom_get_default_pad+0xea>
     d6a:	4820      	ldr	r0, [pc, #128]	; (dec <_sercom_get_default_pad+0x168>)
     d6c:	e012      	b.n	d94 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     d6e:	2000      	movs	r0, #0
     d70:	e010      	b.n	d94 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d72:	481f      	ldr	r0, [pc, #124]	; (df0 <_sercom_get_default_pad+0x16c>)
     d74:	e00e      	b.n	d94 <_sercom_get_default_pad+0x110>
     d76:	481f      	ldr	r0, [pc, #124]	; (df4 <_sercom_get_default_pad+0x170>)
     d78:	e00c      	b.n	d94 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     d7a:	2000      	movs	r0, #0
     d7c:	e00a      	b.n	d94 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d7e:	481e      	ldr	r0, [pc, #120]	; (df8 <_sercom_get_default_pad+0x174>)
     d80:	e008      	b.n	d94 <_sercom_get_default_pad+0x110>
     d82:	2003      	movs	r0, #3
     d84:	e006      	b.n	d94 <_sercom_get_default_pad+0x110>
     d86:	481d      	ldr	r0, [pc, #116]	; (dfc <_sercom_get_default_pad+0x178>)
     d88:	e004      	b.n	d94 <_sercom_get_default_pad+0x110>
     d8a:	481d      	ldr	r0, [pc, #116]	; (e00 <_sercom_get_default_pad+0x17c>)
     d8c:	e002      	b.n	d94 <_sercom_get_default_pad+0x110>
     d8e:	481d      	ldr	r0, [pc, #116]	; (e04 <_sercom_get_default_pad+0x180>)
     d90:	e000      	b.n	d94 <_sercom_get_default_pad+0x110>
     d92:	481d      	ldr	r0, [pc, #116]	; (e08 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     d94:	4770      	bx	lr
     d96:	46c0      	nop			; (mov r8, r8)
     d98:	42001000 	.word	0x42001000
     d9c:	42000800 	.word	0x42000800
     da0:	42000c00 	.word	0x42000c00
     da4:	42001800 	.word	0x42001800
     da8:	42001c00 	.word	0x42001c00
     dac:	42001400 	.word	0x42001400
     db0:	00050003 	.word	0x00050003
     db4:	00060003 	.word	0x00060003
     db8:	00070003 	.word	0x00070003
     dbc:	00010003 	.word	0x00010003
     dc0:	001e0003 	.word	0x001e0003
     dc4:	001f0003 	.word	0x001f0003
     dc8:	00090003 	.word	0x00090003
     dcc:	000a0003 	.word	0x000a0003
     dd0:	000b0003 	.word	0x000b0003
     dd4:	00110003 	.word	0x00110003
     dd8:	00120003 	.word	0x00120003
     ddc:	00130003 	.word	0x00130003
     de0:	000d0003 	.word	0x000d0003
     de4:	000e0003 	.word	0x000e0003
     de8:	000f0003 	.word	0x000f0003
     dec:	00170003 	.word	0x00170003
     df0:	00180003 	.word	0x00180003
     df4:	00190003 	.word	0x00190003
     df8:	00040003 	.word	0x00040003
     dfc:	00080003 	.word	0x00080003
     e00:	00100003 	.word	0x00100003
     e04:	000c0003 	.word	0x000c0003
     e08:	00160003 	.word	0x00160003

00000e0c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     e0c:	b530      	push	{r4, r5, lr}
     e0e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     e10:	4b0c      	ldr	r3, [pc, #48]	; (e44 <_sercom_get_sercom_inst_index+0x38>)
     e12:	466a      	mov	r2, sp
     e14:	cb32      	ldmia	r3!, {r1, r4, r5}
     e16:	c232      	stmia	r2!, {r1, r4, r5}
     e18:	cb32      	ldmia	r3!, {r1, r4, r5}
     e1a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     e1c:	9b00      	ldr	r3, [sp, #0]
     e1e:	4283      	cmp	r3, r0
     e20:	d006      	beq.n	e30 <_sercom_get_sercom_inst_index+0x24>
     e22:	2301      	movs	r3, #1
     e24:	009a      	lsls	r2, r3, #2
     e26:	4669      	mov	r1, sp
     e28:	5852      	ldr	r2, [r2, r1]
     e2a:	4282      	cmp	r2, r0
     e2c:	d103      	bne.n	e36 <_sercom_get_sercom_inst_index+0x2a>
     e2e:	e000      	b.n	e32 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e30:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     e32:	b2d8      	uxtb	r0, r3
     e34:	e003      	b.n	e3e <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e36:	3301      	adds	r3, #1
     e38:	2b06      	cmp	r3, #6
     e3a:	d1f3      	bne.n	e24 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     e3c:	2000      	movs	r0, #0
}
     e3e:	b007      	add	sp, #28
     e40:	bd30      	pop	{r4, r5, pc}
     e42:	46c0      	nop			; (mov r8, r8)
     e44:	00001bd8 	.word	0x00001bd8

00000e48 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     e48:	b5f0      	push	{r4, r5, r6, r7, lr}
     e4a:	465f      	mov	r7, fp
     e4c:	4656      	mov	r6, sl
     e4e:	464d      	mov	r5, r9
     e50:	4644      	mov	r4, r8
     e52:	b4f0      	push	{r4, r5, r6, r7}
     e54:	b091      	sub	sp, #68	; 0x44
     e56:	0005      	movs	r5, r0
     e58:	000c      	movs	r4, r1
     e5a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     e5c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     e5e:	0008      	movs	r0, r1
     e60:	4bb9      	ldr	r3, [pc, #740]	; (1148 <usart_init+0x300>)
     e62:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     e64:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     e66:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     e68:	07d2      	lsls	r2, r2, #31
     e6a:	d500      	bpl.n	e6e <usart_init+0x26>
     e6c:	e164      	b.n	1138 <usart_init+0x2f0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     e6e:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     e70:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     e72:	0792      	lsls	r2, r2, #30
     e74:	d500      	bpl.n	e78 <usart_init+0x30>
     e76:	e15f      	b.n	1138 <usart_init+0x2f0>
     e78:	49b4      	ldr	r1, [pc, #720]	; (114c <usart_init+0x304>)
     e7a:	6a0a      	ldr	r2, [r1, #32]
     e7c:	1c87      	adds	r7, r0, #2
     e7e:	3b1b      	subs	r3, #27
     e80:	40bb      	lsls	r3, r7
     e82:	4313      	orrs	r3, r2
     e84:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     e86:	a90f      	add	r1, sp, #60	; 0x3c
     e88:	272d      	movs	r7, #45	; 0x2d
     e8a:	5df3      	ldrb	r3, [r6, r7]
     e8c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     e8e:	3014      	adds	r0, #20
     e90:	b2c3      	uxtb	r3, r0
     e92:	9302      	str	r3, [sp, #8]
     e94:	0018      	movs	r0, r3
     e96:	4bae      	ldr	r3, [pc, #696]	; (1150 <usart_init+0x308>)
     e98:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     e9a:	9802      	ldr	r0, [sp, #8]
     e9c:	4bad      	ldr	r3, [pc, #692]	; (1154 <usart_init+0x30c>)
     e9e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     ea0:	5df0      	ldrb	r0, [r6, r7]
     ea2:	2100      	movs	r1, #0
     ea4:	4bac      	ldr	r3, [pc, #688]	; (1158 <usart_init+0x310>)
     ea6:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     ea8:	7af3      	ldrb	r3, [r6, #11]
     eaa:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     eac:	2324      	movs	r3, #36	; 0x24
     eae:	5cf3      	ldrb	r3, [r6, r3]
     eb0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     eb2:	2325      	movs	r3, #37	; 0x25
     eb4:	5cf3      	ldrb	r3, [r6, r3]
     eb6:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     eb8:	7ef3      	ldrb	r3, [r6, #27]
     eba:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     ebc:	7f33      	ldrb	r3, [r6, #28]
     ebe:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     ec0:	682b      	ldr	r3, [r5, #0]
     ec2:	4699      	mov	r9, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ec4:	0018      	movs	r0, r3
     ec6:	4ba0      	ldr	r3, [pc, #640]	; (1148 <usart_init+0x300>)
     ec8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     eca:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     ecc:	2200      	movs	r2, #0
     ece:	230e      	movs	r3, #14
     ed0:	a906      	add	r1, sp, #24
     ed2:	468c      	mov	ip, r1
     ed4:	4463      	add	r3, ip
     ed6:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     ed8:	8a32      	ldrh	r2, [r6, #16]
     eda:	9202      	str	r2, [sp, #8]
     edc:	2380      	movs	r3, #128	; 0x80
     ede:	01db      	lsls	r3, r3, #7
     ee0:	429a      	cmp	r2, r3
     ee2:	d01a      	beq.n	f1a <usart_init+0xd2>
     ee4:	d804      	bhi.n	ef0 <usart_init+0xa8>
     ee6:	2380      	movs	r3, #128	; 0x80
     ee8:	019b      	lsls	r3, r3, #6
     eea:	429a      	cmp	r2, r3
     eec:	d00b      	beq.n	f06 <usart_init+0xbe>
     eee:	e104      	b.n	10fa <usart_init+0x2b2>
     ef0:	23c0      	movs	r3, #192	; 0xc0
     ef2:	01db      	lsls	r3, r3, #7
     ef4:	9a02      	ldr	r2, [sp, #8]
     ef6:	429a      	cmp	r2, r3
     ef8:	d00a      	beq.n	f10 <usart_init+0xc8>
     efa:	2380      	movs	r3, #128	; 0x80
     efc:	021b      	lsls	r3, r3, #8
     efe:	429a      	cmp	r2, r3
     f00:	d100      	bne.n	f04 <usart_init+0xbc>
     f02:	e0ff      	b.n	1104 <usart_init+0x2bc>
     f04:	e0f9      	b.n	10fa <usart_init+0x2b2>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     f06:	2310      	movs	r3, #16
     f08:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     f0a:	3b0f      	subs	r3, #15
     f0c:	9307      	str	r3, [sp, #28]
     f0e:	e0fd      	b.n	110c <usart_init+0x2c4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     f10:	2308      	movs	r3, #8
     f12:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     f14:	3b07      	subs	r3, #7
     f16:	9307      	str	r3, [sp, #28]
     f18:	e0f8      	b.n	110c <usart_init+0x2c4>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     f1a:	6833      	ldr	r3, [r6, #0]
     f1c:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
     f1e:	68f3      	ldr	r3, [r6, #12]
     f20:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     f22:	6973      	ldr	r3, [r6, #20]
     f24:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     f26:	7e33      	ldrb	r3, [r6, #24]
     f28:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     f2a:	2326      	movs	r3, #38	; 0x26
     f2c:	5cf3      	ldrb	r3, [r6, r3]
     f2e:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     f30:	6873      	ldr	r3, [r6, #4]
     f32:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     f34:	2b00      	cmp	r3, #0
     f36:	d015      	beq.n	f64 <usart_init+0x11c>
     f38:	2380      	movs	r3, #128	; 0x80
     f3a:	055b      	lsls	r3, r3, #21
     f3c:	459a      	cmp	sl, r3
     f3e:	d136      	bne.n	fae <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     f40:	2327      	movs	r3, #39	; 0x27
     f42:	5cf3      	ldrb	r3, [r6, r3]
     f44:	2b00      	cmp	r3, #0
     f46:	d136      	bne.n	fb6 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     f48:	6a33      	ldr	r3, [r6, #32]
     f4a:	001f      	movs	r7, r3
     f4c:	b2c0      	uxtb	r0, r0
     f4e:	4b83      	ldr	r3, [pc, #524]	; (115c <usart_init+0x314>)
     f50:	4798      	blx	r3
     f52:	0001      	movs	r1, r0
     f54:	220e      	movs	r2, #14
     f56:	ab06      	add	r3, sp, #24
     f58:	469c      	mov	ip, r3
     f5a:	4462      	add	r2, ip
     f5c:	0038      	movs	r0, r7
     f5e:	4b80      	ldr	r3, [pc, #512]	; (1160 <usart_init+0x318>)
     f60:	4798      	blx	r3
     f62:	e025      	b.n	fb0 <usart_init+0x168>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     f64:	2308      	movs	r3, #8
     f66:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f68:	2300      	movs	r3, #0
     f6a:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     f6c:	2327      	movs	r3, #39	; 0x27
     f6e:	5cf3      	ldrb	r3, [r6, r3]
     f70:	2b00      	cmp	r3, #0
     f72:	d00b      	beq.n	f8c <usart_init+0x144>
				status_code =
     f74:	9b06      	ldr	r3, [sp, #24]
     f76:	9300      	str	r3, [sp, #0]
     f78:	9b07      	ldr	r3, [sp, #28]
     f7a:	220e      	movs	r2, #14
     f7c:	a906      	add	r1, sp, #24
     f7e:	468c      	mov	ip, r1
     f80:	4462      	add	r2, ip
     f82:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     f84:	6a30      	ldr	r0, [r6, #32]
     f86:	4f77      	ldr	r7, [pc, #476]	; (1164 <usart_init+0x31c>)
     f88:	47b8      	blx	r7
     f8a:	e011      	b.n	fb0 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     f8c:	6a33      	ldr	r3, [r6, #32]
     f8e:	001f      	movs	r7, r3
     f90:	b2c0      	uxtb	r0, r0
     f92:	4b72      	ldr	r3, [pc, #456]	; (115c <usart_init+0x314>)
     f94:	4798      	blx	r3
     f96:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     f98:	9b06      	ldr	r3, [sp, #24]
     f9a:	9300      	str	r3, [sp, #0]
     f9c:	9b07      	ldr	r3, [sp, #28]
     f9e:	220e      	movs	r2, #14
     fa0:	a806      	add	r0, sp, #24
     fa2:	4684      	mov	ip, r0
     fa4:	4462      	add	r2, ip
     fa6:	0038      	movs	r0, r7
     fa8:	4f6e      	ldr	r7, [pc, #440]	; (1164 <usart_init+0x31c>)
     faa:	47b8      	blx	r7
     fac:	e000      	b.n	fb0 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     fae:	2000      	movs	r0, #0
     fb0:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     fb2:	d000      	beq.n	fb6 <usart_init+0x16e>
     fb4:	e0c0      	b.n	1138 <usart_init+0x2f0>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     fb6:	7e73      	ldrb	r3, [r6, #25]
     fb8:	2b00      	cmp	r3, #0
     fba:	d002      	beq.n	fc2 <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     fbc:	7eb3      	ldrb	r3, [r6, #26]
     fbe:	464a      	mov	r2, r9
     fc0:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     fc2:	682a      	ldr	r2, [r5, #0]
     fc4:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     fc6:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     fc8:	2b00      	cmp	r3, #0
     fca:	d1fc      	bne.n	fc6 <usart_init+0x17e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     fcc:	330e      	adds	r3, #14
     fce:	aa06      	add	r2, sp, #24
     fd0:	4694      	mov	ip, r2
     fd2:	4463      	add	r3, ip
     fd4:	881b      	ldrh	r3, [r3, #0]
     fd6:	464a      	mov	r2, r9
     fd8:	8193      	strh	r3, [r2, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
     fda:	9b04      	ldr	r3, [sp, #16]
     fdc:	465a      	mov	r2, fp
     fde:	4313      	orrs	r3, r2
     fe0:	9a03      	ldr	r2, [sp, #12]
     fe2:	4313      	orrs	r3, r2
     fe4:	4652      	mov	r2, sl
     fe6:	4313      	orrs	r3, r2
     fe8:	433b      	orrs	r3, r7
     fea:	4642      	mov	r2, r8
     fec:	0212      	lsls	r2, r2, #8
     fee:	4313      	orrs	r3, r2
     ff0:	9a05      	ldr	r2, [sp, #20]
     ff2:	0757      	lsls	r7, r2, #29
     ff4:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     ff6:	2327      	movs	r3, #39	; 0x27
     ff8:	5cf3      	ldrb	r3, [r6, r3]
     ffa:	2b00      	cmp	r3, #0
     ffc:	d101      	bne.n	1002 <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     ffe:	3304      	adds	r3, #4
    1000:	431f      	orrs	r7, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    1002:	7e71      	ldrb	r1, [r6, #25]
    1004:	0289      	lsls	r1, r1, #10
    1006:	7f33      	ldrb	r3, [r6, #28]
    1008:	025b      	lsls	r3, r3, #9
    100a:	4319      	orrs	r1, r3
    100c:	7f73      	ldrb	r3, [r6, #29]
    100e:	021b      	lsls	r3, r3, #8
    1010:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1012:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    1014:	5cf3      	ldrb	r3, [r6, r3]
    1016:	045b      	lsls	r3, r3, #17
    1018:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    101a:	2325      	movs	r3, #37	; 0x25
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    101c:	5cf2      	ldrb	r2, [r6, r3]
    101e:	0412      	lsls	r2, r2, #16
    1020:	4311      	orrs	r1, r2
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    1022:	7af3      	ldrb	r3, [r6, #11]
    1024:	4319      	orrs	r1, r3
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    1026:	8933      	ldrh	r3, [r6, #8]
    1028:	2bff      	cmp	r3, #255	; 0xff
    102a:	d004      	beq.n	1036 <usart_init+0x1ee>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    102c:	2280      	movs	r2, #128	; 0x80
    102e:	0452      	lsls	r2, r2, #17
    1030:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1032:	4319      	orrs	r1, r3
    1034:	e005      	b.n	1042 <usart_init+0x1fa>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    1036:	7ef3      	ldrb	r3, [r6, #27]
    1038:	2b00      	cmp	r3, #0
    103a:	d002      	beq.n	1042 <usart_init+0x1fa>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    103c:	2380      	movs	r3, #128	; 0x80
    103e:	04db      	lsls	r3, r3, #19
    1040:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1042:	232c      	movs	r3, #44	; 0x2c
    1044:	5cf3      	ldrb	r3, [r6, r3]
    1046:	2b00      	cmp	r3, #0
    1048:	d103      	bne.n	1052 <usart_init+0x20a>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    104a:	4b47      	ldr	r3, [pc, #284]	; (1168 <usart_init+0x320>)
    104c:	789b      	ldrb	r3, [r3, #2]
    104e:	079b      	lsls	r3, r3, #30
    1050:	d501      	bpl.n	1056 <usart_init+0x20e>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1052:	2380      	movs	r3, #128	; 0x80
    1054:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1056:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1058:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    105a:	2b00      	cmp	r3, #0
    105c:	d1fc      	bne.n	1058 <usart_init+0x210>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    105e:	464b      	mov	r3, r9
    1060:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1062:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1064:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1066:	2b00      	cmp	r3, #0
    1068:	d1fc      	bne.n	1064 <usart_init+0x21c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    106a:	464b      	mov	r3, r9
    106c:	601f      	str	r7, [r3, #0]
    106e:	ab0e      	add	r3, sp, #56	; 0x38
    1070:	2280      	movs	r2, #128	; 0x80
    1072:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1074:	2200      	movs	r2, #0
    1076:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1078:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    107a:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    107c:	6b33      	ldr	r3, [r6, #48]	; 0x30
    107e:	930a      	str	r3, [sp, #40]	; 0x28
    1080:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1082:	930b      	str	r3, [sp, #44]	; 0x2c
    1084:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1086:	930c      	str	r3, [sp, #48]	; 0x30
    1088:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    108a:	9302      	str	r3, [sp, #8]
    108c:	930d      	str	r3, [sp, #52]	; 0x34
    108e:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1090:	ae0e      	add	r6, sp, #56	; 0x38
    1092:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1094:	00bb      	lsls	r3, r7, #2
    1096:	aa0a      	add	r2, sp, #40	; 0x28
    1098:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    109a:	2800      	cmp	r0, #0
    109c:	d102      	bne.n	10a4 <usart_init+0x25c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    109e:	0020      	movs	r0, r4
    10a0:	4b32      	ldr	r3, [pc, #200]	; (116c <usart_init+0x324>)
    10a2:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    10a4:	1c43      	adds	r3, r0, #1
    10a6:	d005      	beq.n	10b4 <usart_init+0x26c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    10a8:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    10aa:	0c00      	lsrs	r0, r0, #16
    10ac:	b2c0      	uxtb	r0, r0
    10ae:	0031      	movs	r1, r6
    10b0:	4b2f      	ldr	r3, [pc, #188]	; (1170 <usart_init+0x328>)
    10b2:	4798      	blx	r3
    10b4:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    10b6:	2f04      	cmp	r7, #4
    10b8:	d1eb      	bne.n	1092 <usart_init+0x24a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    10ba:	2300      	movs	r3, #0
    10bc:	60eb      	str	r3, [r5, #12]
    10be:	612b      	str	r3, [r5, #16]
    10c0:	616b      	str	r3, [r5, #20]
    10c2:	61ab      	str	r3, [r5, #24]
    10c4:	61eb      	str	r3, [r5, #28]
    10c6:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    10c8:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    10ca:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    10cc:	2200      	movs	r2, #0
    10ce:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    10d0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    10d2:	3330      	adds	r3, #48	; 0x30
    10d4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    10d6:	3301      	adds	r3, #1
    10d8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    10da:	3301      	adds	r3, #1
    10dc:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    10de:	3301      	adds	r3, #1
    10e0:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    10e2:	6828      	ldr	r0, [r5, #0]
    10e4:	4b18      	ldr	r3, [pc, #96]	; (1148 <usart_init+0x300>)
    10e6:	4798      	blx	r3
    10e8:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    10ea:	4922      	ldr	r1, [pc, #136]	; (1174 <usart_init+0x32c>)
    10ec:	4b22      	ldr	r3, [pc, #136]	; (1178 <usart_init+0x330>)
    10ee:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    10f0:	00a4      	lsls	r4, r4, #2
    10f2:	4b22      	ldr	r3, [pc, #136]	; (117c <usart_init+0x334>)
    10f4:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    10f6:	2300      	movs	r3, #0
    10f8:	e01e      	b.n	1138 <usart_init+0x2f0>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    10fa:	2310      	movs	r3, #16
    10fc:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    10fe:	2300      	movs	r3, #0
    1100:	9307      	str	r3, [sp, #28]
    1102:	e003      	b.n	110c <usart_init+0x2c4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1104:	2303      	movs	r3, #3
    1106:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1108:	2300      	movs	r3, #0
    110a:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    110c:	6833      	ldr	r3, [r6, #0]
    110e:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    1110:	68f3      	ldr	r3, [r6, #12]
    1112:	469b      	mov	fp, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    1114:	6973      	ldr	r3, [r6, #20]
    1116:	9303      	str	r3, [sp, #12]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1118:	7e33      	ldrb	r3, [r6, #24]
    111a:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    111c:	2326      	movs	r3, #38	; 0x26
    111e:	5cf3      	ldrb	r3, [r6, r3]
    1120:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    1122:	6873      	ldr	r3, [r6, #4]
    1124:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    1126:	2b00      	cmp	r3, #0
    1128:	d100      	bne.n	112c <usart_init+0x2e4>
    112a:	e71f      	b.n	f6c <usart_init+0x124>
    112c:	2380      	movs	r3, #128	; 0x80
    112e:	055b      	lsls	r3, r3, #21
    1130:	459a      	cmp	sl, r3
    1132:	d100      	bne.n	1136 <usart_init+0x2ee>
    1134:	e704      	b.n	f40 <usart_init+0xf8>
    1136:	e73e      	b.n	fb6 <usart_init+0x16e>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1138:	0018      	movs	r0, r3
    113a:	b011      	add	sp, #68	; 0x44
    113c:	bc3c      	pop	{r2, r3, r4, r5}
    113e:	4690      	mov	r8, r2
    1140:	4699      	mov	r9, r3
    1142:	46a2      	mov	sl, r4
    1144:	46ab      	mov	fp, r5
    1146:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1148:	00000e0d 	.word	0x00000e0d
    114c:	40000400 	.word	0x40000400
    1150:	000016cd 	.word	0x000016cd
    1154:	00001641 	.word	0x00001641
    1158:	00000c39 	.word	0x00000c39
    115c:	000016e9 	.word	0x000016e9
    1160:	00000a49 	.word	0x00000a49
    1164:	00000a71 	.word	0x00000a71
    1168:	41002000 	.word	0x41002000
    116c:	00000c85 	.word	0x00000c85
    1170:	000017c5 	.word	0x000017c5
    1174:	000001e1 	.word	0x000001e1
    1178:	00000119 	.word	0x00000119
    117c:	20000060 	.word	0x20000060

00001180 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1180:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1182:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1184:	2a00      	cmp	r2, #0
    1186:	d00e      	beq.n	11a6 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1188:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    118a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    118c:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    118e:	2a00      	cmp	r2, #0
    1190:	d109      	bne.n	11a6 <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1192:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1194:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1196:	2a00      	cmp	r2, #0
    1198:	d1fc      	bne.n	1194 <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    119a:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    119c:	2102      	movs	r1, #2
    119e:	7e1a      	ldrb	r2, [r3, #24]
    11a0:	420a      	tst	r2, r1
    11a2:	d0fc      	beq.n	119e <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    11a4:	2300      	movs	r3, #0
}
    11a6:	0018      	movs	r0, r3
    11a8:	4770      	bx	lr
    11aa:	46c0      	nop			; (mov r8, r8)

000011ac <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    11ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    11ae:	464f      	mov	r7, r9
    11b0:	b480      	push	{r7}
    11b2:	b082      	sub	sp, #8
    11b4:	0004      	movs	r4, r0
    11b6:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    11b8:	2017      	movs	r0, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    11ba:	2a00      	cmp	r2, #0
    11bc:	d049      	beq.n	1252 <usart_write_buffer_wait+0xa6>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    11be:	79e3      	ldrb	r3, [r4, #7]
		return STATUS_ERR_DENIED;
    11c0:	3005      	adds	r0, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    11c2:	2b00      	cmp	r3, #0
    11c4:	d045      	beq.n	1252 <usart_write_buffer_wait+0xa6>
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    11c6:	6827      	ldr	r7, [r4, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    11c8:	69fb      	ldr	r3, [r7, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    11ca:	2b00      	cmp	r3, #0
    11cc:	d1fc      	bne.n	11c8 <usart_write_buffer_wait+0x1c>
    11ce:	4691      	mov	r9, r2
    11d0:	2500      	movs	r5, #0
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    11d2:	2601      	movs	r6, #1
    11d4:	e020      	b.n	1218 <usart_write_buffer_wait+0x6c>
    11d6:	7e3a      	ldrb	r2, [r7, #24]
    11d8:	4232      	tst	r2, r6
    11da:	d104      	bne.n	11e6 <usart_write_buffer_wait+0x3a>
				break;
			} else if (i == USART_TIMEOUT) {
    11dc:	2b01      	cmp	r3, #1
    11de:	d02a      	beq.n	1236 <usart_write_buffer_wait+0x8a>
    11e0:	3b01      	subs	r3, #1

	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    11e2:	2b00      	cmp	r3, #0
    11e4:	d1f7      	bne.n	11d6 <usart_write_buffer_wait+0x2a>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    11e6:	1c6a      	adds	r2, r5, #1
    11e8:	b292      	uxth	r2, r2
    11ea:	9b01      	ldr	r3, [sp, #4]
    11ec:	5d5b      	ldrb	r3, [r3, r5]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    11ee:	7961      	ldrb	r1, [r4, #5]
    11f0:	2901      	cmp	r1, #1
    11f2:	d002      	beq.n	11fa <usart_write_buffer_wait+0x4e>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    11f4:	b299      	uxth	r1, r3
    11f6:	0015      	movs	r5, r2
    11f8:	e005      	b.n	1206 <usart_write_buffer_wait+0x5a>

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
    11fa:	1ca9      	adds	r1, r5, #2
    11fc:	b28d      	uxth	r5, r1
    11fe:	9901      	ldr	r1, [sp, #4]
    1200:	5c89      	ldrb	r1, [r1, r2]
    1202:	0209      	lsls	r1, r1, #8
    1204:	4319      	orrs	r1, r3
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    1206:	0020      	movs	r0, r4
    1208:	4b14      	ldr	r3, [pc, #80]	; (125c <usart_write_buffer_wait+0xb0>)
    120a:	4798      	blx	r3
    120c:	464a      	mov	r2, r9
    120e:	3a01      	subs	r2, #1
    1210:	b293      	uxth	r3, r2
    1212:	4699      	mov	r9, r3
	_usart_wait_for_sync(module);

	uint16_t tx_pos = 0;

	/* Blocks while buffer is being transferred */
	while (length--) {
    1214:	2b00      	cmp	r3, #0
    1216:	d016      	beq.n	1246 <usart_write_buffer_wait+0x9a>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    1218:	7e3b      	ldrb	r3, [r7, #24]
    121a:	4233      	tst	r3, r6
    121c:	d1e3      	bne.n	11e6 <usart_write_buffer_wait+0x3a>
    121e:	4b10      	ldr	r3, [pc, #64]	; (1260 <usart_write_buffer_wait+0xb4>)
    1220:	e7d9      	b.n	11d6 <usart_write_buffer_wait+0x2a>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    1222:	7e3a      	ldrb	r2, [r7, #24]
    1224:	420a      	tst	r2, r1
    1226:	d108      	bne.n	123a <usart_write_buffer_wait+0x8e>
			break;
		} else if (i == USART_TIMEOUT) {
    1228:	2b01      	cmp	r3, #1
    122a:	d008      	beq.n	123e <usart_write_buffer_wait+0x92>
    122c:	3b01      	subs	r3, #1
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    122e:	2b00      	cmp	r3, #0
    1230:	d1f7      	bne.n	1222 <usart_write_buffer_wait+0x76>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
    1232:	2000      	movs	r0, #0
    1234:	e00d      	b.n	1252 <usart_write_buffer_wait+0xa6>
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
    1236:	2012      	movs	r0, #18
    1238:	e00b      	b.n	1252 <usart_write_buffer_wait+0xa6>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
    123a:	2000      	movs	r0, #0
    123c:	e009      	b.n	1252 <usart_write_buffer_wait+0xa6>
	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
			break;
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
    123e:	2012      	movs	r0, #18
    1240:	e007      	b.n	1252 <usart_write_buffer_wait+0xa6>
		}
	}

	return STATUS_OK;
    1242:	2000      	movs	r0, #0
    1244:	e005      	b.n	1252 <usart_write_buffer_wait+0xa6>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    1246:	7e3b      	ldrb	r3, [r7, #24]
    1248:	079b      	lsls	r3, r3, #30
    124a:	d4fa      	bmi.n	1242 <usart_write_buffer_wait+0x96>
    124c:	4b04      	ldr	r3, [pc, #16]	; (1260 <usart_write_buffer_wait+0xb4>)
    124e:	2102      	movs	r1, #2
    1250:	e7e7      	b.n	1222 <usart_write_buffer_wait+0x76>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    1252:	b002      	add	sp, #8
    1254:	bc04      	pop	{r2}
    1256:	4691      	mov	r9, r2
    1258:	bdf0      	pop	{r4, r5, r6, r7, pc}
    125a:	46c0      	nop			; (mov r8, r8)
    125c:	00001181 	.word	0x00001181
    1260:	0000ffff 	.word	0x0000ffff

00001264 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1264:	b510      	push	{r4, lr}
	switch (clock_source) {
    1266:	2808      	cmp	r0, #8
    1268:	d803      	bhi.n	1272 <system_clock_source_get_hz+0xe>
    126a:	0080      	lsls	r0, r0, #2
    126c:	4b1b      	ldr	r3, [pc, #108]	; (12dc <system_clock_source_get_hz+0x78>)
    126e:	581b      	ldr	r3, [r3, r0]
    1270:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1272:	2000      	movs	r0, #0
    1274:	e030      	b.n	12d8 <system_clock_source_get_hz+0x74>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1276:	4b1a      	ldr	r3, [pc, #104]	; (12e0 <system_clock_source_get_hz+0x7c>)
    1278:	6918      	ldr	r0, [r3, #16]
    127a:	e02d      	b.n	12d8 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    127c:	4b19      	ldr	r3, [pc, #100]	; (12e4 <system_clock_source_get_hz+0x80>)
    127e:	6a1b      	ldr	r3, [r3, #32]
    1280:	059b      	lsls	r3, r3, #22
    1282:	0f9b      	lsrs	r3, r3, #30
    1284:	4818      	ldr	r0, [pc, #96]	; (12e8 <system_clock_source_get_hz+0x84>)
    1286:	40d8      	lsrs	r0, r3
    1288:	e026      	b.n	12d8 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    128a:	4b15      	ldr	r3, [pc, #84]	; (12e0 <system_clock_source_get_hz+0x7c>)
    128c:	6958      	ldr	r0, [r3, #20]
    128e:	e023      	b.n	12d8 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1290:	4b13      	ldr	r3, [pc, #76]	; (12e0 <system_clock_source_get_hz+0x7c>)
    1292:	681b      	ldr	r3, [r3, #0]
    1294:	2002      	movs	r0, #2
    1296:	4018      	ands	r0, r3
    1298:	d01e      	beq.n	12d8 <system_clock_source_get_hz+0x74>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    129a:	4912      	ldr	r1, [pc, #72]	; (12e4 <system_clock_source_get_hz+0x80>)
    129c:	2210      	movs	r2, #16
    129e:	68cb      	ldr	r3, [r1, #12]
    12a0:	421a      	tst	r2, r3
    12a2:	d0fc      	beq.n	129e <system_clock_source_get_hz+0x3a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    12a4:	4b0e      	ldr	r3, [pc, #56]	; (12e0 <system_clock_source_get_hz+0x7c>)
    12a6:	681b      	ldr	r3, [r3, #0]
    12a8:	075b      	lsls	r3, r3, #29
    12aa:	d514      	bpl.n	12d6 <system_clock_source_get_hz+0x72>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    12ac:	2000      	movs	r0, #0
    12ae:	4b0f      	ldr	r3, [pc, #60]	; (12ec <system_clock_source_get_hz+0x88>)
    12b0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    12b2:	4b0b      	ldr	r3, [pc, #44]	; (12e0 <system_clock_source_get_hz+0x7c>)
    12b4:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    12b6:	041b      	lsls	r3, r3, #16
    12b8:	0c1b      	lsrs	r3, r3, #16
    12ba:	4358      	muls	r0, r3
    12bc:	e00c      	b.n	12d8 <system_clock_source_get_hz+0x74>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    12be:	2350      	movs	r3, #80	; 0x50
    12c0:	4a08      	ldr	r2, [pc, #32]	; (12e4 <system_clock_source_get_hz+0x80>)
    12c2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    12c4:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    12c6:	075b      	lsls	r3, r3, #29
    12c8:	d506      	bpl.n	12d8 <system_clock_source_get_hz+0x74>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    12ca:	4b05      	ldr	r3, [pc, #20]	; (12e0 <system_clock_source_get_hz+0x7c>)
    12cc:	68d8      	ldr	r0, [r3, #12]
    12ce:	e003      	b.n	12d8 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    12d0:	2080      	movs	r0, #128	; 0x80
    12d2:	0200      	lsls	r0, r0, #8
    12d4:	e000      	b.n	12d8 <system_clock_source_get_hz+0x74>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    12d6:	4806      	ldr	r0, [pc, #24]	; (12f0 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    12d8:	bd10      	pop	{r4, pc}
    12da:	46c0      	nop			; (mov r8, r8)
    12dc:	00001bf0 	.word	0x00001bf0
    12e0:	20000048 	.word	0x20000048
    12e4:	40000800 	.word	0x40000800
    12e8:	007a1200 	.word	0x007a1200
    12ec:	000016e9 	.word	0x000016e9
    12f0:	02dc6c00 	.word	0x02dc6c00

000012f4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    12f4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    12f6:	4c0c      	ldr	r4, [pc, #48]	; (1328 <system_clock_source_osc8m_set_config+0x34>)
    12f8:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    12fa:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    12fc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    12fe:	7842      	ldrb	r2, [r0, #1]
    1300:	2001      	movs	r0, #1
    1302:	4002      	ands	r2, r0
    1304:	0192      	lsls	r2, r2, #6
    1306:	2640      	movs	r6, #64	; 0x40
    1308:	43b3      	bics	r3, r6
    130a:	4313      	orrs	r3, r2
    130c:	0002      	movs	r2, r0
    130e:	402a      	ands	r2, r5
    1310:	01d2      	lsls	r2, r2, #7
    1312:	307f      	adds	r0, #127	; 0x7f
    1314:	4383      	bics	r3, r0
    1316:	4313      	orrs	r3, r2
    1318:	2203      	movs	r2, #3
    131a:	400a      	ands	r2, r1
    131c:	0212      	lsls	r2, r2, #8
    131e:	4903      	ldr	r1, [pc, #12]	; (132c <system_clock_source_osc8m_set_config+0x38>)
    1320:	400b      	ands	r3, r1
    1322:	4313      	orrs	r3, r2
    1324:	6223      	str	r3, [r4, #32]
}
    1326:	bd70      	pop	{r4, r5, r6, pc}
    1328:	40000800 	.word	0x40000800
    132c:	fffffcff 	.word	0xfffffcff

00001330 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1330:	2808      	cmp	r0, #8
    1332:	d803      	bhi.n	133c <system_clock_source_enable+0xc>
    1334:	0080      	lsls	r0, r0, #2
    1336:	4b25      	ldr	r3, [pc, #148]	; (13cc <system_clock_source_enable+0x9c>)
    1338:	581b      	ldr	r3, [r3, r0]
    133a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    133c:	2017      	movs	r0, #23
    133e:	e044      	b.n	13ca <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1340:	4a23      	ldr	r2, [pc, #140]	; (13d0 <system_clock_source_enable+0xa0>)
    1342:	6a11      	ldr	r1, [r2, #32]
    1344:	2302      	movs	r3, #2
    1346:	430b      	orrs	r3, r1
    1348:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    134a:	2000      	movs	r0, #0
    134c:	e03d      	b.n	13ca <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    134e:	4a20      	ldr	r2, [pc, #128]	; (13d0 <system_clock_source_enable+0xa0>)
    1350:	6991      	ldr	r1, [r2, #24]
    1352:	2302      	movs	r3, #2
    1354:	430b      	orrs	r3, r1
    1356:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1358:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    135a:	e036      	b.n	13ca <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    135c:	4a1c      	ldr	r2, [pc, #112]	; (13d0 <system_clock_source_enable+0xa0>)
    135e:	8a11      	ldrh	r1, [r2, #16]
    1360:	2302      	movs	r3, #2
    1362:	430b      	orrs	r3, r1
    1364:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1366:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1368:	e02f      	b.n	13ca <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    136a:	4a19      	ldr	r2, [pc, #100]	; (13d0 <system_clock_source_enable+0xa0>)
    136c:	8a91      	ldrh	r1, [r2, #20]
    136e:	2302      	movs	r3, #2
    1370:	430b      	orrs	r3, r1
    1372:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1374:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    1376:	e028      	b.n	13ca <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1378:	4916      	ldr	r1, [pc, #88]	; (13d4 <system_clock_source_enable+0xa4>)
    137a:	680b      	ldr	r3, [r1, #0]
    137c:	2202      	movs	r2, #2
    137e:	4313      	orrs	r3, r2
    1380:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1382:	4b13      	ldr	r3, [pc, #76]	; (13d0 <system_clock_source_enable+0xa0>)
    1384:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1386:	0019      	movs	r1, r3
    1388:	320e      	adds	r2, #14
    138a:	68cb      	ldr	r3, [r1, #12]
    138c:	421a      	tst	r2, r3
    138e:	d0fc      	beq.n	138a <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1390:	4a10      	ldr	r2, [pc, #64]	; (13d4 <system_clock_source_enable+0xa4>)
    1392:	6891      	ldr	r1, [r2, #8]
    1394:	4b0e      	ldr	r3, [pc, #56]	; (13d0 <system_clock_source_enable+0xa0>)
    1396:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1398:	6852      	ldr	r2, [r2, #4]
    139a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    139c:	2200      	movs	r2, #0
    139e:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    13a0:	0019      	movs	r1, r3
    13a2:	3210      	adds	r2, #16
    13a4:	68cb      	ldr	r3, [r1, #12]
    13a6:	421a      	tst	r2, r3
    13a8:	d0fc      	beq.n	13a4 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    13aa:	4b0a      	ldr	r3, [pc, #40]	; (13d4 <system_clock_source_enable+0xa4>)
    13ac:	681b      	ldr	r3, [r3, #0]
    13ae:	b29b      	uxth	r3, r3
    13b0:	4a07      	ldr	r2, [pc, #28]	; (13d0 <system_clock_source_enable+0xa0>)
    13b2:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    13b4:	2000      	movs	r0, #0
    13b6:	e008      	b.n	13ca <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    13b8:	4905      	ldr	r1, [pc, #20]	; (13d0 <system_clock_source_enable+0xa0>)
    13ba:	2244      	movs	r2, #68	; 0x44
    13bc:	5c88      	ldrb	r0, [r1, r2]
    13be:	2302      	movs	r3, #2
    13c0:	4303      	orrs	r3, r0
    13c2:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    13c4:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    13c6:	e000      	b.n	13ca <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    13c8:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    13ca:	4770      	bx	lr
    13cc:	00001c14 	.word	0x00001c14
    13d0:	40000800 	.word	0x40000800
    13d4:	20000048 	.word	0x20000048

000013d8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    13d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13da:	4647      	mov	r7, r8
    13dc:	b480      	push	{r7}
    13de:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    13e0:	22c2      	movs	r2, #194	; 0xc2
    13e2:	00d2      	lsls	r2, r2, #3
    13e4:	4b22      	ldr	r3, [pc, #136]	; (1470 <system_clock_init+0x98>)
    13e6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    13e8:	4a22      	ldr	r2, [pc, #136]	; (1474 <system_clock_init+0x9c>)
    13ea:	6853      	ldr	r3, [r2, #4]
    13ec:	211e      	movs	r1, #30
    13ee:	438b      	bics	r3, r1
    13f0:	6053      	str	r3, [r2, #4]
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    13f2:	2302      	movs	r3, #2
    13f4:	466a      	mov	r2, sp
    13f6:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    13f8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    13fa:	4d1f      	ldr	r5, [pc, #124]	; (1478 <system_clock_init+0xa0>)
    13fc:	b2e0      	uxtb	r0, r4
    13fe:	4669      	mov	r1, sp
    1400:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1402:	3401      	adds	r4, #1
    1404:	2c25      	cmp	r4, #37	; 0x25
    1406:	d1f9      	bne.n	13fc <system_clock_init+0x24>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1408:	a803      	add	r0, sp, #12
    140a:	2400      	movs	r4, #0
    140c:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    140e:	2501      	movs	r5, #1
    1410:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1412:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1414:	4b19      	ldr	r3, [pc, #100]	; (147c <system_clock_init+0xa4>)
    1416:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1418:	2006      	movs	r0, #6
    141a:	4b19      	ldr	r3, [pc, #100]	; (1480 <system_clock_init+0xa8>)
    141c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    141e:	4b19      	ldr	r3, [pc, #100]	; (1484 <system_clock_init+0xac>)
    1420:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1422:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1424:	466b      	mov	r3, sp
    1426:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1428:	2306      	movs	r3, #6
    142a:	4698      	mov	r8, r3
    142c:	466b      	mov	r3, sp
    142e:	4642      	mov	r2, r8
    1430:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    1432:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    1434:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1436:	4669      	mov	r1, sp
    1438:	2001      	movs	r0, #1
    143a:	4f13      	ldr	r7, [pc, #76]	; (1488 <system_clock_init+0xb0>)
    143c:	47b8      	blx	r7
    143e:	2001      	movs	r0, #1
    1440:	4e12      	ldr	r6, [pc, #72]	; (148c <system_clock_init+0xb4>)
    1442:	47b0      	blx	r6
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1444:	4b12      	ldr	r3, [pc, #72]	; (1490 <system_clock_init+0xb8>)
    1446:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1448:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    144a:	729c      	strb	r4, [r3, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    144c:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    144e:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1450:	466b      	mov	r3, sp
    1452:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1454:	4642      	mov	r2, r8
    1456:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    1458:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    145a:	725c      	strb	r4, [r3, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    145c:	4669      	mov	r1, sp
    145e:	2000      	movs	r0, #0
    1460:	47b8      	blx	r7
    1462:	2000      	movs	r0, #0
    1464:	47b0      	blx	r6
#endif
}
    1466:	b004      	add	sp, #16
    1468:	bc04      	pop	{r2}
    146a:	4690      	mov	r8, r2
    146c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    146e:	46c0      	nop			; (mov r8, r8)
    1470:	40000800 	.word	0x40000800
    1474:	41004000 	.word	0x41004000
    1478:	000016cd 	.word	0x000016cd
    147c:	000012f5 	.word	0x000012f5
    1480:	00001331 	.word	0x00001331
    1484:	00001495 	.word	0x00001495
    1488:	000014b9 	.word	0x000014b9
    148c:	00001571 	.word	0x00001571
    1490:	40000400 	.word	0x40000400

00001494 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1494:	4a06      	ldr	r2, [pc, #24]	; (14b0 <system_gclk_init+0x1c>)
    1496:	6991      	ldr	r1, [r2, #24]
    1498:	2308      	movs	r3, #8
    149a:	430b      	orrs	r3, r1
    149c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    149e:	2201      	movs	r2, #1
    14a0:	4b04      	ldr	r3, [pc, #16]	; (14b4 <system_gclk_init+0x20>)
    14a2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    14a4:	0019      	movs	r1, r3
    14a6:	780b      	ldrb	r3, [r1, #0]
    14a8:	4213      	tst	r3, r2
    14aa:	d1fc      	bne.n	14a6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    14ac:	4770      	bx	lr
    14ae:	46c0      	nop			; (mov r8, r8)
    14b0:	40000400 	.word	0x40000400
    14b4:	40000c00 	.word	0x40000c00

000014b8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    14b8:	b570      	push	{r4, r5, r6, lr}
    14ba:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    14bc:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    14be:	780c      	ldrb	r4, [r1, #0]
    14c0:	0224      	lsls	r4, r4, #8
    14c2:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    14c4:	784b      	ldrb	r3, [r1, #1]
    14c6:	2b00      	cmp	r3, #0
    14c8:	d002      	beq.n	14d0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    14ca:	2380      	movs	r3, #128	; 0x80
    14cc:	02db      	lsls	r3, r3, #11
    14ce:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    14d0:	7a4b      	ldrb	r3, [r1, #9]
    14d2:	2b00      	cmp	r3, #0
    14d4:	d002      	beq.n	14dc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    14d6:	2380      	movs	r3, #128	; 0x80
    14d8:	031b      	lsls	r3, r3, #12
    14da:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    14dc:	6848      	ldr	r0, [r1, #4]
    14de:	2801      	cmp	r0, #1
    14e0:	d918      	bls.n	1514 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    14e2:	1e43      	subs	r3, r0, #1
    14e4:	4218      	tst	r0, r3
    14e6:	d110      	bne.n	150a <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    14e8:	2802      	cmp	r0, #2
    14ea:	d906      	bls.n	14fa <system_gclk_gen_set_config+0x42>
    14ec:	2302      	movs	r3, #2
    14ee:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    14f0:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    14f2:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    14f4:	4298      	cmp	r0, r3
    14f6:	d8fb      	bhi.n	14f0 <system_gclk_gen_set_config+0x38>
    14f8:	e000      	b.n	14fc <system_gclk_gen_set_config+0x44>
    14fa:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    14fc:	0212      	lsls	r2, r2, #8
    14fe:	4332      	orrs	r2, r6
    1500:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1502:	2380      	movs	r3, #128	; 0x80
    1504:	035b      	lsls	r3, r3, #13
    1506:	431c      	orrs	r4, r3
    1508:	e004      	b.n	1514 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    150a:	0205      	lsls	r5, r0, #8
    150c:	4335      	orrs	r5, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    150e:	2380      	movs	r3, #128	; 0x80
    1510:	029b      	lsls	r3, r3, #10
    1512:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1514:	7a0b      	ldrb	r3, [r1, #8]
    1516:	2b00      	cmp	r3, #0
    1518:	d002      	beq.n	1520 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    151a:	2380      	movs	r3, #128	; 0x80
    151c:	039b      	lsls	r3, r3, #14
    151e:	431c      	orrs	r4, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1520:	4a0f      	ldr	r2, [pc, #60]	; (1560 <system_gclk_gen_set_config+0xa8>)
    1522:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    1524:	b25b      	sxtb	r3, r3
    1526:	2b00      	cmp	r3, #0
    1528:	dbfb      	blt.n	1522 <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    152a:	4b0e      	ldr	r3, [pc, #56]	; (1564 <system_gclk_gen_set_config+0xac>)
    152c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    152e:	4b0e      	ldr	r3, [pc, #56]	; (1568 <system_gclk_gen_set_config+0xb0>)
    1530:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1532:	4a0b      	ldr	r2, [pc, #44]	; (1560 <system_gclk_gen_set_config+0xa8>)
    1534:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1536:	b25b      	sxtb	r3, r3
    1538:	2b00      	cmp	r3, #0
    153a:	dbfb      	blt.n	1534 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    153c:	4b08      	ldr	r3, [pc, #32]	; (1560 <system_gclk_gen_set_config+0xa8>)
    153e:	609d      	str	r5, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1540:	001a      	movs	r2, r3
    1542:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    1544:	b25b      	sxtb	r3, r3
    1546:	2b00      	cmp	r3, #0
    1548:	dbfb      	blt.n	1542 <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    154a:	4a05      	ldr	r2, [pc, #20]	; (1560 <system_gclk_gen_set_config+0xa8>)
    154c:	6851      	ldr	r1, [r2, #4]
    154e:	2380      	movs	r3, #128	; 0x80
    1550:	025b      	lsls	r3, r3, #9
    1552:	400b      	ands	r3, r1
    1554:	431c      	orrs	r4, r3
    1556:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1558:	4b04      	ldr	r3, [pc, #16]	; (156c <system_gclk_gen_set_config+0xb4>)
    155a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    155c:	bd70      	pop	{r4, r5, r6, pc}
    155e:	46c0      	nop			; (mov r8, r8)
    1560:	40000c00 	.word	0x40000c00
    1564:	0000097d 	.word	0x0000097d
    1568:	40000c08 	.word	0x40000c08
    156c:	000009bd 	.word	0x000009bd

00001570 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1570:	b510      	push	{r4, lr}
    1572:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1574:	4a0b      	ldr	r2, [pc, #44]	; (15a4 <system_gclk_gen_enable+0x34>)
    1576:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1578:	b25b      	sxtb	r3, r3
    157a:	2b00      	cmp	r3, #0
    157c:	dbfb      	blt.n	1576 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    157e:	4b0a      	ldr	r3, [pc, #40]	; (15a8 <system_gclk_gen_enable+0x38>)
    1580:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1582:	4b0a      	ldr	r3, [pc, #40]	; (15ac <system_gclk_gen_enable+0x3c>)
    1584:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1586:	4a07      	ldr	r2, [pc, #28]	; (15a4 <system_gclk_gen_enable+0x34>)
    1588:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    158a:	b25b      	sxtb	r3, r3
    158c:	2b00      	cmp	r3, #0
    158e:	dbfb      	blt.n	1588 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1590:	4a04      	ldr	r2, [pc, #16]	; (15a4 <system_gclk_gen_enable+0x34>)
    1592:	6853      	ldr	r3, [r2, #4]
    1594:	2180      	movs	r1, #128	; 0x80
    1596:	0249      	lsls	r1, r1, #9
    1598:	430b      	orrs	r3, r1
    159a:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    159c:	4b04      	ldr	r3, [pc, #16]	; (15b0 <system_gclk_gen_enable+0x40>)
    159e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    15a0:	bd10      	pop	{r4, pc}
    15a2:	46c0      	nop			; (mov r8, r8)
    15a4:	40000c00 	.word	0x40000c00
    15a8:	0000097d 	.word	0x0000097d
    15ac:	40000c04 	.word	0x40000c04
    15b0:	000009bd 	.word	0x000009bd

000015b4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    15b4:	b570      	push	{r4, r5, r6, lr}
    15b6:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15b8:	4a1a      	ldr	r2, [pc, #104]	; (1624 <system_gclk_gen_get_hz+0x70>)
    15ba:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    15bc:	b25b      	sxtb	r3, r3
    15be:	2b00      	cmp	r3, #0
    15c0:	dbfb      	blt.n	15ba <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    15c2:	4b19      	ldr	r3, [pc, #100]	; (1628 <system_gclk_gen_get_hz+0x74>)
    15c4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    15c6:	4b19      	ldr	r3, [pc, #100]	; (162c <system_gclk_gen_get_hz+0x78>)
    15c8:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15ca:	4a16      	ldr	r2, [pc, #88]	; (1624 <system_gclk_gen_get_hz+0x70>)
    15cc:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    15ce:	b25b      	sxtb	r3, r3
    15d0:	2b00      	cmp	r3, #0
    15d2:	dbfb      	blt.n	15cc <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    15d4:	4e13      	ldr	r6, [pc, #76]	; (1624 <system_gclk_gen_get_hz+0x70>)
    15d6:	6870      	ldr	r0, [r6, #4]
    15d8:	04c0      	lsls	r0, r0, #19
    15da:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    15dc:	4b14      	ldr	r3, [pc, #80]	; (1630 <system_gclk_gen_get_hz+0x7c>)
    15de:	4798      	blx	r3
    15e0:	0005      	movs	r5, r0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    15e2:	4b12      	ldr	r3, [pc, #72]	; (162c <system_gclk_gen_get_hz+0x78>)
    15e4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    15e6:	6876      	ldr	r6, [r6, #4]
    15e8:	02f6      	lsls	r6, r6, #11
    15ea:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    15ec:	4b11      	ldr	r3, [pc, #68]	; (1634 <system_gclk_gen_get_hz+0x80>)
    15ee:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15f0:	4a0c      	ldr	r2, [pc, #48]	; (1624 <system_gclk_gen_get_hz+0x70>)
    15f2:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    15f4:	b25b      	sxtb	r3, r3
    15f6:	2b00      	cmp	r3, #0
    15f8:	dbfb      	blt.n	15f2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    15fa:	4b0a      	ldr	r3, [pc, #40]	; (1624 <system_gclk_gen_get_hz+0x70>)
    15fc:	689c      	ldr	r4, [r3, #8]
    15fe:	0224      	lsls	r4, r4, #8
    1600:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1602:	4b0d      	ldr	r3, [pc, #52]	; (1638 <system_gclk_gen_get_hz+0x84>)
    1604:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1606:	2e00      	cmp	r6, #0
    1608:	d107      	bne.n	161a <system_gclk_gen_get_hz+0x66>
    160a:	2c01      	cmp	r4, #1
    160c:	d907      	bls.n	161e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    160e:	0021      	movs	r1, r4
    1610:	0028      	movs	r0, r5
    1612:	4b0a      	ldr	r3, [pc, #40]	; (163c <system_gclk_gen_get_hz+0x88>)
    1614:	4798      	blx	r3
    1616:	0005      	movs	r5, r0
    1618:	e001      	b.n	161e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    161a:	3401      	adds	r4, #1
    161c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    161e:	0028      	movs	r0, r5
    1620:	bd70      	pop	{r4, r5, r6, pc}
    1622:	46c0      	nop			; (mov r8, r8)
    1624:	40000c00 	.word	0x40000c00
    1628:	0000097d 	.word	0x0000097d
    162c:	40000c04 	.word	0x40000c04
    1630:	00001265 	.word	0x00001265
    1634:	40000c08 	.word	0x40000c08
    1638:	000009bd 	.word	0x000009bd
    163c:	000019e5 	.word	0x000019e5

00001640 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1640:	b510      	push	{r4, lr}
    1642:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1644:	4b06      	ldr	r3, [pc, #24]	; (1660 <system_gclk_chan_enable+0x20>)
    1646:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1648:	4b06      	ldr	r3, [pc, #24]	; (1664 <system_gclk_chan_enable+0x24>)
    164a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    164c:	4a06      	ldr	r2, [pc, #24]	; (1668 <system_gclk_chan_enable+0x28>)
    164e:	8851      	ldrh	r1, [r2, #2]
    1650:	2380      	movs	r3, #128	; 0x80
    1652:	01db      	lsls	r3, r3, #7
    1654:	430b      	orrs	r3, r1
    1656:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1658:	4b04      	ldr	r3, [pc, #16]	; (166c <system_gclk_chan_enable+0x2c>)
    165a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    165c:	bd10      	pop	{r4, pc}
    165e:	46c0      	nop			; (mov r8, r8)
    1660:	0000097d 	.word	0x0000097d
    1664:	40000c02 	.word	0x40000c02
    1668:	40000c00 	.word	0x40000c00
    166c:	000009bd 	.word	0x000009bd

00001670 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1670:	b510      	push	{r4, lr}
    1672:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1674:	4b0f      	ldr	r3, [pc, #60]	; (16b4 <system_gclk_chan_disable+0x44>)
    1676:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1678:	4b0f      	ldr	r3, [pc, #60]	; (16b8 <system_gclk_chan_disable+0x48>)
    167a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    167c:	4b0f      	ldr	r3, [pc, #60]	; (16bc <system_gclk_chan_disable+0x4c>)
    167e:	885a      	ldrh	r2, [r3, #2]
    1680:	0512      	lsls	r2, r2, #20
    1682:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1684:	8859      	ldrh	r1, [r3, #2]
    1686:	4a0e      	ldr	r2, [pc, #56]	; (16c0 <system_gclk_chan_disable+0x50>)
    1688:	400a      	ands	r2, r1
    168a:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    168c:	8859      	ldrh	r1, [r3, #2]
    168e:	4a0d      	ldr	r2, [pc, #52]	; (16c4 <system_gclk_chan_disable+0x54>)
    1690:	400a      	ands	r2, r1
    1692:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1694:	0019      	movs	r1, r3
    1696:	2280      	movs	r2, #128	; 0x80
    1698:	01d2      	lsls	r2, r2, #7
    169a:	884b      	ldrh	r3, [r1, #2]
    169c:	4213      	tst	r3, r2
    169e:	d1fc      	bne.n	169a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    16a0:	4906      	ldr	r1, [pc, #24]	; (16bc <system_gclk_chan_disable+0x4c>)
    16a2:	884c      	ldrh	r4, [r1, #2]
    16a4:	0202      	lsls	r2, r0, #8
    16a6:	4b06      	ldr	r3, [pc, #24]	; (16c0 <system_gclk_chan_disable+0x50>)
    16a8:	4023      	ands	r3, r4
    16aa:	4313      	orrs	r3, r2
    16ac:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    16ae:	4b06      	ldr	r3, [pc, #24]	; (16c8 <system_gclk_chan_disable+0x58>)
    16b0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    16b2:	bd10      	pop	{r4, pc}
    16b4:	0000097d 	.word	0x0000097d
    16b8:	40000c02 	.word	0x40000c02
    16bc:	40000c00 	.word	0x40000c00
    16c0:	fffff0ff 	.word	0xfffff0ff
    16c4:	ffffbfff 	.word	0xffffbfff
    16c8:	000009bd 	.word	0x000009bd

000016cc <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    16cc:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    16ce:	780c      	ldrb	r4, [r1, #0]
    16d0:	0224      	lsls	r4, r4, #8
    16d2:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    16d4:	4b02      	ldr	r3, [pc, #8]	; (16e0 <system_gclk_chan_set_config+0x14>)
    16d6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    16d8:	b2a4      	uxth	r4, r4
    16da:	4b02      	ldr	r3, [pc, #8]	; (16e4 <system_gclk_chan_set_config+0x18>)
    16dc:	805c      	strh	r4, [r3, #2]
}
    16de:	bd10      	pop	{r4, pc}
    16e0:	00001671 	.word	0x00001671
    16e4:	40000c00 	.word	0x40000c00

000016e8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    16e8:	b510      	push	{r4, lr}
    16ea:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    16ec:	4b06      	ldr	r3, [pc, #24]	; (1708 <system_gclk_chan_get_hz+0x20>)
    16ee:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    16f0:	4b06      	ldr	r3, [pc, #24]	; (170c <system_gclk_chan_get_hz+0x24>)
    16f2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    16f4:	4b06      	ldr	r3, [pc, #24]	; (1710 <system_gclk_chan_get_hz+0x28>)
    16f6:	885c      	ldrh	r4, [r3, #2]
    16f8:	0524      	lsls	r4, r4, #20
    16fa:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    16fc:	4b05      	ldr	r3, [pc, #20]	; (1714 <system_gclk_chan_get_hz+0x2c>)
    16fe:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1700:	0020      	movs	r0, r4
    1702:	4b05      	ldr	r3, [pc, #20]	; (1718 <system_gclk_chan_get_hz+0x30>)
    1704:	4798      	blx	r3
}
    1706:	bd10      	pop	{r4, pc}
    1708:	0000097d 	.word	0x0000097d
    170c:	40000c02 	.word	0x40000c02
    1710:	40000c00 	.word	0x40000c00
    1714:	000009bd 	.word	0x000009bd
    1718:	000015b5 	.word	0x000015b5

0000171c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    171c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    171e:	78d3      	ldrb	r3, [r2, #3]
    1720:	2b00      	cmp	r3, #0
    1722:	d11e      	bne.n	1762 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1724:	7813      	ldrb	r3, [r2, #0]
    1726:	2b80      	cmp	r3, #128	; 0x80
    1728:	d004      	beq.n	1734 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    172a:	061b      	lsls	r3, r3, #24
    172c:	2480      	movs	r4, #128	; 0x80
    172e:	0264      	lsls	r4, r4, #9
    1730:	4323      	orrs	r3, r4
    1732:	e000      	b.n	1736 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1734:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1736:	7854      	ldrb	r4, [r2, #1]
    1738:	2502      	movs	r5, #2
    173a:	43ac      	bics	r4, r5
    173c:	d10a      	bne.n	1754 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    173e:	7894      	ldrb	r4, [r2, #2]
    1740:	2c00      	cmp	r4, #0
    1742:	d103      	bne.n	174c <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1744:	2480      	movs	r4, #128	; 0x80
    1746:	02a4      	lsls	r4, r4, #10
    1748:	4323      	orrs	r3, r4
    174a:	e002      	b.n	1752 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    174c:	24c0      	movs	r4, #192	; 0xc0
    174e:	02e4      	lsls	r4, r4, #11
    1750:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1752:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1754:	7854      	ldrb	r4, [r2, #1]
    1756:	3c01      	subs	r4, #1
    1758:	2c01      	cmp	r4, #1
    175a:	d812      	bhi.n	1782 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    175c:	4c18      	ldr	r4, [pc, #96]	; (17c0 <_system_pinmux_config+0xa4>)
    175e:	4023      	ands	r3, r4
    1760:	e00f      	b.n	1782 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1762:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1764:	040b      	lsls	r3, r1, #16
    1766:	0c1b      	lsrs	r3, r3, #16
    1768:	24a0      	movs	r4, #160	; 0xa0
    176a:	05e4      	lsls	r4, r4, #23
    176c:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    176e:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1770:	0c0b      	lsrs	r3, r1, #16
    1772:	24d0      	movs	r4, #208	; 0xd0
    1774:	0624      	lsls	r4, r4, #24
    1776:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1778:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    177a:	78d3      	ldrb	r3, [r2, #3]
    177c:	2b00      	cmp	r3, #0
    177e:	d018      	beq.n	17b2 <_system_pinmux_config+0x96>
    1780:	e01c      	b.n	17bc <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1782:	040c      	lsls	r4, r1, #16
    1784:	0c24      	lsrs	r4, r4, #16
    1786:	25a0      	movs	r5, #160	; 0xa0
    1788:	05ed      	lsls	r5, r5, #23
    178a:	432c      	orrs	r4, r5
    178c:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    178e:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1790:	0c0c      	lsrs	r4, r1, #16
    1792:	25d0      	movs	r5, #208	; 0xd0
    1794:	062d      	lsls	r5, r5, #24
    1796:	432c      	orrs	r4, r5
    1798:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    179a:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    179c:	78d4      	ldrb	r4, [r2, #3]
    179e:	2c00      	cmp	r4, #0
    17a0:	d10c      	bne.n	17bc <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    17a2:	035b      	lsls	r3, r3, #13
    17a4:	d505      	bpl.n	17b2 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    17a6:	7893      	ldrb	r3, [r2, #2]
    17a8:	2b01      	cmp	r3, #1
    17aa:	d101      	bne.n	17b0 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    17ac:	6181      	str	r1, [r0, #24]
    17ae:	e000      	b.n	17b2 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    17b0:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    17b2:	7853      	ldrb	r3, [r2, #1]
    17b4:	3b01      	subs	r3, #1
    17b6:	2b01      	cmp	r3, #1
    17b8:	d800      	bhi.n	17bc <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    17ba:	6081      	str	r1, [r0, #8]
		}
	}
}
    17bc:	bd30      	pop	{r4, r5, pc}
    17be:	46c0      	nop			; (mov r8, r8)
    17c0:	fffbffff 	.word	0xfffbffff

000017c4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    17c4:	b510      	push	{r4, lr}
    17c6:	0003      	movs	r3, r0
    17c8:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    17ca:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    17cc:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    17ce:	2900      	cmp	r1, #0
    17d0:	d104      	bne.n	17dc <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    17d2:	0958      	lsrs	r0, r3, #5
    17d4:	01c0      	lsls	r0, r0, #7
    17d6:	4905      	ldr	r1, [pc, #20]	; (17ec <system_pinmux_pin_set_config+0x28>)
    17d8:	468c      	mov	ip, r1
    17da:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    17dc:	211f      	movs	r1, #31
    17de:	400b      	ands	r3, r1
    17e0:	391e      	subs	r1, #30
    17e2:	4099      	lsls	r1, r3
    17e4:	4b02      	ldr	r3, [pc, #8]	; (17f0 <system_pinmux_pin_set_config+0x2c>)
    17e6:	4798      	blx	r3
}
    17e8:	bd10      	pop	{r4, pc}
    17ea:	46c0      	nop			; (mov r8, r8)
    17ec:	41004400 	.word	0x41004400
    17f0:	0000171d 	.word	0x0000171d

000017f4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    17f4:	4770      	bx	lr
    17f6:	46c0      	nop			; (mov r8, r8)

000017f8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    17f8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    17fa:	4b05      	ldr	r3, [pc, #20]	; (1810 <system_init+0x18>)
    17fc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    17fe:	4b05      	ldr	r3, [pc, #20]	; (1814 <system_init+0x1c>)
    1800:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1802:	4b05      	ldr	r3, [pc, #20]	; (1818 <system_init+0x20>)
    1804:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1806:	4b05      	ldr	r3, [pc, #20]	; (181c <system_init+0x24>)
    1808:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    180a:	4b05      	ldr	r3, [pc, #20]	; (1820 <system_init+0x28>)
    180c:	4798      	blx	r3
}
    180e:	bd10      	pop	{r4, pc}
    1810:	000013d9 	.word	0x000013d9
    1814:	000009ed 	.word	0x000009ed
    1818:	000017f5 	.word	0x000017f5
    181c:	000017f5 	.word	0x000017f5
    1820:	000017f5 	.word	0x000017f5

00001824 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{		
    1824:	e7fe      	b.n	1824 <Dummy_Handler>
    1826:	46c0      	nop			; (mov r8, r8)

00001828 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1828:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    182a:	4b2e      	ldr	r3, [pc, #184]	; (18e4 <Reset_Handler+0xbc>)
    182c:	4a2e      	ldr	r2, [pc, #184]	; (18e8 <Reset_Handler+0xc0>)
    182e:	429a      	cmp	r2, r3
    1830:	d003      	beq.n	183a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1832:	4b2e      	ldr	r3, [pc, #184]	; (18ec <Reset_Handler+0xc4>)
    1834:	4a2b      	ldr	r2, [pc, #172]	; (18e4 <Reset_Handler+0xbc>)
    1836:	429a      	cmp	r2, r3
    1838:	d304      	bcc.n	1844 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    183a:	4b2d      	ldr	r3, [pc, #180]	; (18f0 <Reset_Handler+0xc8>)
    183c:	4a2d      	ldr	r2, [pc, #180]	; (18f4 <Reset_Handler+0xcc>)
    183e:	429a      	cmp	r2, r3
    1840:	d310      	bcc.n	1864 <Reset_Handler+0x3c>
    1842:	e01e      	b.n	1882 <Reset_Handler+0x5a>
    1844:	4a2c      	ldr	r2, [pc, #176]	; (18f8 <Reset_Handler+0xd0>)
    1846:	4b29      	ldr	r3, [pc, #164]	; (18ec <Reset_Handler+0xc4>)
    1848:	3303      	adds	r3, #3
    184a:	1a9b      	subs	r3, r3, r2
    184c:	089b      	lsrs	r3, r3, #2
    184e:	3301      	adds	r3, #1
    1850:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1852:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1854:	4823      	ldr	r0, [pc, #140]	; (18e4 <Reset_Handler+0xbc>)
    1856:	4924      	ldr	r1, [pc, #144]	; (18e8 <Reset_Handler+0xc0>)
    1858:	588c      	ldr	r4, [r1, r2]
    185a:	5084      	str	r4, [r0, r2]
    185c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    185e:	429a      	cmp	r2, r3
    1860:	d1fa      	bne.n	1858 <Reset_Handler+0x30>
    1862:	e7ea      	b.n	183a <Reset_Handler+0x12>
    1864:	4a25      	ldr	r2, [pc, #148]	; (18fc <Reset_Handler+0xd4>)
    1866:	4b22      	ldr	r3, [pc, #136]	; (18f0 <Reset_Handler+0xc8>)
    1868:	3303      	adds	r3, #3
    186a:	1a9b      	subs	r3, r3, r2
    186c:	089b      	lsrs	r3, r3, #2
    186e:	3301      	adds	r3, #1
    1870:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1872:	2200      	movs	r2, #0
                *pDest++ = 0;
    1874:	481f      	ldr	r0, [pc, #124]	; (18f4 <Reset_Handler+0xcc>)
    1876:	2100      	movs	r1, #0
    1878:	1814      	adds	r4, r2, r0
    187a:	6021      	str	r1, [r4, #0]
    187c:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    187e:	429a      	cmp	r2, r3
    1880:	d1fa      	bne.n	1878 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1882:	4a1f      	ldr	r2, [pc, #124]	; (1900 <Reset_Handler+0xd8>)
    1884:	21ff      	movs	r1, #255	; 0xff
    1886:	4b1f      	ldr	r3, [pc, #124]	; (1904 <Reset_Handler+0xdc>)
    1888:	438b      	bics	r3, r1
    188a:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    188c:	39fd      	subs	r1, #253	; 0xfd
    188e:	2390      	movs	r3, #144	; 0x90
    1890:	005b      	lsls	r3, r3, #1
    1892:	4a1d      	ldr	r2, [pc, #116]	; (1908 <Reset_Handler+0xe0>)
    1894:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1896:	481d      	ldr	r0, [pc, #116]	; (190c <Reset_Handler+0xe4>)
    1898:	78c3      	ldrb	r3, [r0, #3]
    189a:	2403      	movs	r4, #3
    189c:	43a3      	bics	r3, r4
    189e:	2202      	movs	r2, #2
    18a0:	4313      	orrs	r3, r2
    18a2:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    18a4:	78c3      	ldrb	r3, [r0, #3]
    18a6:	260c      	movs	r6, #12
    18a8:	43b3      	bics	r3, r6
    18aa:	2108      	movs	r1, #8
    18ac:	430b      	orrs	r3, r1
    18ae:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    18b0:	4b17      	ldr	r3, [pc, #92]	; (1910 <Reset_Handler+0xe8>)
    18b2:	7b98      	ldrb	r0, [r3, #14]
    18b4:	2530      	movs	r5, #48	; 0x30
    18b6:	43a8      	bics	r0, r5
    18b8:	0005      	movs	r5, r0
    18ba:	2020      	movs	r0, #32
    18bc:	4328      	orrs	r0, r5
    18be:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    18c0:	7b98      	ldrb	r0, [r3, #14]
    18c2:	43b0      	bics	r0, r6
    18c4:	4301      	orrs	r1, r0
    18c6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    18c8:	7b99      	ldrb	r1, [r3, #14]
    18ca:	43a1      	bics	r1, r4
    18cc:	430a      	orrs	r2, r1
    18ce:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    18d0:	4a10      	ldr	r2, [pc, #64]	; (1914 <Reset_Handler+0xec>)
    18d2:	6851      	ldr	r1, [r2, #4]
    18d4:	2380      	movs	r3, #128	; 0x80
    18d6:	430b      	orrs	r3, r1
    18d8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    18da:	4b0f      	ldr	r3, [pc, #60]	; (1918 <Reset_Handler+0xf0>)
    18dc:	4798      	blx	r3

        /* Branch to main function */
        main();
    18de:	4b0f      	ldr	r3, [pc, #60]	; (191c <Reset_Handler+0xf4>)
    18e0:	4798      	blx	r3
    18e2:	e7fe      	b.n	18e2 <Reset_Handler+0xba>
    18e4:	20000000 	.word	0x20000000
    18e8:	00001c5c 	.word	0x00001c5c
    18ec:	20000004 	.word	0x20000004
    18f0:	20000114 	.word	0x20000114
    18f4:	20000004 	.word	0x20000004
    18f8:	20000004 	.word	0x20000004
    18fc:	20000008 	.word	0x20000008
    1900:	e000ed00 	.word	0xe000ed00
    1904:	00000000 	.word	0x00000000
    1908:	41007000 	.word	0x41007000
    190c:	41005000 	.word	0x41005000
    1910:	41004800 	.word	0x41004800
    1914:	41004000 	.word	0x41004000
    1918:	00001b55 	.word	0x00001b55
    191c:	00001981 	.word	0x00001981

00001920 <loop>:
		loop();
	}
	return 0;
}

void loop() {
    1920:	b510      	push	{r4, lr}
		print("\t", 1);
		print("\n",	1);
		#endif // CALIBRATE;
	
		#ifndef CALIBRATE
		if(number_of_triggered_landing_buttons() >= 2) { //Landed
    1922:	4b11      	ldr	r3, [pc, #68]	; (1968 <loop+0x48>)
    1924:	4798      	blx	r3
    1926:	2801      	cmp	r0, #1
    1928:	dd17      	ble.n	195a <loop+0x3a>
			
			if(drone_state == LANDED) {
    192a:	4b10      	ldr	r3, [pc, #64]	; (196c <loop+0x4c>)
    192c:	781b      	ldrb	r3, [r3, #0]
    192e:	2b01      	cmp	r3, #1
    1930:	d10b      	bne.n	194a <loop+0x2a>
				if(bumpers_is_pushed()) {
    1932:	4b0f      	ldr	r3, [pc, #60]	; (1970 <loop+0x50>)
    1934:	4798      	blx	r3
    1936:	2800      	cmp	r0, #0
    1938:	d003      	beq.n	1942 <loop+0x22>
					tc_set_data_to_send('b');
    193a:	2062      	movs	r0, #98	; 0x62
    193c:	4b0d      	ldr	r3, [pc, #52]	; (1974 <loop+0x54>)
    193e:	4798      	blx	r3
    1940:	e011      	b.n	1966 <loop+0x46>
				} else {
					tc_set_data_to_send('l');
    1942:	206c      	movs	r0, #108	; 0x6c
    1944:	4b0b      	ldr	r3, [pc, #44]	; (1974 <loop+0x54>)
    1946:	4798      	blx	r3
    1948:	e00d      	b.n	1966 <loop+0x46>
				}
		} else {
				drone_state = LANDED;
    194a:	2201      	movs	r2, #1
    194c:	4b07      	ldr	r3, [pc, #28]	; (196c <loop+0x4c>)
    194e:	701a      	strb	r2, [r3, #0]
				print("1", 1);
    1950:	2101      	movs	r1, #1
    1952:	4809      	ldr	r0, [pc, #36]	; (1978 <loop+0x58>)
    1954:	4b09      	ldr	r3, [pc, #36]	; (197c <loop+0x5c>)
    1956:	4798      	blx	r3
    1958:	e005      	b.n	1966 <loop+0x46>
				//av ukjent grunn fungerer ikke denne sammen med landingssensor3
			}
		} 
		else //airborn
		{	
			drone_state = AIRBORN;
    195a:	2200      	movs	r2, #0
    195c:	4b03      	ldr	r3, [pc, #12]	; (196c <loop+0x4c>)
    195e:	701a      	strb	r2, [r3, #0]
			tc_set_data_to_send('a');
    1960:	2061      	movs	r0, #97	; 0x61
    1962:	4b04      	ldr	r3, [pc, #16]	; (1974 <loop+0x54>)
    1964:	4798      	blx	r3
			//PORT->Group[0].OUTCLR.reg |= LED_1_PIN;	
		} 
		#endif // CALIBRATE
}
    1966:	bd10      	pop	{r4, pc}
    1968:	000007b1 	.word	0x000007b1
    196c:	20000110 	.word	0x20000110
    1970:	0000070d 	.word	0x0000070d
    1974:	0000089d 	.word	0x0000089d
    1978:	00001c38 	.word	0x00001c38
    197c:	00000965 	.word	0x00000965

00001980 <main>:
} drone_state;

void loop();

int main(void)
{	
    1980:	b510      	push	{r4, lr}
	system_init();
    1982:	4b0e      	ldr	r3, [pc, #56]	; (19bc <main+0x3c>)
    1984:	4798      	blx	r3
	configure_usart();
    1986:	4b0e      	ldr	r3, [pc, #56]	; (19c0 <main+0x40>)
    1988:	4798      	blx	r3

	#ifndef CALIBRATE
	configure_tc();	//modul som sender understell ca 10 ganger i sekundet
    198a:	4b0e      	ldr	r3, [pc, #56]	; (19c4 <main+0x44>)
    198c:	4798      	blx	r3
	configure_tc_callbacks();
    198e:	4b0e      	ldr	r3, [pc, #56]	; (19c8 <main+0x48>)
    1990:	4798      	blx	r3
	#endif //CALIBRATE

	init_bumpers();
    1992:	4b0e      	ldr	r3, [pc, #56]	; (19cc <main+0x4c>)
    1994:	4798      	blx	r3
	init_button_landing();
    1996:	4b0e      	ldr	r3, [pc, #56]	; (19d0 <main+0x50>)
    1998:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    199a:	2201      	movs	r2, #1
    199c:	4b0d      	ldr	r3, [pc, #52]	; (19d4 <main+0x54>)
    199e:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    19a0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    19a4:	b662      	cpsie	i
	system_interrupt_enable_global();

	PORT->Group[0].DIRSET.reg |= LED_1_PIN;
    19a6:	490c      	ldr	r1, [pc, #48]	; (19d8 <main+0x58>)
    19a8:	688b      	ldr	r3, [r1, #8]
    19aa:	2080      	movs	r0, #128	; 0x80
    19ac:	0340      	lsls	r0, r0, #13
    19ae:	4303      	orrs	r3, r0
    19b0:	608b      	str	r3, [r1, #8]

	drone_state = LANDED;
    19b2:	4b0a      	ldr	r3, [pc, #40]	; (19dc <main+0x5c>)
    19b4:	701a      	strb	r2, [r3, #0]
	while (1) {
		loop();
    19b6:	4c0a      	ldr	r4, [pc, #40]	; (19e0 <main+0x60>)
    19b8:	47a0      	blx	r4
    19ba:	e7fd      	b.n	19b8 <main+0x38>
    19bc:	000017f9 	.word	0x000017f9
    19c0:	000008a9 	.word	0x000008a9
    19c4:	000007e1 	.word	0x000007e1
    19c8:	00000851 	.word	0x00000851
    19cc:	000006dd 	.word	0x000006dd
    19d0:	00000725 	.word	0x00000725
    19d4:	20000001 	.word	0x20000001
    19d8:	41004400 	.word	0x41004400
    19dc:	20000110 	.word	0x20000110
    19e0:	00001921 	.word	0x00001921

000019e4 <__aeabi_uidiv>:
    19e4:	2200      	movs	r2, #0
    19e6:	0843      	lsrs	r3, r0, #1
    19e8:	428b      	cmp	r3, r1
    19ea:	d374      	bcc.n	1ad6 <__aeabi_uidiv+0xf2>
    19ec:	0903      	lsrs	r3, r0, #4
    19ee:	428b      	cmp	r3, r1
    19f0:	d35f      	bcc.n	1ab2 <__aeabi_uidiv+0xce>
    19f2:	0a03      	lsrs	r3, r0, #8
    19f4:	428b      	cmp	r3, r1
    19f6:	d344      	bcc.n	1a82 <__aeabi_uidiv+0x9e>
    19f8:	0b03      	lsrs	r3, r0, #12
    19fa:	428b      	cmp	r3, r1
    19fc:	d328      	bcc.n	1a50 <__aeabi_uidiv+0x6c>
    19fe:	0c03      	lsrs	r3, r0, #16
    1a00:	428b      	cmp	r3, r1
    1a02:	d30d      	bcc.n	1a20 <__aeabi_uidiv+0x3c>
    1a04:	22ff      	movs	r2, #255	; 0xff
    1a06:	0209      	lsls	r1, r1, #8
    1a08:	ba12      	rev	r2, r2
    1a0a:	0c03      	lsrs	r3, r0, #16
    1a0c:	428b      	cmp	r3, r1
    1a0e:	d302      	bcc.n	1a16 <__aeabi_uidiv+0x32>
    1a10:	1212      	asrs	r2, r2, #8
    1a12:	0209      	lsls	r1, r1, #8
    1a14:	d065      	beq.n	1ae2 <__aeabi_uidiv+0xfe>
    1a16:	0b03      	lsrs	r3, r0, #12
    1a18:	428b      	cmp	r3, r1
    1a1a:	d319      	bcc.n	1a50 <__aeabi_uidiv+0x6c>
    1a1c:	e000      	b.n	1a20 <__aeabi_uidiv+0x3c>
    1a1e:	0a09      	lsrs	r1, r1, #8
    1a20:	0bc3      	lsrs	r3, r0, #15
    1a22:	428b      	cmp	r3, r1
    1a24:	d301      	bcc.n	1a2a <__aeabi_uidiv+0x46>
    1a26:	03cb      	lsls	r3, r1, #15
    1a28:	1ac0      	subs	r0, r0, r3
    1a2a:	4152      	adcs	r2, r2
    1a2c:	0b83      	lsrs	r3, r0, #14
    1a2e:	428b      	cmp	r3, r1
    1a30:	d301      	bcc.n	1a36 <__aeabi_uidiv+0x52>
    1a32:	038b      	lsls	r3, r1, #14
    1a34:	1ac0      	subs	r0, r0, r3
    1a36:	4152      	adcs	r2, r2
    1a38:	0b43      	lsrs	r3, r0, #13
    1a3a:	428b      	cmp	r3, r1
    1a3c:	d301      	bcc.n	1a42 <__aeabi_uidiv+0x5e>
    1a3e:	034b      	lsls	r3, r1, #13
    1a40:	1ac0      	subs	r0, r0, r3
    1a42:	4152      	adcs	r2, r2
    1a44:	0b03      	lsrs	r3, r0, #12
    1a46:	428b      	cmp	r3, r1
    1a48:	d301      	bcc.n	1a4e <__aeabi_uidiv+0x6a>
    1a4a:	030b      	lsls	r3, r1, #12
    1a4c:	1ac0      	subs	r0, r0, r3
    1a4e:	4152      	adcs	r2, r2
    1a50:	0ac3      	lsrs	r3, r0, #11
    1a52:	428b      	cmp	r3, r1
    1a54:	d301      	bcc.n	1a5a <__aeabi_uidiv+0x76>
    1a56:	02cb      	lsls	r3, r1, #11
    1a58:	1ac0      	subs	r0, r0, r3
    1a5a:	4152      	adcs	r2, r2
    1a5c:	0a83      	lsrs	r3, r0, #10
    1a5e:	428b      	cmp	r3, r1
    1a60:	d301      	bcc.n	1a66 <__aeabi_uidiv+0x82>
    1a62:	028b      	lsls	r3, r1, #10
    1a64:	1ac0      	subs	r0, r0, r3
    1a66:	4152      	adcs	r2, r2
    1a68:	0a43      	lsrs	r3, r0, #9
    1a6a:	428b      	cmp	r3, r1
    1a6c:	d301      	bcc.n	1a72 <__aeabi_uidiv+0x8e>
    1a6e:	024b      	lsls	r3, r1, #9
    1a70:	1ac0      	subs	r0, r0, r3
    1a72:	4152      	adcs	r2, r2
    1a74:	0a03      	lsrs	r3, r0, #8
    1a76:	428b      	cmp	r3, r1
    1a78:	d301      	bcc.n	1a7e <__aeabi_uidiv+0x9a>
    1a7a:	020b      	lsls	r3, r1, #8
    1a7c:	1ac0      	subs	r0, r0, r3
    1a7e:	4152      	adcs	r2, r2
    1a80:	d2cd      	bcs.n	1a1e <__aeabi_uidiv+0x3a>
    1a82:	09c3      	lsrs	r3, r0, #7
    1a84:	428b      	cmp	r3, r1
    1a86:	d301      	bcc.n	1a8c <__aeabi_uidiv+0xa8>
    1a88:	01cb      	lsls	r3, r1, #7
    1a8a:	1ac0      	subs	r0, r0, r3
    1a8c:	4152      	adcs	r2, r2
    1a8e:	0983      	lsrs	r3, r0, #6
    1a90:	428b      	cmp	r3, r1
    1a92:	d301      	bcc.n	1a98 <__aeabi_uidiv+0xb4>
    1a94:	018b      	lsls	r3, r1, #6
    1a96:	1ac0      	subs	r0, r0, r3
    1a98:	4152      	adcs	r2, r2
    1a9a:	0943      	lsrs	r3, r0, #5
    1a9c:	428b      	cmp	r3, r1
    1a9e:	d301      	bcc.n	1aa4 <__aeabi_uidiv+0xc0>
    1aa0:	014b      	lsls	r3, r1, #5
    1aa2:	1ac0      	subs	r0, r0, r3
    1aa4:	4152      	adcs	r2, r2
    1aa6:	0903      	lsrs	r3, r0, #4
    1aa8:	428b      	cmp	r3, r1
    1aaa:	d301      	bcc.n	1ab0 <__aeabi_uidiv+0xcc>
    1aac:	010b      	lsls	r3, r1, #4
    1aae:	1ac0      	subs	r0, r0, r3
    1ab0:	4152      	adcs	r2, r2
    1ab2:	08c3      	lsrs	r3, r0, #3
    1ab4:	428b      	cmp	r3, r1
    1ab6:	d301      	bcc.n	1abc <__aeabi_uidiv+0xd8>
    1ab8:	00cb      	lsls	r3, r1, #3
    1aba:	1ac0      	subs	r0, r0, r3
    1abc:	4152      	adcs	r2, r2
    1abe:	0883      	lsrs	r3, r0, #2
    1ac0:	428b      	cmp	r3, r1
    1ac2:	d301      	bcc.n	1ac8 <__aeabi_uidiv+0xe4>
    1ac4:	008b      	lsls	r3, r1, #2
    1ac6:	1ac0      	subs	r0, r0, r3
    1ac8:	4152      	adcs	r2, r2
    1aca:	0843      	lsrs	r3, r0, #1
    1acc:	428b      	cmp	r3, r1
    1ace:	d301      	bcc.n	1ad4 <__aeabi_uidiv+0xf0>
    1ad0:	004b      	lsls	r3, r1, #1
    1ad2:	1ac0      	subs	r0, r0, r3
    1ad4:	4152      	adcs	r2, r2
    1ad6:	1a41      	subs	r1, r0, r1
    1ad8:	d200      	bcs.n	1adc <__aeabi_uidiv+0xf8>
    1ada:	4601      	mov	r1, r0
    1adc:	4152      	adcs	r2, r2
    1ade:	4610      	mov	r0, r2
    1ae0:	4770      	bx	lr
    1ae2:	e7ff      	b.n	1ae4 <__aeabi_uidiv+0x100>
    1ae4:	b501      	push	{r0, lr}
    1ae6:	2000      	movs	r0, #0
    1ae8:	f000 f806 	bl	1af8 <__aeabi_idiv0>
    1aec:	bd02      	pop	{r1, pc}
    1aee:	46c0      	nop			; (mov r8, r8)

00001af0 <__aeabi_uidivmod>:
    1af0:	2900      	cmp	r1, #0
    1af2:	d0f7      	beq.n	1ae4 <__aeabi_uidiv+0x100>
    1af4:	e776      	b.n	19e4 <__aeabi_uidiv>
    1af6:	4770      	bx	lr

00001af8 <__aeabi_idiv0>:
    1af8:	4770      	bx	lr
    1afa:	46c0      	nop			; (mov r8, r8)

00001afc <__aeabi_lmul>:
    1afc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1afe:	464f      	mov	r7, r9
    1b00:	4646      	mov	r6, r8
    1b02:	b4c0      	push	{r6, r7}
    1b04:	0416      	lsls	r6, r2, #16
    1b06:	0c36      	lsrs	r6, r6, #16
    1b08:	4699      	mov	r9, r3
    1b0a:	0033      	movs	r3, r6
    1b0c:	0405      	lsls	r5, r0, #16
    1b0e:	0c2c      	lsrs	r4, r5, #16
    1b10:	0c07      	lsrs	r7, r0, #16
    1b12:	0c15      	lsrs	r5, r2, #16
    1b14:	4363      	muls	r3, r4
    1b16:	437e      	muls	r6, r7
    1b18:	436f      	muls	r7, r5
    1b1a:	4365      	muls	r5, r4
    1b1c:	0c1c      	lsrs	r4, r3, #16
    1b1e:	19ad      	adds	r5, r5, r6
    1b20:	1964      	adds	r4, r4, r5
    1b22:	469c      	mov	ip, r3
    1b24:	42a6      	cmp	r6, r4
    1b26:	d903      	bls.n	1b30 <__aeabi_lmul+0x34>
    1b28:	2380      	movs	r3, #128	; 0x80
    1b2a:	025b      	lsls	r3, r3, #9
    1b2c:	4698      	mov	r8, r3
    1b2e:	4447      	add	r7, r8
    1b30:	4663      	mov	r3, ip
    1b32:	0c25      	lsrs	r5, r4, #16
    1b34:	19ef      	adds	r7, r5, r7
    1b36:	041d      	lsls	r5, r3, #16
    1b38:	464b      	mov	r3, r9
    1b3a:	434a      	muls	r2, r1
    1b3c:	4343      	muls	r3, r0
    1b3e:	0c2d      	lsrs	r5, r5, #16
    1b40:	0424      	lsls	r4, r4, #16
    1b42:	1964      	adds	r4, r4, r5
    1b44:	1899      	adds	r1, r3, r2
    1b46:	19c9      	adds	r1, r1, r7
    1b48:	0020      	movs	r0, r4
    1b4a:	bc0c      	pop	{r2, r3}
    1b4c:	4690      	mov	r8, r2
    1b4e:	4699      	mov	r9, r3
    1b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b52:	46c0      	nop			; (mov r8, r8)

00001b54 <__libc_init_array>:
    1b54:	4b0e      	ldr	r3, [pc, #56]	; (1b90 <__libc_init_array+0x3c>)
    1b56:	b570      	push	{r4, r5, r6, lr}
    1b58:	2500      	movs	r5, #0
    1b5a:	001e      	movs	r6, r3
    1b5c:	4c0d      	ldr	r4, [pc, #52]	; (1b94 <__libc_init_array+0x40>)
    1b5e:	1ae4      	subs	r4, r4, r3
    1b60:	10a4      	asrs	r4, r4, #2
    1b62:	42a5      	cmp	r5, r4
    1b64:	d004      	beq.n	1b70 <__libc_init_array+0x1c>
    1b66:	00ab      	lsls	r3, r5, #2
    1b68:	58f3      	ldr	r3, [r6, r3]
    1b6a:	4798      	blx	r3
    1b6c:	3501      	adds	r5, #1
    1b6e:	e7f8      	b.n	1b62 <__libc_init_array+0xe>
    1b70:	f000 f864 	bl	1c3c <_init>
    1b74:	4b08      	ldr	r3, [pc, #32]	; (1b98 <__libc_init_array+0x44>)
    1b76:	2500      	movs	r5, #0
    1b78:	001e      	movs	r6, r3
    1b7a:	4c08      	ldr	r4, [pc, #32]	; (1b9c <__libc_init_array+0x48>)
    1b7c:	1ae4      	subs	r4, r4, r3
    1b7e:	10a4      	asrs	r4, r4, #2
    1b80:	42a5      	cmp	r5, r4
    1b82:	d004      	beq.n	1b8e <__libc_init_array+0x3a>
    1b84:	00ab      	lsls	r3, r5, #2
    1b86:	58f3      	ldr	r3, [r6, r3]
    1b88:	4798      	blx	r3
    1b8a:	3501      	adds	r5, #1
    1b8c:	e7f8      	b.n	1b80 <__libc_init_array+0x2c>
    1b8e:	bd70      	pop	{r4, r5, r6, pc}
    1b90:	00001c48 	.word	0x00001c48
    1b94:	00001c48 	.word	0x00001c48
    1b98:	00001c48 	.word	0x00001c48
    1b9c:	00001c4c 	.word	0x00001c4c

00001ba0 <memcpy>:
    1ba0:	2300      	movs	r3, #0
    1ba2:	b510      	push	{r4, lr}
    1ba4:	429a      	cmp	r2, r3
    1ba6:	d003      	beq.n	1bb0 <memcpy+0x10>
    1ba8:	5ccc      	ldrb	r4, [r1, r3]
    1baa:	54c4      	strb	r4, [r0, r3]
    1bac:	3301      	adds	r3, #1
    1bae:	e7f9      	b.n	1ba4 <memcpy+0x4>
    1bb0:	bd10      	pop	{r4, pc}
    1bb2:	0000      	movs	r0, r0
    1bb4:	0c0b0a09 	.word	0x0c0b0a09
    1bb8:	00000e0d 	.word	0x00000e0d
    1bbc:	42002c00 	.word	0x42002c00
    1bc0:	42003000 	.word	0x42003000
    1bc4:	42003400 	.word	0x42003400
    1bc8:	001c1c1b 	.word	0x001c1c1b
    1bcc:	10000800 	.word	0x10000800
    1bd0:	00002000 	.word	0x00002000

00001bd4 <tc_interrupt_vectors.12940>:
    1bd4:	00141312 42000800 42000c00 42001000     .......B...B...B
    1be4:	42001400 42001800 42001c00 00001276     ...B...B...Bv...
    1bf4:	00001272 00001272 000012d0 000012d0     r...r...........
    1c04:	0000128a 0000127c 00001290 000012be     ....|...........
    1c14:	0000135c 0000133c 0000133c 000013c8     \...<...<.......
    1c24:	0000134e 0000136a 00001340 00001378     N...j...@...x...
    1c34:	000013b8 00000031                       ....1...

00001c3c <_init>:
    1c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c3e:	46c0      	nop			; (mov r8, r8)
    1c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1c42:	bc08      	pop	{r3}
    1c44:	469e      	mov	lr, r3
    1c46:	4770      	bx	lr

00001c48 <__init_array_start>:
    1c48:	000000dd 	.word	0x000000dd

00001c4c <_fini>:
    1c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c4e:	46c0      	nop			; (mov r8, r8)
    1c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1c52:	bc08      	pop	{r3}
    1c54:	469e      	mov	lr, r3
    1c56:	4770      	bx	lr

00001c58 <__fini_array_start>:
    1c58:	000000b5 	.word	0x000000b5
